import React, { FC, FormEvent, Suspense, memo, useEffect, useState } from "react";
import styles from "../ActivityDetail.module.css";
import useDashboardStore from "@/store/useDashboardStore";
import useStore from "@/store";
// import { UnderRightActivityLog } from "./UnderRightActivityLog/UnderRightActivityLog";
import { Fallback } from "@/components/Fallback/Fallback";
import { ErrorBoundary } from "react-error-boundary";
import { ErrorFallback } from "@/components/ErrorFallback/ErrorFallback";
import dynamic from "next/dynamic";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import productCategoriesM, { moduleCategoryM } from "@/utils/productCategoryM";
import { DatePickerCustomInput } from "@/utils/DatePicker/DatePickerCustomInput";
import { format } from "date-fns";
import { MdClose } from "react-icons/md";
import { toast } from "react-toastify";
import { Zoom } from "@/utils/Helpers/toastHelpers";

// https://nextjs-ja-translation-docs.vercel.app/docs/advanced-features/dynamic-import
// „Éá„Éï„Ç©„É´„Éà„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÅÆÂ†¥Âêà„ÅÆ„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„Ç§„É≥„Éù„Éº„Éà
// const DynamicComponent = dynamic(() => import('../components/hello'));
// ÂêçÂâç‰ªò„Åç„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÅÆÂ†¥Âêà„ÅÆ„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„Ç§„É≥„Éù„Éº„Éà
// const ContactUnderRightActivityLog = dynamic(
//   () =>
//     import("./ContactUnderRightActivityLog/ContactUnderRightActivityLog").then(
//       (mod) => mod.ContactUnderRightActivityLog
//     ),
//   {
//     ssr: false,
//   }
// );
/**„Ç´„Çπ„Çø„É†„É≠„Éº„Éá„Ç£„É≥„Ç∞„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà „Ç™„Éó„Ç∑„Éß„É≥„ÅÆ loading „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíËøΩÂä†„Åó„Å¶„ÄÅÂãïÁöÑ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆË™≠„ÅøËæº„Åø‰∏≠„Å´Ë™≠„ÅøËæº„ÅøÁä∂ÊÖã„Çí„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åß„Åç„Åæ„Åô
 * const DynamicComponentWithCustomLoading = dynamic(() => import('../components/hello'), {
  loading: () => <p>...</p>
});
 */
// SSR„Çí‰ΩøÁî®„Åó„Å™„ÅÑÂ†¥Âêà
// Â∏∏„Å´„Çµ„Éº„Éê„ÉºÂÅ¥„Å´„É¢„Ç∏„É•„Éº„É´„ÇíÂê´„ÇÅ„ÇãÂøÖË¶Å„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åü„Å®„Åà„Å∞„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÅÆ„Åø„ÅßÂãï‰Ωú„Åô„Çã„É©„Ç§„Éñ„É©„É™„Åå„É¢„Ç∏„É•„Éº„É´„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„Åß„Åô„ÄÇ

const ActivityMainContainerMemo: FC = () => {
  const userProfileState = useDashboardStore((state) => state.userProfileState);
  const searchMode = useDashboardStore((state) => state.searchMode);
  const setSearchMode = useDashboardStore((state) => state.setSearchMode);
  console.log("üî• ActivityMainContainer„É¨„É≥„ÉÄ„É™„É≥„Ç∞ searchMode", searchMode);
  const setHoveredItemPosWrap = useStore((state) => state.setHoveredItemPosWrap);
  const isOpenSidebar = useDashboardStore((state) => state.isOpenSidebar);
  // ‰∏äÁîªÈù¢„ÅÆÈÅ∏Êäû‰∏≠„ÅÆÂàó„Éá„Éº„Çø‰ºöÁ§æ
  const selectedRowDataActivity = useDashboardStore((state) => state.selectedRowDataActivity);
  const setSelectedRowDataActivity = useDashboardStore((state) => state.setSelectedRowDataActivity);
  // ÊãÖÂΩìËÄÖÁ∑®ÈõÜ„É¢„Éº„ÉÄ„É´„Ç™„Éº„Éó„É≥
  const setIsOpenUpdateActivityModal = useDashboardStore((state) => state.setIsOpenUpdateActivityModal);

  const handleOpenTooltip = (e: React.MouseEvent<HTMLElement, MouseEvent>, display: string = "center") => {
    // „Éõ„Éê„Éº„Åó„Åü„Ç¢„Ç§„ÉÜ„É†„Å´„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÇíË°®Á§∫
    const { x, y, width, height } = e.currentTarget.getBoundingClientRect();
    // console.log("„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éóx, y width , height", x, y, width, height);
    const content2 = ((e.target as HTMLDivElement).dataset.text2 as string)
      ? ((e.target as HTMLDivElement).dataset.text2 as string)
      : "";
    const content3 = ((e.target as HTMLDivElement).dataset.text3 as string)
      ? ((e.target as HTMLDivElement).dataset.text3 as string)
      : "";
    setHoveredItemPosWrap({
      x: x,
      y: y,
      itemWidth: width,
      itemHeight: height,
      content: (e.target as HTMLDivElement).dataset.text as string,
      content2: content2,
      content3: content3,
      display: display,
    });
  };
  // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÇíÈùûË°®Á§∫
  const handleCloseTooltip = () => {
    setHoveredItemPosWrap(null);
  };

  // „Çª„É´„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ „É¢„Éº„ÉÄ„É´Ë°®Á§∫
  // const handleDoubleClick = useCallback((e: React.MouseEvent<HTMLDivElement>, index: number, columnName: string) => {
  //   console.log("„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ index", index);
  //   if (columnName === "id") return console.log("„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ id„ÅÆ„Åü„ÇÅ„É™„Çø„Éº„É≥");
  //   // if (index === 0) return console.log("„É™„Çø„Éº„É≥");
  //   if (setTimeoutRef.current) {
  //     clearTimeout(setTimeoutRef.current);

  //     // console.log(e.detail);
  //     setTimeoutRef.current = null;
  //     // „ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´ÂÆüË°å„Åó„Åü„ÅÑÂá¶ÁêÜ
  //     console.log("„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ", e.currentTarget);
  //     // „ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüË¶ÅÁ¥†„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊ†ºÁ¥ç
  //     const text = e.currentTarget.innerText;
  //     setTextareaInput(text);
  //     setIsOpenEditModal(true);
  //   }
  // }, []);

  const tableContainerSize = useDashboardStore((state) => state.tableContainerSize);
  const underDisplayFullScreen = useDashboardStore((state) => state.underDisplayFullScreen);

  // üåü„Çµ„Éñ„Éü„ÉÉ„Éà
  const [inputCompanyName, setInputCompanyName] = useState("");
  const [inputDepartmentName, setInputDepartmentName] = useState("");
  const [inputTel, setInputTel] = useState("");
  const [inputFax, setInputFax] = useState("");
  const [inputZipcode, setInputZipcode] = useState("");
  const [inputAddress, setInputAddress] = useState("");
  const [inputEmployeesClass, setInputEmployeesClass] = useState("");
  const [inputCapital, setInputCapital] = useState("");
  const [inputFound, setInputFound] = useState("");
  const [inputContent, setInputContent] = useState("");
  const [inputHP, setInputHP] = useState("");
  const [inputCompanyEmail, setInputCompanyEmail] = useState("");
  const [inputIndustryType, setInputIndustryType] = useState("");
  const [inputProductL, setInputProductL] = useState("");
  const [inputProductM, setInputProductM] = useState("");
  const [inputProductS, setInputProductS] = useState("");
  const [inputFiscal, setInputFiscal] = useState("");
  const [inputBudgetRequestMonth1, setInputBudgetRequestMonth1] = useState("");
  const [inputBudgetRequestMonth2, setInputBudgetRequestMonth2] = useState("");
  const [inputClient, setInputClient] = useState("");
  const [inputSupplier, setInputSupplier] = useState("");
  const [inputFacility, setInputFacility] = useState("");
  const [inputBusinessSite, setInputBusinessSite] = useState("");
  const [inputOverseas, setInputOverseas] = useState("");
  const [inputGroup, setInputGroup] = useState("");
  const [inputCorporateNum, setInputCorporateNum] = useState("");
  // contacts„ÉÜ„Éº„Éñ„É´
  const [inputContactName, setInputContactName] = useState("");
  const [inputDirectLine, setInputDirectLine] = useState("");
  const [inputDirectFax, setInputDirectFax] = useState("");
  const [inputExtension, setInputExtension] = useState("");
  const [inputCompanyCellPhone, setInputCompanyCellPhone] = useState("");
  const [inputPersonalCellPhone, setInputPersonalCellPhone] = useState("");
  const [inputContactEmail, setInputContactEmail] = useState("");
  const [inputPositionName, setInputPositionName] = useState("");
  const [inputPositionClass, setInputPositionClass] = useState("");
  const [inputOccupation, setInputOccupation] = useState("");
  const [inputApprovalAmount, setInputApprovalAmount] = useState("");
  const [inputContactCreatedByCompanyId, setInputContactCreatedByCompanyId] = useState("");
  const [inputContactCreatedByUserId, setInputContactCreatedByUserId] = useState("");
  // activity„ÉÜ„Éº„Éñ„É´
  const [inputActivityCreatedByCompanyId, setInputActivityCreatedByCompanyId] = useState("");
  const [inputActivityCreatedByUserId, setInputActivityCreatedByUserId] = useState("");
  const [inputActivityCreatedByDepartmentOfUser, setInputActivityCreatedByDepartmentOfUser] = useState("");
  const [inputActivityCreatedByUnitOfUser, setInputActivityCreatedByUnitOfUser] = useState("");
  const [inputSummary, setInputSummary] = useState("");
  const [inputScheduledFollowUpDate, setInputScheduledFollowUpDate] = useState<Date | null>(null);
  const [inputFollowUpFlag, setInputFollowUpFlag] = useState<boolean | null>(null);
  const [inputDocumentUrl, setInputDocumentUrl] = useState("");
  const [inputActivityType, setInputActivityType] = useState("");
  const [inputClaimFlag, setInputClaimFlag] = useState<boolean | null>(null);
  const [inputProductIntroduction1, setInputProductIntroduction1] = useState("");
  const [inputProductIntroduction2, setInputProductIntroduction2] = useState("");
  const [inputProductIntroduction3, setInputProductIntroduction3] = useState("");
  const [inputProductIntroduction4, setInputProductIntroduction4] = useState("");
  const [inputProductIntroduction5, setInputProductIntroduction5] = useState("");
  const [inputBusinessOffice, setInputBusinessOffice] = useState("");
  const [inputMemberName, setInputMemberName] = useState("");
  const [inputPriority, setInputPriority] = useState("");
  const [inputActivityDate, setInputActivityDate] = useState<Date | null>(null);
  const [inputDepartment, setInputDepartment] = useState("");
  const [inputActivityYearMonth, setInputActivityYearMonth] = useState<number | null>(null);

  const supabase = useSupabaseClient();
  const newSearchActivity_Contact_CompanyParams = useDashboardStore(
    (state) => state.newSearchActivity_Contact_CompanyParams
  );
  const setNewSearchActivity_Contact_CompanyParams = useDashboardStore(
    (state) => state.setNewSearchActivity_Contact_CompanyParams
  );
  const editSearchMode = useDashboardStore((state) => state.editSearchMode);
  const setEditSearchMode = useDashboardStore((state) => state.setEditSearchMode);
  const setLoadingGlobalState = useDashboardStore((state) => state.setLoadingGlobalState);

  // „Çµ„Éº„ÉÅÁ∑®ÈõÜ„É¢„Éº„Éâ„Åß„É™„Éó„É¨„Ç§„ÇπÂâç„ÅÆÂÄ§„Å´Âæ©ÂÖÉ„Åô„ÇãÈñ¢Êï∞
  function beforeAdjustFieldValue(value: string | null) {
    if (typeof value === "boolean") return value; // Boolean„ÅÆÂ†¥Âêà„ÄÅ„Åù„ÅÆ„Åæ„Åæ„ÅÆÂÄ§„ÇíËøî„Åô
    if (value === "") return ""; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
    if (value === null) return ""; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
    if (value.includes("%")) value = value.replace(/\%/g, "Ôºä");
    if (value === "ISNULL") return "is null"; // ISNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
    if (value === "ISNOTNULL") return "is not null"; // ISNOTNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
    return value;
  }

  // Êï∞ÂÄ§Âûã„ÅÆ„Éï„Ç£„Éº„É´„ÉâÁî®
  function adjustFieldValueNumber(value: number | null) {
    if (value === null) return null; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
    return value;
  }
  console.log("üî•„É°„Ç§„É≥„Ç≥„É≥„ÉÜ„Éä„ÉºnewSearchActivity_Contact_CompanyParams", newSearchActivity_Contact_CompanyParams);

  // Á∑®ÈõÜ„É¢„Éº„Éâtrue„ÅÆÂ†¥Âêà„ÄÅ„Çµ„Éº„ÉÅÊù°‰ª∂„Çíinput„Çø„Ç∞„ÅÆvalue„Å´Ê†ºÁ¥ç
  // Êñ∞Ë¶è„Çµ„Éº„ÉÅ„ÅÆÂ†¥Âêà„Å´„ÅØ„ÄÅ„Çµ„Éº„ÉÅÊù°‰ª∂„ÇíÁ©∫„Å´„Åô„Çã
  useEffect(() => {
    if (newSearchActivity_Contact_CompanyParams === null) return;
    console.log(
      "üî•„É°„Ç§„É≥„Ç≥„É≥„ÉÜ„Éä„ÉºnewSearchActivity_Contact_CompanyParamsÁ∑®ÈõÜ„É¢„Éº„Éâ",
      newSearchActivity_Contact_CompanyParams
    );
    if (editSearchMode) {
      //   setInputCompanyName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.company_name));
      setInputCompanyName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["client_companies.name"]));
      setInputDepartmentName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.department_name));
      //   setInputContactName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.contact_name));
      setInputContactName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["contacts.name"]));
      setInputTel(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams?.main_phone_number));
      setInputFax(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams?.main_fax));
      setInputZipcode(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams?.zipcode));
      setInputEmployeesClass(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams?.number_of_employees_class)
      );
      setInputAddress(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams?.address));
      setInputCapital(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams?.capital));
      setInputFound(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams?.established_in));
      setInputContent(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams?.business_content));
      setInputHP(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.website_url));
      //   setInputCompanyEmail(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.company_email));
      setInputCompanyEmail(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["client_companies.email"]));
      setInputIndustryType(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.industry_type));
      setInputProductL(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.product_category_large));
      setInputProductM(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.product_category_medium));
      setInputProductS(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.product_category_small));
      setInputFiscal(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.fiscal_end_month));
      setInputBudgetRequestMonth1(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.budget_request_month1)
      );
      setInputBudgetRequestMonth2(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.budget_request_month2)
      );
      setInputClient(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.clients));
      setInputSupplier(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.supplier));
      setInputFacility(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.facility));
      setInputBusinessSite(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.business_sites));
      setInputOverseas(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.overseas_bases));
      setInputGroup(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.group_company));
      setInputCorporateNum(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.corporate_number));

      // contacts„ÉÜ„Éº„Éñ„É´
      //   setInputContactName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.contact_name));
      setInputContactName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["contacts.name"]));
      setInputDirectLine(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.direct_line));
      setInputDirectFax(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.direct_fax));
      setInputExtension(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.extension));
      setInputCompanyCellPhone(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.company_cell_phone));
      setInputPersonalCellPhone(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.personal_cell_phone));
      //   setInputContactEmail(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.contact_email));
      setInputContactEmail(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["contacts.email"]));
      setInputPositionName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.position_name));
      setInputPositionClass(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.position_class));
      setInputOccupation(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.occupation));
      setInputApprovalAmount(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.approval_amount));
      setInputContactCreatedByCompanyId(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["contacts.created_by_company_id"])
      );
      setInputContactCreatedByUserId(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["contacts.created_by_user_id"])
      );

      // activities„ÉÜ„Éº„Éñ„É´
      setInputActivityCreatedByCompanyId(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["activities.created_by_company_id"])
      );
      setInputActivityCreatedByUserId(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["activities.created_by_user_id"])
      );
      setInputActivityCreatedByDepartmentOfUser(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["activities.created_by_department_of_user"])
      );
      setInputActivityCreatedByUnitOfUser(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams["activities.created_by_unit_of_user"])
      );
      setInputSummary(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.summary));
      // setInputScheduledFollowUpDate(
      //   beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.scheduled_follow_up_date)
      // );
      // setInputScheduledFollowUpDate(newSearchActivity_Contact_CompanyParams.scheduled_follow_up_date);
      setInputScheduledFollowUpDate(
        newSearchActivity_Contact_CompanyParams.scheduled_follow_up_date
          ? new Date(newSearchActivity_Contact_CompanyParams.scheduled_follow_up_date)
          : null
      );
      setInputFollowUpFlag(newSearchActivity_Contact_CompanyParams.follow_up_flag);
      setInputDocumentUrl(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.document_url));
      setInputActivityType(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.activity_type));
      setInputClaimFlag(newSearchActivity_Contact_CompanyParams.claim_flag);
      setInputProductIntroduction1(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.product_introduction1)
      );
      setInputProductIntroduction2(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.product_introduction2)
      );
      setInputProductIntroduction3(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.product_introduction3)
      );
      setInputProductIntroduction4(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.product_introduction4)
      );
      setInputProductIntroduction5(
        beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.product_introduction5)
      );
      setInputBusinessOffice(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.business_office));
      setInputMemberName(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.member_name));
      setInputPriority(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.priority));
      // setInputActivityDate(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.activity_date));
      setInputActivityDate(
        newSearchActivity_Contact_CompanyParams.activity_date
          ? new Date(newSearchActivity_Contact_CompanyParams.activity_date)
          : null
      );
      setInputDepartment(beforeAdjustFieldValue(newSearchActivity_Contact_CompanyParams.department));
      setInputActivityYearMonth(adjustFieldValueNumber(newSearchActivity_Contact_CompanyParams.activity_year_month));
    } else {
      setInputCompanyName("");
      setInputContactName("");
      setInputDepartmentName("");
      setInputContactName("");
      setInputTel("");
      setInputFax("");
      setInputZipcode("");
      setInputEmployeesClass("");
      setInputAddress("");
      setInputCapital("");
      setInputFound("");
      setInputContent("");
      setInputHP("");
      setInputCompanyEmail("");
      setInputIndustryType("");
      setInputProductL("");
      setInputProductM("");
      setInputProductS("");
      setInputFiscal("");
      setInputBudgetRequestMonth1("");
      setInputBudgetRequestMonth2("");
      setInputClient("");
      setInputSupplier("");
      setInputFacility("");
      setInputBusinessSite("");
      setInputOverseas("");
      setInputGroup("");
      setInputCorporateNum("");

      // contacts„ÉÜ„Éº„Éñ„É´
      setInputContactName("");
      setInputDirectLine("");
      setInputDirectFax("");
      setInputExtension("");
      setInputCompanyCellPhone("");
      setInputPersonalCellPhone("");
      setInputContactEmail("");
      setInputPositionName("");
      setInputPositionClass("");
      setInputOccupation("");
      setInputApprovalAmount("");
      setInputContactCreatedByCompanyId("");
      setInputContactCreatedByUserId("");

      // activities„ÉÜ„Éº„Éñ„É´
      setInputActivityCreatedByCompanyId("");
      setInputActivityCreatedByUserId("");
      setInputActivityCreatedByDepartmentOfUser("");
      setInputActivityCreatedByUnitOfUser("");
      setInputSummary("");
      setInputScheduledFollowUpDate(null);
      setInputFollowUpFlag(null);
      setInputDocumentUrl("");
      setInputActivityType("");
      setInputClaimFlag(null);
      setInputProductIntroduction1("");
      setInputProductIntroduction2("");
      setInputProductIntroduction3("");
      setInputProductIntroduction4("");
      setInputProductIntroduction5("");
      setInputBusinessOffice("");
      setInputMemberName("");
      setInputPriority("");
      setInputActivityDate(null);
      setInputDepartment("");
      setInputActivityYearMonth(null);
    }
  }, [editSearchMode]);

  // „Çµ„Éº„ÉÅÈñ¢Êï∞ÂÆüË°å
  const handleSearchSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // // Asterisks to percent signs for PostgreSQL's LIKE operator
    function adjustFieldValue(value: string) {
      // if (typeof value === "boolean") return value; // Boolean„ÅÆÂ†¥Âêà„ÄÅ„Åù„ÅÆ„Åæ„Åæ„ÅÆÂÄ§„ÇíËøî„Åô
      if (value === "") return null; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
      if (value === null) return null; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
      if (value.includes("*")) value = value.replace(/\*/g, "%");
      if (value.includes("Ôºä")) value = value.replace(/\Ôºä/g, "%");
      if (value === "is null") return "ISNULL"; // ISNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
      // if (value === "is not null") return "%%";
      if (value === "is not null") return "ISNOTNULL"; // ISNOTNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
      return value;
    }

    setLoadingGlobalState(true);

    let _company_name = adjustFieldValue(inputCompanyName);
    let _department_name = adjustFieldValue(inputDepartmentName);
    let _main_phone_number = adjustFieldValue(inputTel);
    let _main_fax = adjustFieldValue(inputFax);
    let _zipcode = adjustFieldValue(inputZipcode);
    let _number_of_employees_class = adjustFieldValue(inputEmployeesClass);
    let _address = adjustFieldValue(inputAddress);
    let _capital = adjustFieldValue(inputCapital);
    let _established_in = adjustFieldValue(inputFound);
    let _business_content = adjustFieldValue(inputContent);
    let _website_url = adjustFieldValue(inputHP);
    let _company_email = adjustFieldValue(inputCompanyEmail);
    let _industry_type = adjustFieldValue(inputIndustryType);
    let _product_category_large = adjustFieldValue(inputProductL);
    let _product_category_medium = adjustFieldValue(inputProductM);
    let _product_category_small = adjustFieldValue(inputProductS);
    let _fiscal_end_month = adjustFieldValue(inputFiscal);
    let _budget_request_month1 = adjustFieldValue(inputBudgetRequestMonth1);
    let _budget_request_month2 = adjustFieldValue(inputBudgetRequestMonth2);
    let _clients = adjustFieldValue(inputClient);
    let _supplier = adjustFieldValue(inputSupplier);
    let _facility = adjustFieldValue(inputFacility);
    let _business_sites = adjustFieldValue(inputBusinessSite);
    let _overseas_bases = adjustFieldValue(inputOverseas);
    let _group_company = adjustFieldValue(inputGroup);
    let _corporate_number = adjustFieldValue(inputCorporateNum);
    // contacts„ÉÜ„Éº„Éñ„É´
    let _contact_name = adjustFieldValue(inputContactName);
    let _direct_line = adjustFieldValue(inputDirectLine);
    let _direct_fax = adjustFieldValue(inputDirectFax);
    let _extension = adjustFieldValue(inputExtension);
    let _company_cell_phone = adjustFieldValue(inputCompanyCellPhone);
    let _personal_cell_phone = adjustFieldValue(inputPersonalCellPhone);
    let _contact_email = adjustFieldValue(inputContactEmail);
    let _position_name = adjustFieldValue(inputPositionName);
    let _position_class = adjustFieldValue(inputPositionClass);
    let _occupation = adjustFieldValue(inputOccupation);
    let _approval_amount = adjustFieldValue(inputApprovalAmount);
    let _contact_created_by_company_id = adjustFieldValue(inputContactCreatedByCompanyId);
    let _contact_created_by_user_id = adjustFieldValue(inputContactCreatedByUserId);
    // activities„ÉÜ„Éº„Éñ„É´
    let _activity_created_by_company_id = adjustFieldValue(inputActivityCreatedByCompanyId);
    let _activity_created_by_user_id = adjustFieldValue(inputActivityCreatedByUserId);
    let _activity_created_by_department_of_user = adjustFieldValue(inputActivityCreatedByDepartmentOfUser);
    let _activity_created_by_unit_of_user = adjustFieldValue(inputActivityCreatedByUnitOfUser);
    let _summary = adjustFieldValue(inputSummary);
    // let _scheduled_follow_up_date = adjustFieldValue(inputScheduledFollowUpDate);
    let _scheduled_follow_up_date = inputScheduledFollowUpDate ? inputScheduledFollowUpDate.toISOString() : null;
    let _follow_up_flag = inputFollowUpFlag;
    let _document_url = adjustFieldValue(inputDocumentUrl);
    let _activity_type = adjustFieldValue(inputActivityType);
    let _claim_flag = inputClaimFlag;
    let _product_introduction1 = adjustFieldValue(inputProductIntroduction1);
    let _product_introduction2 = adjustFieldValue(inputProductIntroduction2);
    let _product_introduction3 = adjustFieldValue(inputProductIntroduction3);
    let _product_introduction4 = adjustFieldValue(inputProductIntroduction4);
    let _product_introduction5 = adjustFieldValue(inputProductIntroduction5);
    let _business_office = adjustFieldValue(inputBusinessOffice);
    let _member_name = adjustFieldValue(inputMemberName);
    let _priority = adjustFieldValue(inputPriority);
    // let _activity_date = adjustFieldValue(inputActivityDate);
    let _activity_date = inputActivityDate ? inputActivityDate.toISOString() : null;
    let _department = adjustFieldValue(inputDepartment);
    let _activity_year_month = adjustFieldValueNumber(inputActivityYearMonth);

    const params = {
      "client_companies.name": _company_name,
      //   company_name: _company_name,
      department_name: _department_name,
      main_phone_number: _main_phone_number,
      main_fax: _main_fax,
      zipcode: _zipcode,
      address: _address,
      number_of_employees_class: _number_of_employees_class,
      capital: _capital,
      established_in: _established_in,
      business_content: _business_content,
      website_url: _website_url,
      //   company_email: _company_email,
      "client_companies.email": _company_email,
      industry_type: _industry_type,
      product_category_large: _product_category_large,
      product_category_medium: _product_category_medium,
      product_category_small: _product_category_small,
      fiscal_end_month: _fiscal_end_month,
      budget_request_month1: _budget_request_month1,
      budget_request_month2: _budget_request_month2,
      clients: _clients,
      supplier: _supplier,
      facility: _facility,
      business_sites: _business_sites,
      overseas_bases: _overseas_bases,
      group_company: _group_company,
      corporate_number: _corporate_number,
      // contacts„ÉÜ„Éº„Éñ„É´
      //   contact_name: _contact_name,
      "contacts.name": _contact_name,
      direct_line: _direct_line,
      direct_fax: _direct_fax,
      extension: _extension,
      company_cell_phone: _company_cell_phone,
      personal_cell_phone: _personal_cell_phone,
      //   contact_email: _contact_email,
      "contacts.email": _contact_email,
      position_name: _position_name,
      position_class: _position_class,
      occupation: _occupation,
      approval_amount: _approval_amount,
      "contacts.created_by_company_id": _contact_created_by_company_id,
      "contacts.created_by_user_id": _contact_created_by_user_id,
      // activities„ÉÜ„Éº„Éñ„É´
      "activities.created_by_company_id": _activity_created_by_company_id,
      "activities.created_by_user_id": _activity_created_by_user_id,
      "activities.created_by_department_of_user": _activity_created_by_department_of_user,
      "activities.created_by_unit_of_user": _activity_created_by_unit_of_user,
      summary: _summary,
      scheduled_follow_up_date: _scheduled_follow_up_date,
      follow_up_flag: _follow_up_flag,
      document_url: _document_url,
      activity_type: _activity_type,
      claim_flag: _claim_flag,
      product_introduction1: _product_introduction1,
      product_introduction2: _product_introduction2,
      product_introduction3: _product_introduction3,
      product_introduction4: _product_introduction4,
      product_introduction5: _product_introduction5,
      business_office: _business_office,
      member_name: _member_name,
      priority: _priority,
      activity_date: _activity_date,
      department: _department,
      activity_year_month: _activity_year_month,
    };

    // console.log("‚úÖ Êù°‰ª∂ params", params);

    // const { data, error } = await supabase.rpc("search_companies_and_contacts", { params });
    // const { data, error } = await supabase.rpc("search_companies", { params });

    setInputCompanyName("");
    setInputDepartmentName("");
    setInputTel("");
    setInputFax("");
    setInputZipcode("");
    setInputEmployeesClass("");
    setInputAddress("");
    setInputCapital("");
    setInputFound("");
    setInputContent("");
    setInputHP("");
    setInputCompanyEmail("");
    setInputIndustryType("");
    setInputProductL("");
    setInputProductM("");
    setInputProductS("");
    setInputFiscal("");
    setInputBudgetRequestMonth1("");
    setInputBudgetRequestMonth2("");
    setInputClient("");
    setInputSupplier("");
    setInputFacility("");
    setInputBusinessSite("");
    setInputOverseas("");
    setInputGroup("");
    setInputCorporateNum("");
    // contacts„ÉÜ„Éº„Éñ„É´
    setInputContactName("");
    setInputDirectLine("");
    setInputDirectFax("");
    setInputExtension("");
    setInputCompanyCellPhone("");
    setInputPersonalCellPhone("");
    setInputContactEmail("");
    setInputPositionName("");
    setInputPositionClass("");
    setInputOccupation("");
    setInputApprovalAmount("");
    setInputContactCreatedByCompanyId("");
    setInputContactCreatedByUserId("");
    // activities„ÉÜ„Éº„Éñ„É´
    setInputActivityCreatedByCompanyId("");
    setInputActivityCreatedByUserId("");
    setInputActivityCreatedByDepartmentOfUser("");
    setInputActivityCreatedByUnitOfUser("");
    setInputSummary("");
    setInputScheduledFollowUpDate(null);
    setInputFollowUpFlag(null);
    setInputDocumentUrl("");
    setInputActivityType("");
    setInputClaimFlag(null);
    setInputProductIntroduction1("");
    setInputProductIntroduction2("");
    setInputProductIntroduction3("");
    setInputProductIntroduction4("");
    setInputProductIntroduction5("");
    setInputBusinessOffice("");
    setInputMemberName("");
    setInputPriority("");
    setInputActivityDate(null);
    setInputDepartment("");
    setInputActivityYearMonth(null);

    setSearchMode(false);
    setEditSearchMode(false);

    // Zustand„Å´Ê§úÁ¥¢Êù°‰ª∂„ÇíÊ†ºÁ¥ç
    setNewSearchActivity_Contact_CompanyParams(params);

    // ÈÅ∏Êäû‰∏≠„ÅÆÂàó„Éá„Éº„Çø„Çí„É™„Çª„ÉÉ„Éà
    setSelectedRowDataActivity(null);

    console.log("‚úÖ Êù°‰ª∂ params", params);
    // const { data, error } = await supabase.rpc("search_companies", { params });
    // const { data, error } = await supabase.rpc("search_companies_and_contacts", { params });
    // const { data, error } = await supabase.rpc("search_activities_and_companies_and_contacts", { params });

    // ‰ºöÁ§æID„Åånull„ÄÅ„Å§„Åæ„Çä„Åæ„Å†ÊúâÊñô„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÊåÅ„Å£„Å¶„ÅÑ„Å™„ÅÑ„É¶„Éº„Ç∂„Éº
    // const { data, error } = await supabase
    //   .rpc("search_companies_and_contacts", { params })
    //   .is("created_by_company_id", null)
    //   .range(0, 20);

    // „É¶„Éº„Ç∂„ÉºID„ÅåËá™Ë∫´„ÅÆID„Å®‰∏ÄËá¥„Åô„Çã„Éá„Éº„Çø„ÅÆ„Åø ÊàêÂäü
    // const { data, error } = await supabase
    //   .rpc("search_companies_and_contacts", { params })
    //   .eq("created_by_user_id", `${userProfileState?.id}`)
    //   .range(0, 20);

    // if (error) return alert(error.message);
    // console.log("‚úÖ Ê§úÁ¥¢ÁµêÊûú„Éá„Éº„ÇøÂèñÂæó data", data);

    // setLoadingGlobalState(false);
  };

  const handleClaimChangeSelectTagValue = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const value = event.target.value;

    switch (value) {
      case "„ÉÅ„Çß„ÉÉ„ÇØÊúâ„Çä":
        setInputClaimFlag(true);
        break;
      case "„ÉÅ„Çß„ÉÉ„ÇØÁÑ°„Åó":
        setInputClaimFlag(false);
        break;
      default:
        setInputClaimFlag(null);
    }
  };

  const handleFollowUpFlagChangeSelectTagValue = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const value = event.target.value;

    switch (value) {
      case "„ÉÅ„Çß„ÉÉ„ÇØÊúâ„Çä":
        setInputFollowUpFlag(true);
        break;
      case "„ÉÅ„Çß„ÉÉ„ÇØÁÑ°„Åó":
        setInputFollowUpFlag(false);
        break;
      default:
        setInputFollowUpFlag(null);
    }
  };

  // const tableContainerSize = useRootStore(useDashboardStore, (state) => state.tableContainerSize);
  return (
    <form className={`${styles.main_container} w-full `} onSubmit={handleSearchSubmit}>
      {/* ------------------------- „Çπ„ÇØ„É≠„Éº„É´„Ç≥„É≥„ÉÜ„Éä ------------------------- */}
      {/* <div className={`${styles.scroll_container} relative flex w-full overflow-y-auto pl-[10px] `}> */}
      <div
        className={`${styles.scroll_container} relative flex w-full overflow-y-auto pl-[10px] ${
          tableContainerSize === "half" && underDisplayFullScreen ? `${styles.height_all}` : ``
        } ${tableContainerSize === "all" && underDisplayFullScreen ? `${styles.height_all}` : ``}`}
      >
        {/* ------------------------- Â∑¶„Ç≥„É≥„ÉÜ„Éä ------------------------- */}
        <div
          // className={`${styles.left_container} h-full min-w-[calc((100vw-var(--sidebar-width))/3)] pb-[35px] pt-[10px]`}
          className={`${styles.left_container} h-full min-w-[calc(50vw-var(--sidebar-mini-width))] max-w-[calc(50vw-var(--sidebar-mini-width))] pb-[35px] pt-[10px]`}
        >
          {/* --------- „É©„ÉÉ„Éë„Éº --------- */}
          <div className={`${styles.left_contents_wrapper} flex h-full w-full flex-col`}>
            {/* ‰ºöÁ§æÂêç */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óè‰ºöÁ§æÂêç</span>
                  {!searchMode && (
                    <span className={`${styles.value} ${styles.value_highlight}`}>
                      {selectedRowDataActivity?.company_name ? selectedRowDataActivity?.company_name : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      placeholder="Ê†™Âºè‰ºöÁ§æ‚óã‚óã"
                      autoFocus
                      className={`${styles.input_box}`}
                      value={inputCompanyName}
                      onChange={(e) => setInputCompanyName(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ÈÉ®ÁΩ≤Âêç */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óèÈÉ®ÁΩ≤Âêç</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.department_name ? selectedRowDataActivity?.department_name : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      placeholder="„Äå‰ª£Ë°®ÂèñÁ∑†ÂΩπÔºä„Äç„ÇÑ„ÄåÔºäË£ΩÈÄ†ÈÉ®Ôºä„Äç„ÄåÔºäÂìÅË≥™Ôºä„Äç„Å™„Å©"
                      className={`${styles.input_box}`}
                      value={inputDepartmentName}
                      onChange={(e) => setInputDepartmentName(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ÊãÖÂΩìËÄÖÂêç */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>ÊãÖÂΩìËÄÖÂêç</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.contact_name ? selectedRowDataActivity?.contact_name : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="tel"
                      placeholder=""
                      className={`${styles.input_box}`}
                      value={inputContactName}
                      onChange={(e) => setInputContactName(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>Áõ¥ÈÄöTEL</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.direct_line ? selectedRowDataActivity?.direct_line : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="tel"
                      className={`${styles.input_box}`}
                      value={inputDirectLine}
                      onChange={(e) => setInputDirectLine(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ÂÜÖÁ∑öTEL„Éª‰ª£Ë°®TEL */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>ÂÜÖÁ∑öTEL</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.extension ? selectedRowDataActivity?.extension : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="tel"
                      placeholder=""
                      className={`${styles.input_box}`}
                      value={inputExtension}
                      onChange={(e) => setInputExtension(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>‰ª£Ë°®TEL</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.main_phone_number ? selectedRowDataActivity?.main_phone_number : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="tel"
                      className={`${styles.input_box}`}
                      value={inputTel}
                      onChange={(e) => setInputTel(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Áõ¥ÈÄöFAX„Éª‰ª£Ë°®FAX */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>Áõ¥ÈÄöFAX</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.direct_fax ? selectedRowDataActivity?.direct_fax : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputDirectFax}
                      onChange={(e) => setInputDirectFax(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className={`flex h-full w-1/2 flex-col pr-[20px]`}>
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>‰ª£Ë°®FAX</span>
                  {/* <span className={`${styles.title}`}>‰ºöÂì°Â∞ÇÁî®</span> */}
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.main_fax ? selectedRowDataActivity?.main_fax : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputFax}
                      onChange={(e) => setInputFax(e.target.value)}
                    />
                  )}
                  {/* {!searchMode && <span className={`${styles.value}`}>ÊúâÊñô‰ºöÂì°ÊßòÂ∞ÇÁî®„ÅÆ„Éï„Ç£„Éº„É´„Éâ„Åß„Åô</span>} */}
                  {/* {searchMode && <input type="text" className={`${styles.input_box}`} />} */}
                  {/* „Çµ„Éñ„Çπ„ÇØÊú™Âä†ÂÖ•ËÄÖ„Å´„ÅØ„Éñ„É©„Éº„ÇíË°®Á§∫ */}
                  {/* <div className={`${styles.limited_lock_cover_half} flex-center`}>
                    <FaLock />
                  </div> */}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Á§æÁî®Êê∫Â∏Ø„ÉªÁßÅÁî®Êê∫Â∏Ø */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>Á§æÁî®Êê∫Â∏Ø</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.company_cell_phone ? selectedRowDataActivity?.company_cell_phone : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputCompanyCellPhone}
                      onChange={(e) => setInputCompanyCellPhone(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>ÁßÅÁî®Êê∫Â∏Ø</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.personal_cell_phone ? selectedRowDataActivity?.personal_cell_phone : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputPersonalCellPhone}
                      onChange={(e) => setInputPersonalCellPhone(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Email */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>E-mail</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.contact_email ? selectedRowDataActivity?.contact_email : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputContactEmail}
                      onChange={(e) => setInputContactEmail(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ÈÉµ‰æøÁï™Âè∑„Éª */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>ÈÉµ‰æøÁï™Âè∑</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.zipcode ? selectedRowDataActivity?.zipcode : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputZipcode}
                      onChange={(e) => setInputZipcode(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}></span>
                  {/* {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.established_in ? selectedRowDataActivity?.established_in : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputFound}
                      onChange={(e) => setInputFound(e.target.value)}
                    />
                  )} */}
                </div>
                {/* <div className={`${styles.underline}`}></div> */}
              </div>
            </div>

            {/* ‰ΩèÊâÄ */}
            <div className={`${styles.row_area} flex h-[50px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px] ">
                <div className={`${styles.title_box} flex h-full `}>
                  <span className={`${styles.title}`}>‚óã‰ΩèÊâÄ</span>
                  {!searchMode && (
                    <span className={`${styles.textarea_value} h-[45px]`}>
                      {selectedRowDataActivity?.address ? selectedRowDataActivity?.address : ""}
                    </span>
                  )}
                  {searchMode && (
                    <textarea
                      name="address"
                      id="address"
                      cols={30}
                      rows={10}
                      placeholder="„ÄåÁ•ûÂ•àÂ∑ùÁúåÔºä„Äç„ÇÑ„ÄåÔºäÂ§ßÁî∞Âå∫Ôºä„Äç„Å™„Å©"
                      className={`${styles.textarea_box} `}
                      value={inputAddress}
                      onChange={(e) => setInputAddress(e.target.value)}
                    ></textarea>
                  )}
                </div>
                <div className={`${styles.underline} `}></div>
              </div>
            </div>

            {/* ÂΩπËÅ∑Âêç„ÉªËÅ∑‰Ωç */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>ÂΩπËÅ∑Âêç</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.position_name ? selectedRowDataActivity?.position_name : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputPositionName}
                      onChange={(e) => setInputPositionName(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>ËÅ∑‰Ωç</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.position_class ? selectedRowDataActivity?.position_class : ""}
                    </span>
                  )}
                  {searchMode && (
                    // <input
                    //   type="text"
                    //   className={`${styles.input_box} ml-[20px]`}
                    //   value={inputProductL}
                    //   onChange={(e) => setInputProductL(e.target.value)}
                    // />
                    <select
                      name="position_class"
                      id="position_class"
                      className={`ml-auto h-full w-full cursor-pointer rounded-[4px] ${styles.select_box}`}
                      value={inputPositionClass}
                      onChange={(e) => setInputPositionClass(e.target.value)}
                    >
                      <option value=""></option>
                      <option value="1 ‰ª£Ë°®ËÄÖ">1 ‰ª£Ë°®ËÄÖ</option>
                      <option value="2 ÂèñÁ∑†ÂΩπ/ÂΩπÂì°">2 ÂèñÁ∑†ÂΩπ/ÂΩπÂì°</option>
                      <option value="3 ÈÉ®Èï∑">3 ÈÉ®Èï∑</option>
                      <option value="4 Ë™≤Èï∑">4 Ë™≤Èï∑</option>
                      <option value="5 Ë™≤Èï∑Êú™Ê∫Ä">5 Ë™≤Èï∑Êú™Ê∫Ä</option>
                      <option value="6 ÊâÄÈï∑„ÉªÂ∑•Â†¥Èï∑">6 ÊâÄÈï∑„ÉªÂ∑•Â†¥Èï∑</option>
                      <option value="7 ‰∏çÊòé">7 ‰∏çÊòé</option>
                    </select>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ÊãÖÂΩìËÅ∑Á®Æ„ÉªÊ±∫Ë£ÅÈáëÈ°ç */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>ÊãÖÂΩìËÅ∑Á®Æ</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.occupation ? selectedRowDataActivity?.occupation : ""}
                    </span>
                  )}
                  {searchMode && (
                    // <input
                    //   type="text"
                    //   className={`${styles.input_box} ml-[20px]`}
                    //   value={inputProductL}
                    //   onChange={(e) => setInputProductL(e.target.value)}
                    // />
                    <select
                      name="position_class"
                      id="position_class"
                      className={`ml-auto h-full w-full cursor-pointer rounded-[4px] ${styles.select_box}`}
                      value={inputEmployeesClass}
                      onChange={(e) => setInputEmployeesClass(e.target.value)}
                    >
                      <option value=""></option>
                      <option value="Á§æÈï∑/CEO">Á§æÈï∑/CEO</option>
                      <option value="ÂèñÁ∑†ÂΩπ„ÉªÂΩπÂì°">ÂèñÁ∑†ÂΩπ„ÉªÂΩπÂì°</option>
                      <option value="„Éó„É≠„Ç∏„Çß„ÇØ„Éà/„Éó„É≠„Ç∞„É©„É†ÁÆ°ÁêÜ">„Éó„É≠„Ç∏„Çß„ÇØ„Éà/„Éó„É≠„Ç∞„É©„É†ÁÆ°ÁêÜ</option>
                      <option value="Âñ∂Ê•≠">Âñ∂Ê•≠</option>
                      <option value="„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞">„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞</option>
                      <option value="„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ">„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ</option>
                      <option value="„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢ÈñãÁô∫">„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢ÈñãÁô∫</option>
                      <option value="ÈñãÁô∫„ÉªË®≠Ë®à">ÈñãÁô∫„ÉªË®≠Ë®à</option>
                      <option value="ÁîüÁî£ÊäÄË°ì">ÁîüÁî£ÊäÄË°ì</option>
                      <option value="Ë£ΩÈÄ†">Ë£ΩÈÄ†</option>
                      <option value="ÂìÅË≥™ÁÆ°ÁêÜ„ÉªÂìÅË≥™‰øùË®º">ÂìÅË≥™ÁÆ°ÁêÜ„ÉªÂìÅË≥™‰øùË®º</option>
                      <option value="‰∫∫‰∫ã">‰∫∫‰∫ã</option>
                      <option value="ÁµåÁêÜ">ÁµåÁêÜ</option>
                      <option value="Á∑èÂãô">Á∑èÂãô</option>
                      <option value="Ê≥ïÂãô">Ê≥ïÂãô</option>
                      <option value="Ë≤°Âãô">Ë≤°Âãô</option>
                      <option value="ÊÉÖÂ†±„Ç∑„Çπ„ÉÜ„É†/ITÁÆ°ÁêÜËÄÖ">ÊÉÖÂ†±„Ç∑„Çπ„ÉÜ„É†/ITÁÆ°ÁêÜËÄÖ</option>
                      <option value="CS/„Ç´„Çπ„Çø„Éû„Éº„Çµ„Éº„Éì„Çπ">CS/„Ç´„Çπ„Çø„Éû„Éº„Çµ„Éº„Éì„Çπ</option>
                      <option value="Ë≥ºË≤∑">Ë≥ºË≤∑</option>
                      <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                    </select>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title} !mr-[15px]`}>Ê±∫Ë£ÅÈáëÈ°ç(‰∏áÂÜÜ)</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.approval_amount ? selectedRowDataActivity?.approval_amount : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputApprovalAmount}
                      onChange={(e) => setInputApprovalAmount(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Ë¶èÊ®°Ôºà„É©„É≥„ÇØÔºâ„ÉªÊ±∫ÁÆóÊúà */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>Ë¶èÊ®°(ÔæóÔæùÔΩ∏)</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.number_of_employees_class
                        ? selectedRowDataActivity?.number_of_employees_class
                        : ""}
                    </span>
                  )}
                  {searchMode && (
                    // <input
                    //   type="text"
                    //   className={`${styles.input_box} ml-[20px]`}
                    //   value={inputProductL}
                    //   onChange={(e) => setInputProductL(e.target.value)}
                    // />
                    <select
                      name="position_class"
                      id="position_class"
                      className={`ml-auto h-full w-full cursor-pointer rounded-[4px] ${styles.select_box}`}
                      value={inputEmployeesClass}
                      onChange={(e) => setInputEmployeesClass(e.target.value)}
                    >
                      <option value=""></option>
                      {/* <option value="">ÂõûÁ≠î„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option> */}
                      <option value="A 1000Âêç‰ª•‰∏ä">A 1000Âêç‰ª•‰∏ä</option>
                      <option value="B 500„Äú999Âêç">B 500„Äú999Âêç</option>
                      <option value="C 300„Äú499Âêç">C 300„Äú499Âêç</option>
                      <option value="D 200„Äú299Âêç">D 200„Äú299Âêç</option>
                      <option value="E 100„Äú199Âêç">E 100„Äú199Âêç</option>
                      <option value="F 50„Äú99Âêç">F 50„Äú99Âêç</option>
                      <option value="G 1„Äú49Âêç">G 1„Äú49Âêç</option>
                      {/* <option value=""></option>
                      <option value="A 1000Âêç‰ª•‰∏ä">A 1000Âêç‰ª•‰∏ä</option>
                      <option value="B 500-999Âêç">B 500-999Âêç</option>
                      <option value="C 300-499Âêç">C 300-499Âêç</option>
                      <option value="D 200-299Âêç">D 200-299Âêç</option>
                      <option value="E 100-199Âêç">E 100-199Âêç</option>
                      <option value="F 50-99Âêç">F 50-99Âêç</option>
                      <option value="G 50ÂêçÊú™Ê∫Ä">G 50ÂêçÊú™Ê∫Ä</option> */}
                    </select>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>Ê±∫ÁÆóÊúà</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.fiscal_end_month ? selectedRowDataActivity?.fiscal_end_month : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputFiscal}
                      onChange={(e) => setInputFiscal(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∫àÁÆóÁî≥Ë´ãÊúà1„Éª‰∫àÁÆóÁî≥Ë´ãÊúà2 */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰∫àÁÆóÁî≥Ë´ãÊúà1</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.budget_request_month1
                        ? selectedRowDataActivity?.budget_request_month1
                        : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputBudgetRequestMonth1}
                      onChange={(e) => setInputBudgetRequestMonth1(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>‰∫àÁÆóÁî≥Ë´ãÊúà2</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.budget_request_month2
                        ? selectedRowDataActivity?.budget_request_month2
                        : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputBudgetRequestMonth2}
                      onChange={(e) => setInputBudgetRequestMonth2(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∫ãÊ•≠ÂÜÖÂÆπ */}
            <div className={`${styles.row_area} flex h-[50px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px] ">
                <div className={`${styles.title_box}  flex h-full`}>
                  <span className={`${styles.title}`}>‰∫ãÊ•≠ÂÜÖÂÆπ</span>
                  {!searchMode && (
                    <>
                      {/* <span className={`${styles.textarea_value} h-[45px]`}>
                        Êù±‰∫¨ÈÉΩÊ∏ØÂå∫ËäùÊµ¶4-20-2
                        ËäùÊµ¶„Ç¢„Ç§„É©„É≥„Éâ„Éñ„É´„Éº„É†„Çø„ÉØ„Éº602Âè∑ÂÆ§„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇËäùÊµ¶„Ç¢„Ç§„É©„É≥„Éâ„Éñ„É´„Éº„É†„Çø„ÉØ„Éº602Âè∑ÂÆ§222„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ
                      </span> */}
                      <span
                        data-text={`${
                          selectedRowDataActivity?.business_content ? selectedRowDataActivity?.business_content : ""
                        }`}
                        className={`${styles.textarea_value} h-[45px]`}
                        onMouseEnter={(e) => handleOpenTooltip(e)}
                        onMouseLeave={handleCloseTooltip}
                        dangerouslySetInnerHTML={{
                          __html: selectedRowDataActivity?.business_content
                            ? selectedRowDataActivity?.business_content.replace(/\n/g, "<br>")
                            : "",
                        }}
                      >
                        {/* {selectedRowDataActivity?.business_content ? selectedRowDataActivity?.business_content : ""} */}
                      </span>
                    </>
                  )}
                  {searchMode && (
                    <textarea
                      name="address"
                      id="address"
                      cols={30}
                      rows={10}
                      className={`${styles.textarea_box} `}
                      value={inputContent}
                      onChange={(e) => setInputContent(e.target.value)}
                    ></textarea>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∏ªË¶ÅÂèñÂºïÂÖà */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰∏ªË¶ÅÂèñÂºïÂÖà</span>
                  {!searchMode && (
                    <span
                      data-text={`${selectedRowDataActivity?.clients ? selectedRowDataActivity?.clients : ""}`}
                      className={`${styles.value}`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataActivity?.clients ? selectedRowDataActivity?.clients : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputClient}
                      onChange={(e) => setInputClient(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∏ªË¶Å‰ªïÂÖ•ÂÖà */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰∏ªË¶Å‰ªïÂÖ•ÂÖà</span>
                  {!searchMode && (
                    <span
                      data-text={`${selectedRowDataActivity?.supplier ? selectedRowDataActivity?.supplier : ""}`}
                      className={`${styles.value}`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataActivity?.supplier ? selectedRowDataActivity?.supplier : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputSupplier}
                      onChange={(e) => setInputSupplier(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Ë®≠ÂÇô */}
            <div className={`${styles.row_area} flex h-[50px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px] ">
                <div className={`${styles.title_box}  flex h-full`}>
                  <span className={`${styles.title}`}>Ë®≠ÂÇô</span>
                  {!searchMode && (
                    <>
                      <span
                        data-text={`${selectedRowDataActivity?.facility ? selectedRowDataActivity?.facility : ""}`}
                        className={`${styles.textarea_value} h-[45px]`}
                        onMouseEnter={(e) => handleOpenTooltip(e)}
                        onMouseLeave={handleCloseTooltip}
                        dangerouslySetInnerHTML={{
                          __html: selectedRowDataActivity?.facility
                            ? selectedRowDataActivity?.facility.replace(/\n/g, "<br>")
                            : "",
                        }}
                      >
                        {/* {selectedRowDataActivity?.facility ? selectedRowDataActivity?.facility : ""} */}
                      </span>
                    </>
                  )}
                  {searchMode && (
                    <textarea
                      name="address"
                      id="address"
                      cols={30}
                      rows={10}
                      className={`${styles.textarea_box} `}
                      value={inputFacility}
                      onChange={(e) => setInputFacility(e.target.value)}
                    ></textarea>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∫ãÊ•≠Êã†ÁÇπ„ÉªÊµ∑Â§ñÊã†ÁÇπ */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰∫ãÊ•≠Êã†ÁÇπ</span>
                  {!searchMode && (
                    <span
                      data-text={`${
                        selectedRowDataActivity?.business_sites ? selectedRowDataActivity?.business_sites : ""
                      }`}
                      className={`${styles.value}`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataActivity?.business_sites ? selectedRowDataActivity?.business_sites : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputBusinessSite}
                      onChange={(e) => setInputBusinessSite(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>Êµ∑Â§ñÊã†ÁÇπ</span>
                  {!searchMode && (
                    <span
                      data-text={`${
                        selectedRowDataActivity?.overseas_bases ? selectedRowDataActivity?.overseas_bases : ""
                      }`}
                      className={`${styles.value}`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataActivity?.overseas_bases ? selectedRowDataActivity?.overseas_bases : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputOverseas}
                      onChange={(e) => setInputOverseas(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* „Ç∞„É´„Éº„Éó‰ºöÁ§æ */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>„Ç∞„É´„Éº„Éó‰ºöÁ§æ</span>
                  {!searchMode && (
                    <span
                      className={`${styles.value}`}
                      data-text={`${
                        selectedRowDataActivity?.group_company ? selectedRowDataActivity?.group_company : ""
                      }`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataActivity?.group_company ? selectedRowDataActivity?.group_company : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputGroup}
                      onChange={(e) => setInputGroup(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* HP */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>HP</span>
                  {!searchMode && !!selectedRowDataActivity?.website_url ? (
                    <a
                      href={selectedRowDataActivity.website_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className={`${styles.value} ${styles.anchor}`}
                    >
                      {selectedRowDataActivity.website_url}
                    </a>
                  ) : (
                    <span></span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      placeholder="„Äåis not null„Äç„ÅßHPÊúâ„Çä„ÅÆ„Éá„Éº„Çø„ÅÆ„ÅøÊäΩÂá∫"
                      value={inputHP}
                      onChange={(e) => setInputHP(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰ºöÁ§æEmail */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰ºöÁ§æEmail</span>
                  {!searchMode && (
                    <span
                      className={`${styles.value} ${styles.email_value}`}
                      onClick={async () => {
                        if (!selectedRowDataActivity?.company_email) return;
                        try {
                          await navigator.clipboard.writeText(selectedRowDataActivity.company_email);
                          toast.success(`„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü!`, {
                            position: "bottom-center",
                            autoClose: 1000,
                            hideProgressBar: false,
                            closeOnClick: true,
                            pauseOnHover: true,
                            draggable: true,
                            progress: undefined,
                            transition: Zoom,
                          });
                        } catch (e: any) {
                          toast.error(`„Ç≥„Éî„Éº„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü!`, {
                            position: "bottom-center",
                            autoClose: 1000,
                            hideProgressBar: false,
                            closeOnClick: true,
                            pauseOnHover: true,
                            draggable: true,
                            progress: undefined,
                            transition: Zoom,
                          });
                        }
                      }}
                    >
                      {selectedRowDataActivity?.company_email ? selectedRowDataActivity?.company_email : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      placeholder="„Äåis not null„Äç„ÅßHPÊúâ„Çä„ÅÆ„Éá„Éº„Çø„ÅÆ„ÅøÊäΩÂá∫"
                      value={inputCompanyEmail}
                      onChange={(e) => setInputCompanyEmail(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Ê•≠Á®Æ */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óãÊ•≠Á®Æ</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.industry_type ? selectedRowDataActivity?.industry_type : ""}
                    </span>
                  )}
                  {searchMode && !inputProductL && (
                    // <input
                    //   type="text"
                    //   className={`${styles.input_box}`}
                    //   value={inputIndustryType}
                    //   onChange={(e) => setInputIndustryType(e.target.value)}
                    // />
                    <select
                      name="position_class"
                      id="position_class"
                      className={`ml-auto h-full w-full cursor-pointer rounded-[4px] ${styles.select_box}`}
                      value={inputIndustryType}
                      onChange={(e) => setInputIndustryType(e.target.value)}
                    >
                      <option value=""></option>
                      <option value="Ê©üÊ¢∞Ë¶ÅÁ¥†„ÉªÈÉ®ÂìÅ">Ê©üÊ¢∞Ë¶ÅÁ¥†„ÉªÈÉ®ÂìÅ</option>
                      <option value="Ëá™ÂãïËªä„ÉªËº∏ÈÄÅÊ©üÂô®">Ëá™ÂãïËªä„ÉªËº∏ÈÄÅÊ©üÂô®</option>
                      <option value="ÈõªÂ≠êÈÉ®ÂìÅ„ÉªÂçäÂ∞é‰Ωì">ÈõªÂ≠êÈÉ®ÂìÅ„ÉªÂçäÂ∞é‰Ωì</option>
                      <option value="Ë£ΩÈÄ†„ÉªÂä†Â∑•ÂèóË®ó">Ë£ΩÈÄ†„ÉªÂä†Â∑•ÂèóË®ó</option>
                      <option value="Áî£Ê•≠Áî®Ê©üÊ¢∞">Áî£Ê•≠Áî®Ê©üÊ¢∞</option>
                      <option value="Áî£Ê•≠Áî®ÈõªÊ∞óÊ©üÂô®">Áî£Ê•≠Áî®ÈõªÊ∞óÊ©üÂô®</option>
                      <option value="IT„ÉªÊÉÖÂ†±ÈÄö‰ø°">IT„ÉªÊÉÖÂ†±ÈÄö‰ø°</option>
                      <option value="„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢">„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢</option>
                      <option value="ÂåªËñ¨ÂìÅ„Éª„Éê„Ç§„Ç™">ÂåªËñ¨ÂìÅ„Éª„Éê„Ç§„Ç™</option>
                      <option value="Ê®πËÑÇ„Éª„Éó„É©„Çπ„ÉÅ„ÉÉ„ÇØ">Ê®πËÑÇ„Éª„Éó„É©„Çπ„ÉÅ„ÉÉ„ÇØ</option>
                      <option value="„Ç¥„É†Ë£ΩÂìÅ">„Ç¥„É†Ë£ΩÂìÅ</option>
                      <option value="ÈâÑ/ÈùûÈâÑÈáëÂ±û">ÈâÑ/ÈùûÈâÑÈáëÂ±û</option>
                      <option value="Ê∞ëÁîüÁî®ÈõªÊ∞óÊ©üÂô®">Ê∞ëÁîüÁî®ÈõªÊ∞óÊ©üÂô®</option>
                      <option value="Ëà™Á©∫„ÉªÂÆáÂÆô">Ëà™Á©∫„ÉªÂÆáÂÆô</option>
                      <option value="CAD/CAM">CAD/CAM</option>
                      <option value="Âª∫Êùê„ÉªË≥áÊùê„Éª‰ªÄÂô®">Âª∫Êùê„ÉªË≥áÊùê„Éª‰ªÄÂô®</option>
                      <option value="Â∞èÂ£≤">Â∞èÂ£≤</option>
                      <option value="È£≤È£üÊñôÂìÅ">È£≤È£üÊñôÂìÅ</option>
                      <option value="È£≤È£üÂ∫ó„ÉªÂÆøÊ≥äÊ•≠">È£≤È£üÂ∫ó„ÉªÂÆøÊ≥äÊ•≠</option>
                      <option value="ÂÖ¨Áõä„ÉªÁâπÊÆä„ÉªÁã¨Á´ãË°åÊîøÊ≥ï‰∫∫">ÂÖ¨Áõä„ÉªÁâπÊÆä„ÉªÁã¨Á´ãË°åÊîøÊ≥ï‰∫∫</option>
                      <option value="Ê∞¥Áî£„ÉªËæ≤ÊûóÊ•≠">Ê∞¥Áî£„ÉªËæ≤ÊûóÊ•≠</option>
                      <option value="ÁπäÁ∂≠">ÁπäÁ∂≠</option>
                      <option value="„Ç¨„É©„Çπ„ÉªÂúüÁü≥Ë£ΩÂìÅ">„Ç¨„É©„Çπ„ÉªÂúüÁü≥Ë£ΩÂìÅ</option>
                      <option value="ÈÄ†Ëàπ„ÉªÈáçÊ©ü">ÈÄ†Ëàπ„ÉªÈáçÊ©ü</option>
                      <option value="Áí∞Â¢É">Áí∞Â¢É</option>
                      <option value="Âç∞Âà∑Ê•≠">Âç∞Âà∑Ê•≠</option>
                      <option value="ÈÅãËº∏Ê•≠">ÈÅãËº∏Ê•≠</option>
                      <option value="ÈáëËûç„ÉªË®ºÂà∏„Éª‰øùÈô∫Ê•≠">ÈáëËûç„ÉªË®ºÂà∏„Éª‰øùÈô∫Ê•≠</option>
                      <option value="Ë≠¶ÂØü„ÉªÊ∂àÈò≤„ÉªËá™Ë°õÈöä">Ë≠¶ÂØü„ÉªÊ∂àÈò≤„ÉªËá™Ë°õÈöä</option>
                      <option value="Èâ±Ê•≠">Èâ±Ê•≠</option>
                      <option value="Á¥ô„Éª„Éê„É´„Éñ">Á¥ô„Éª„Éê„É´„Éñ</option>
                      <option value="Êú®Êùê">Êú®Êùê</option>
                      <option value="„É≠„Éú„ÉÉ„Éà">„É≠„Éú„ÉÉ„Éà</option>
                      <option value="Ë©¶È®ì„ÉªÂàÜÊûê„ÉªÊ∏¨ÂÆö">Ë©¶È®ì„ÉªÂàÜÊûê„ÉªÊ∏¨ÂÆö</option>
                      <option value="„Ç®„Éç„É´„ÇÆ„Éº">„Ç®„Éç„É´„ÇÆ„Éº</option>
                      <option value="ÈõªÊ∞ó„Éª„Ç¨„Çπ„ÉªÊ∞¥ÈÅìÊ•≠">ÈõªÊ∞ó„Éª„Ç¨„Çπ„ÉªÊ∞¥ÈÅìÊ•≠</option>
                      <option value="ÂåªÁôÇ„ÉªÁ¶èÁ•â">ÂåªÁôÇ„ÉªÁ¶èÁ•â</option>
                      <option value="„Çµ„Éº„Éì„ÇπÊ•≠">„Çµ„Éº„Éì„ÇπÊ•≠</option>
                      <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                      <option value="ÂåñÂ≠¶">ÂåñÂ≠¶</option>
                      <option value="„Çª„É©„Éü„ÉÉ„ÇØ„Çπ">„Çª„É©„Éü„ÉÉ„ÇØ„Çπ</option>
                      <option value="È£üÂìÅÊ©üÊ¢∞">È£üÂìÅÊ©üÊ¢∞</option>
                      <option value="ÂÖâÂ≠¶Ê©üÂô®">ÂÖâÂ≠¶Ê©üÂô®</option>
                      <option value="ÂåªÁôÇÊ©üÂô®">ÂåªÁôÇÊ©üÂô®</option>
                      <option value="„Åù„ÅÆ‰ªñË£ΩÈÄ†">„Åù„ÅÆ‰ªñË£ΩÈÄ†</option>
                      <option value="ÂÄâÂ∫´„ÉªÈÅãËº∏Èñ¢ÈÄ£Ê•≠">ÂÄâÂ∫´„ÉªÈÅãËº∏Èñ¢ÈÄ£Ê•≠</option>
                      <option value="ÊïôËÇ≤„ÉªÁ†îÁ©∂Ê©üÈñ¢">ÊïôËÇ≤„ÉªÁ†îÁ©∂Ê©üÈñ¢</option>
                      <option value="Áü≥Ê≤π„ÉªÁü≥ÁÇ≠Ë£ΩÂìÅ">Áü≥Ê≤π„ÉªÁü≥ÁÇ≠Ë£ΩÂìÅ</option>
                      <option value="ÂïÜÁ§æ„ÉªÂç∏Â£≤">ÂïÜÁ§æ„ÉªÂç∏Â£≤</option>
                      <option value="ÂÆòÂÖ¨Â∫Å">ÂÆòÂÖ¨Â∫Å</option>
                      <option value="ÂÄã‰∫∫">ÂÄã‰∫∫</option>
                      <option value="‰∏çÊòé">‰∏çÊòé</option>
                    </select>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>
            {/* Ë£ΩÂìÅÂàÜÈ°ûÔºàÂ§ßÂàÜÈ°ûÔºâ */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title} !mr-[15px]`}>Ë£ΩÂìÅÂàÜÈ°ûÔºàÂ§ßÂàÜÈ°ûÔºâ</span>
                  {!searchMode && (
                    <span
                      className={`${styles.value}`}
                      data-text={`${
                        selectedRowDataActivity?.product_category_large
                          ? selectedRowDataActivity?.product_category_large
                          : ""
                      }`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataActivity?.product_category_large
                        ? selectedRowDataActivity?.product_category_large
                        : ""}
                    </span>
                  )}
                  {searchMode && !inputIndustryType && (
                    // <input
                    //   type="text"
                    //   className={`${styles.input_box} ml-[20px]`}
                    //   value={inputProductL}
                    //   onChange={(e) => setInputProductL(e.target.value)}
                    // />
                    <select
                      name="position_class"
                      id="position_class"
                      className={`ml-auto h-full w-[80%] cursor-pointer rounded-[4px] ${styles.select_box}`}
                      value={inputProductL}
                      onChange={(e) => setInputProductL(e.target.value)}
                    >
                      <option value=""></option>
                      <option value="ÈõªÂ≠êÈÉ®ÂìÅ„Éª„É¢„Ç∏„É•„Éº„É´">ÈõªÂ≠êÈÉ®ÂìÅ„Éª„É¢„Ç∏„É•„Éº„É´</option>
                      <option value="Ê©üÊ¢∞ÈÉ®ÂìÅ">Ê©üÊ¢∞ÈÉ®ÂìÅ</option>
                      <option value="Ë£ΩÈÄ†„ÉªÂä†Â∑•Ê©üÊ¢∞">Ë£ΩÈÄ†„ÉªÂä†Â∑•Ê©üÊ¢∞</option>
                      <option value="ÁßëÂ≠¶„ÉªÁêÜÂåñÂ≠¶Ê©üÂô®">ÁßëÂ≠¶„ÉªÁêÜÂåñÂ≠¶Ê©üÂô®</option>
                      <option value="Á¥†Êùê„ÉªÊùêÊñô">Á¥†Êùê„ÉªÊùêÊñô</option>
                      <option value="Ê∏¨ÂÆö„ÉªÂàÜÊûê">Ê∏¨ÂÆö„ÉªÂàÜÊûê</option>
                      <option value="ÁîªÂÉèÂá¶ÁêÜ">ÁîªÂÉèÂá¶ÁêÜ</option>
                      <option value="Âà∂Âæ°„ÉªÈõªÊ©üÊ©üÂô®">Âà∂Âæ°„ÉªÈõªÊ©üÊ©üÂô®</option>
                      <option value="Â∑•ÂÖ∑„ÉªÊ∂àËÄóÂìÅ„ÉªÂÇôÂìÅ">Â∑•ÂÖ∑„ÉªÊ∂àËÄóÂìÅ„ÉªÂÇôÂìÅ</option>
                      <option value="Ë®≠Ë®à„ÉªÁîüÁî£ÊîØÊè¥">Ë®≠Ë®à„ÉªÁîüÁî£ÊîØÊè¥</option>
                      <option value="IT„Éª„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ">IT„Éª„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ</option>
                      <option value="„Ç™„Éï„Ç£„Çπ">„Ç™„Éï„Ç£„Çπ</option>
                      <option value="Ê•≠ÂãôÊîØÊè¥„Çµ„Éº„Éì„Çπ">Ê•≠ÂãôÊîØÊè¥„Çµ„Éº„Éì„Çπ</option>
                      <option value="„Çª„Éü„Éä„Éº„Éª„Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó">„Çª„Éü„Éä„Éº„Éª„Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó</option>
                      <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                    </select>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>
            {/* Ë£ΩÂìÅÂàÜÈ°ûÔºà‰∏≠ÂàÜÈ°ûÔºâ */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title} !mr-[15px]`}>Ë£ΩÂìÅÂàÜÈ°ûÔºà‰∏≠ÂàÜÈ°ûÔºâ</span>
                  {!searchMode && (
                    <span
                      className={`${styles.value}`}
                      data-text={`${
                        selectedRowDataActivity?.product_category_medium
                          ? selectedRowDataActivity?.product_category_medium
                          : ""
                      }`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataActivity?.product_category_medium
                        ? selectedRowDataActivity?.product_category_medium
                        : ""}
                    </span>
                  )}
                  {searchMode && !!inputProductL && (
                    // <input
                    //   type="text"
                    //   className={`${styles.input_box} ml-[20px]`}
                    //   value={inputProductM}
                    //   onChange={(e) => setInputProductM(e.target.value)}
                    // />
                    <select
                      name="position_class"
                      id="position_class"
                      value={inputProductM}
                      onChange={(e) => setInputProductM(e.target.value)}
                      className={`${
                        inputProductL ? "" : "hidden"
                      } ml-auto h-full w-[80%] cursor-pointer rounded-[4px] ${styles.select_box}`}
                    >
                      {inputProductL === "ÈõªÂ≠êÈÉ®ÂìÅ„Éª„É¢„Ç∏„É•„Éº„É´" &&
                        productCategoriesM.moduleCategoryM.map((option) => option)}
                      {inputProductL === "Ê©üÊ¢∞ÈÉ®ÂìÅ" && productCategoriesM.machinePartsCategoryM.map((option) => option)}
                      {inputProductL === "Ë£ΩÈÄ†„ÉªÂä†Â∑•Ê©üÊ¢∞" &&
                        productCategoriesM.processingMachineryCategoryM.map((option) => option)}
                      {inputProductL === "ÁßëÂ≠¶„ÉªÁêÜÂåñÂ≠¶Ê©üÂô®" &&
                        productCategoriesM.scienceCategoryM.map((option) => option)}
                      {inputProductL === "Á¥†Êùê„ÉªÊùêÊñô" && productCategoriesM.materialCategoryM.map((option) => option)}
                      {inputProductL === "Ê∏¨ÂÆö„ÉªÂàÜÊûê" && productCategoriesM.analysisCategoryM.map((option) => option)}
                      {inputProductL === "ÁîªÂÉèÂá¶ÁêÜ" &&
                        productCategoriesM.imageProcessingCategoryM.map((option) => option)}
                      {inputProductL === "Âà∂Âæ°„ÉªÈõªÊ©üÊ©üÂô®" &&
                        productCategoriesM.controlEquipmentCategoryM.map((option) => option)}
                      {inputProductL === "Â∑•ÂÖ∑„ÉªÊ∂àËÄóÂìÅ„ÉªÂÇôÂìÅ" &&
                        productCategoriesM.toolCategoryM.map((option) => option)}
                      {inputProductL === "Ë®≠Ë®à„ÉªÁîüÁî£ÊîØÊè¥" && productCategoriesM.designCategoryM.map((option) => option)}
                      {inputProductL === "IT„Éª„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ" && productCategoriesM.ITCategoryM.map((option) => option)}
                      {inputProductL === "„Ç™„Éï„Ç£„Çπ" && productCategoriesM.OfficeCategoryM.map((option) => option)}
                      {inputProductL === "Ê•≠ÂãôÊîØÊè¥„Çµ„Éº„Éì„Çπ" &&
                        productCategoriesM.businessSupportCategoryM.map((option) => option)}
                      {inputProductL === "„Çª„Éü„Éä„Éº„Éª„Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó" &&
                        productCategoriesM.skillUpCategoryM.map((option) => option)}
                      {inputProductL === "„Åù„ÅÆ‰ªñ" && productCategoriesM.othersCategoryM.map((option) => option)}
                    </select>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>
            {/* Ë£ΩÂìÅÂàÜÈ°ûÔºàÂ∞èÂàÜÈ°ûÔºâ */}
            {/* <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>Ë£ΩÂìÅÂàÜÈ°ûÔºàÂ∞èÂàÜÈ°ûÔºâ</span>
                  {!searchMode && (
                    <span
                      className={`${styles.value}`}
                      data-text={`${
                        selectedRowDataActivity?.product_category_small
                          ? selectedRowDataActivity?.product_category_small
                          : ""
                      }`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataActivity?.product_category_small
                        ? selectedRowDataActivity?.product_category_small
                        : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box} ml-[20px]`}
                      value={inputProductS}
                      onChange={(e) => setInputProductS(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div> */}

            {/* Ê≥ï‰∫∫Áï™Âè∑„ÉªID */}
            <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óãÊ≥ï‰∫∫Áï™Âè∑</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataActivity?.corporate_number ? selectedRowDataActivity?.corporate_number : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputCorporateNum}
                      onChange={(e) => setInputCorporateNum(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title_min}`}>‰ºöÁ§æID</span>
                  {!searchMode && (
                    <span className={`${styles.value} truncate`}>
                      {selectedRowDataActivity?.company_id ? selectedRowDataActivity?.company_id : ""}
                    </span>
                  )}
                  {/* {searchMode && <input type="text" className={`${styles.input_box}`} />} */}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* „Çµ„Éº„ÉÅ„É¢„Éº„ÉâÊôÇ„ÅØÂ∑¶ÂÅ¥„ÅÆ‰∏ã„Å´Ë°®Á§∫ */}
            {searchMode && (
              <>
                {/* Ê¥ªÂãïÊó•„Éª„ÇØ„É¨„Éº„É† „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>Ê¥ªÂãïÊó•</span>
                      {/* {searchMode && <input type="text" className={`${styles.input_box}`} />} */}
                      <DatePickerCustomInput
                        startDate={inputActivityDate}
                        setStartDate={setInputActivityDate}
                        required={false}
                      />
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>„ÇØ„É¨„Éº„É†</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.claim_flag ? selectedRowDataActivity?.claim_flag : ""}
                        </span>
                      )}
                      {/* <div className={`${styles.grid_select_cell_header}`}>
                        <input
                          type="checkbox"
                          className={`${styles.grid_select_cell_header_input}`}
                          checked={inputClaimFlag ? inputClaimFlag : false}
                          onChange={() => setInputClaimFlag(!inputClaimFlag)}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div> */}
                      <select
                        name="claim_flag"
                        id="claim_flag"
                        className={`ml-auto h-full w-full cursor-pointer rounded-[4px] ${styles.select_box}`}
                        // value={inputClaimFlag}
                        // onChange={(e) => setInputClaimFlag(e.target.value)}
                        value={inputClaimFlag === null ? "ÊåáÂÆö„Å™„Åó" : inputClaimFlag ? "„ÉÅ„Çß„ÉÉ„ÇØÊúâ„Çä" : "„ÉÅ„Çß„ÉÉ„ÇØÁÑ°„Åó"}
                        onChange={handleClaimChangeSelectTagValue}
                      >
                        <option value="ÊåáÂÆö„Å™„Åó">ÊåáÂÆö„Å™„Åó</option>
                        <option value="„ÉÅ„Çß„ÉÉ„ÇØÁÑ°„Åó">„ÉÅ„Çß„ÉÉ„ÇØÁÑ°„Åó</option>
                        <option value="„ÉÅ„Çß„ÉÉ„ÇØÊúâ„Çä">„ÉÅ„Çß„ÉÉ„ÇØÊúâ„Çä</option>
                      </select>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* Ê¥ªÂãï„Çø„Ç§„Éó„ÉªÂÑ™ÂÖàÂ∫¶ „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>Ê¥ªÂãï„Çø„Ç§„Éó</span>
                      {searchMode && (
                        <select
                          name="activity_type"
                          id="activity_type"
                          className={`ml-auto h-full w-[80%] cursor-pointer rounded-[4px] ${styles.select_box}`}
                          value={inputActivityType}
                          onChange={(e) => {
                            setInputActivityType(e.target.value);
                          }}
                        >
                          <option value=""></option>
                          <option value="TELÁô∫‰ø°(‰∏çÂú®)">TELÁô∫‰ø°(‰∏çÂú®)</option>
                          <option value="TELÁô∫‰ø°(ËÉΩÂãï)">TELÁô∫‰ø°(ËÉΩÂãï)</option>
                          <option value="TELÁô∫‰ø°(ÂèóÂãï)">TELÁô∫‰ø°(ÂèóÂãï)</option>
                          <option value="TELÁô∫‰ø°(Â£≤ÂâçÔæåÔΩ´ÔæõÔΩ∞)">TELÁô∫‰ø°(Â£≤ÂâçÔæåÔΩ´ÔæõÔΩ∞)</option>
                          <option value="TELÁô∫‰ø°(Â£≤ÂæåÔæåÔΩ´ÔæõÔΩ∞)">TELÁô∫‰ø°(Â£≤ÂæåÔæåÔΩ´ÔæõÔΩ∞)</option>
                          <option value="TELÁô∫‰ø°(ÔΩ±ÔæéÔæüÁµÑ„Åø)">TELÁô∫‰ø°(ÔΩ±ÔæéÔæüÁµÑ„Åø)</option>
                          <option value="TELÁô∫‰ø°(„Åù„ÅÆ‰ªñ)">TELÁô∫‰ø°(„Åù„ÅÆ‰ªñ)</option>
                          <option value="EmailÂèó‰ø°">EmailÂèó‰ø°</option>
                          <option value="EmailÈÄÅ‰ø°">EmailÈÄÅ‰ø°</option>
                          <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                          <option value="ÂºïÁ∂ô„Åé">ÂºïÁ∂ô„Åé</option>
                        </select>
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>ÂÑ™ÂÖàÂ∫¶</span>
                      {searchMode && (
                        <select
                          name="priority"
                          id="priority"
                          className={`ml-auto h-full w-full cursor-pointer rounded-[4px] ${styles.select_box}`}
                          value={inputPriority}
                          onChange={(e) => setInputPriority(e.target.value)}
                        >
                          <option value=""></option>
                          <option value="È´ò">È´ò</option>
                          <option value="‰∏≠">‰∏≠</option>
                          <option value="‰Ωé">‰Ωé</option>
                        </select>
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* Ê¨°ÂõûÔæåÔΩ´ÔæõÔΩ∞‰∫àÂÆöÊó•„Éª„Éï„Ç©„É≠„ÉºÂÆå‰∫Ü „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <div className={`${styles.title} flex flex-col`}>
                        <span>Ê¨°ÂõûÔæåÔΩ´ÔæõÔΩ∞</span>
                        <span>‰∫àÂÆöÊó•</span>
                      </div>
                      {/* <span className={`${styles.title} !mr-[15px]`}>Ê¨°ÂõûÔæåÔΩ´ÔæõÔΩ∞‰∫àÂÆöÊó•</span> */}
                      <DatePickerCustomInput
                        startDate={inputScheduledFollowUpDate}
                        setStartDate={setInputScheduledFollowUpDate}
                        required={false}
                      />
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>

                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>„Éï„Ç©„É≠„ÉºÂÆå‰∫Ü</span>

                      {/* <div className={`${styles.grid_select_cell_header} `}>
                          <input
                            type="checkbox"
                            checked={!!selectedRowDataActivity?.follow_up_flag}
                            onChange={() => {
                              setLoadingGlobalState(false);
                              setIsOpenUpdateActivityModal(true);
                            }}
                            className={`${styles.grid_select_cell_header_input}`}
                          />
                          <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                          </svg>
                        </div> */}
                      <select
                        name="follow_up_flag"
                        id="follow_up_flag"
                        className={`ml-auto h-full w-full cursor-pointer rounded-[4px] ${styles.select_box}`}
                        // value={inputClaimFlag}
                        // onChange={(e) => setInputClaimFlag(e.target.value)}
                        value={
                          inputFollowUpFlag === null ? "ÊåáÂÆö„Å™„Åó" : inputFollowUpFlag ? "„ÉÅ„Çß„ÉÉ„ÇØÊúâ„Çä" : "„ÉÅ„Çß„ÉÉ„ÇØÁÑ°„Åó"
                        }
                        onChange={handleFollowUpFlagChangeSelectTagValue}
                      >
                        <option value="ÊåáÂÆö„Å™„Åó">ÊåáÂÆö„Å™„Åó</option>
                        <option value="„ÉÅ„Çß„ÉÉ„ÇØÁÑ°„Åó">„ÉÅ„Çß„ÉÉ„ÇØÁÑ°„Åó</option>
                        <option value="„ÉÅ„Çß„ÉÉ„ÇØÊúâ„Çä">„ÉÅ„Çß„ÉÉ„ÇØÊúâ„Çä</option>
                      </select>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* Ê¶ÇË¶Å „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[90px] w-full items-center`}>
                  <div className="flex h-full w-full flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full `}>
                      <span className={`${styles.title}`}>Ê¶ÇË¶Å</span>
                      {searchMode && (
                        <textarea
                          name="activity_summary"
                          id="activity_summary"
                          cols={30}
                          rows={10}
                          className={`${styles.textarea_box} `}
                          value={inputSummary}
                          onChange={(e) => setInputSummary(e.target.value)}
                        ></textarea>
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ‰∫ãÊ•≠ÈÉ®Âêç „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>‰∫ãÊ•≠ÈÉ®Âêç</span>
                      {searchMode && (
                        <input
                          type="text"
                          className={`${styles.input_box}`}
                          placeholder=""
                          value={inputDepartment}
                          onChange={(e) => setInputDepartment(e.target.value)}
                        />
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>Ê¥ªÂãïÂπ¥ÊúàÂ∫¶</span>
                      {searchMode && (
                        <input
                          type="number"
                          min="0"
                          className={`${styles.input_box}`}
                          placeholder='"202312" „Å™„Å©Âπ¥Êúà„ÇíÂÖ•Âäõ'
                          value={inputActivityYearMonth === null ? "" : inputActivityYearMonth}
                          onChange={(e) => {
                            const val = e.target.value;
                            if (val === "") {
                              setInputActivityYearMonth(null);
                            } else {
                              const numValue = Number(val);

                              // ÂÖ•ÂäõÂÄ§„Åå„Éû„Ç§„Éä„Çπ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                              if (numValue < 0) {
                                setInputActivityYearMonth(0); // „Åì„Åì„Åß0„Å´Ë®≠ÂÆö„Åó„Å¶„ÅÑ„Çã„Åå„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶‰ªñ„ÅÆÊ≠£„ÅÆÂÄ§„Å´Â§âÊõ¥„Åô„Çã„Åì„Å®„ÇÇ„Åß„Åç„Çã
                              } else {
                                setInputActivityYearMonth(numValue);
                              }
                            }
                          }}
                        />
                      )}
                      {/* „Éê„ÉÑ„Éú„Çø„É≥ */}
                      {inputActivityYearMonth && (
                        <div className={`${styles.close_btn_number}`} onClick={() => setInputActivityYearMonth(null)}>
                          <MdClose className="text-[20px] " />
                        </div>
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ‰∫ãÊ•≠ÊâÄ„ÉªËá™Á§æÊãÖÂΩì „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>‰∫ãÊ•≠ÊâÄ</span>
                      {searchMode && (
                        <input
                          type="text"
                          className={`${styles.input_box}`}
                          placeholder=""
                          value={inputBusinessOffice}
                          onChange={(e) => setInputBusinessOffice(e.target.value)}
                        />
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>Ëá™Á§æÊãÖÂΩì</span>
                      {searchMode && (
                        <input
                          type="text"
                          className={`${styles.input_box}`}
                          placeholder=""
                          value={inputMemberName}
                          onChange={(e) => setInputMemberName(e.target.value)}
                        />
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÂÆüÊñΩ1„ÉªÂÆüÊñΩ2 „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ1</span>
                      {searchMode && (
                        <input
                          type="text"
                          className={`${styles.input_box}`}
                          placeholder=""
                          value={inputProductIntroduction1}
                          onChange={(e) => setInputProductIntroduction1(e.target.value)}
                        />
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ2</span>
                      {searchMode && (
                        <input
                          type="text"
                          className={`${styles.input_box}`}
                          placeholder=""
                          value={inputProductIntroduction2}
                          onChange={(e) => setInputProductIntroduction2(e.target.value)}
                        />
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÂÆüÊñΩ3„ÉªÂÆüÊñΩ4 „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ3</span>
                      {searchMode && (
                        <input
                          type="text"
                          className={`${styles.input_box}`}
                          placeholder=""
                          value={inputProductIntroduction3}
                          onChange={(e) => setInputProductIntroduction3(e.target.value)}
                        />
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ4</span>
                      {searchMode && (
                        <input
                          type="text"
                          className={`${styles.input_box}`}
                          placeholder=""
                          value={inputProductIntroduction4}
                          onChange={(e) => setInputProductIntroduction4(e.target.value)}
                        />
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÂÆüÊñΩ5 „Çµ„Éº„ÉÅ„É¢„Éº„Éâ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ5</span>
                      {searchMode && (
                        <input
                          type="text"
                          className={`${styles.input_box}`}
                          placeholder=""
                          value={inputProductIntroduction5}
                          onChange={(e) => setInputProductIntroduction5(e.target.value)}
                        />
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      {/* <span className={`${styles.title}`}>ÂÆüÊñΩ4</span>
                      {!searchMode && (
                        <span
                          data-text={`${
                            selectedRowDataActivity?.senior_managing_director
                              ? selectedRowDataActivity?.senior_managing_director
                              : ""
                          }`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.senior_managing_director
                            ? selectedRowDataActivity?.senior_managing_director
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />} */}
                    </div>
                    {/* <div className={`${styles.underline}`}></div> */}
                  </div>
                </div>
              </>
            )}

            {/* --------- „É©„ÉÉ„Éë„Éº„Åì„Åì„Åæ„Åß --------- */}
          </div>
        </div>
        {/* ---------------- Âè≥„Ç≥„É≥„ÉÜ„Éä „Çµ„Éº„ÉÅ„É¢„Éº„Éâ„Åß„ÅØ„Å™„ÅÑÈÄöÂ∏∏„É¢„Éº„Éâ Ê¥ªÂãï„ÉÜ„Éº„Éñ„É´ ---------------- */}
        {!searchMode && (
          <div className={`${styles.right_container} h-full grow bg-[aqua]/[0] pb-[35px] pt-[20px]`}>
            <div className={`${styles.right_contents_wrapper} flex h-full w-full flex-col bg-[#000]/[0]`}>
              {/* Ê¥ªÂãïÂ±•Ê≠¥ */}
              {/* <ErrorBoundary FallbackComponent={ErrorFallback}>
                <Suspense
                  fallback={<Fallback className="min-h-[calc(100vh-100vh/3-var(--header-height)/3--20px-22px-40px)]" />}
                >
                  <ContactUnderRightActivityLog />
                </Suspense>
              </ErrorBoundary> */}
              {/* ‰∏ã„Ç®„É™„Ç¢ Á¶ÅÊ≠¢„Éï„É©„Ç∞„Å™„Å© */}
              <div
                className={`${styles.right_under_container} h-screen w-full  bg-[#f0f0f0]/[0] ${
                  isOpenSidebar ? `transition-base02` : `transition-base01`
                }`}
              >
                {/* Ê¥ªÂãïÊó•„Éª„ÇØ„É¨„Éº„É† */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>Ê¥ªÂãïÊó•</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.activity_date
                            ? format(new Date(selectedRowDataActivity.activity_date), "yyyy-MM-dd")
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>„ÇØ„É¨„Éº„É†</span>
                      {!searchMode && (
                        <div className={`${styles.grid_select_cell_header} `}>
                          <input
                            type="checkbox"
                            // checked={!!checkedColumnHeader} // ÂàùÊúüÂÄ§
                            checked={!!selectedRowDataActivity?.claim_flag}
                            onChange={() => {
                              setLoadingGlobalState(false);
                              setIsOpenUpdateActivityModal(true);
                            }}
                            className={`${styles.grid_select_cell_header_input}`}
                          />
                          <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                          </svg>
                        </div>
                      )}
                      {/* {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.claim_flag ? selectedRowDataActivity?.claim_flag : ""}
                        </span>
                      )} */}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* Ê¥ªÂãï„Çø„Ç§„Éó„ÉªÂÑ™ÂÖàÂ∫¶ */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>Ê¥ªÂãï„Çø„Ç§„Éó</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.activity_type ? selectedRowDataActivity?.activity_type : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>ÂÑ™ÂÖàÂ∫¶</span>
                      {!searchMode && (
                        <span
                          // data-text={`${
                          //   selectedRowDataActivity?.priority
                          //     ? selectedRowDataActivity?.priority
                          //     : ""
                          // }`}
                          className={`${styles.value} !w-full text-center`}
                          // onMouseEnter={(e) => handleOpenTooltip(e)}
                          // onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.priority ? selectedRowDataActivity?.priority : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* Ê¨°ÂõûÔæåÔΩ´ÔæõÔΩ∞‰∫àÂÆöÊó•„Éª„Éï„Ç©„É≠„ÉºÂÆå‰∫Ü */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <div className={`${styles.title} flex flex-col`}>
                        <span>Ê¨°ÂõûÔæåÔΩ´ÔæõÔΩ∞</span>
                        <span>‰∫àÂÆöÊó•</span>
                      </div>
                      {/* <span className={`${styles.title} !mr-[15px]`}>Ê¨°ÂõûÔæåÔΩ´ÔæõÔΩ∞‰∫àÂÆöÊó•</span> */}
                      {!searchMode && (
                        <span
                          // data-text={`${
                          //   selectedRowDataActivity?.managing_director ? selectedRowDataActivity?.managing_director : ""
                          // }`}
                          className={`${styles.value}`}
                          // onMouseEnter={(e) => handleOpenTooltip(e)}
                          // onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.scheduled_follow_up_date
                            ? format(new Date(selectedRowDataActivity.scheduled_follow_up_date), "yyyy-MM-dd")
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  {selectedRowDataActivity?.scheduled_follow_up_date && (
                    <div className="flex h-full w-1/2 flex-col pr-[20px]">
                      <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                        <span className={`${styles.check_title}`}>„Éï„Ç©„É≠„ÉºÂÆå‰∫Ü</span>

                        <div className={`${styles.grid_select_cell_header} `}>
                          <input
                            type="checkbox"
                            checked={!!selectedRowDataActivity?.follow_up_flag}
                            onChange={() => {
                              setLoadingGlobalState(false);
                              setIsOpenUpdateActivityModal(true);
                            }}
                            className={`${styles.grid_select_cell_header_input}`}
                          />
                          <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                          </svg>
                        </div>
                      </div>
                      <div className={`${styles.underline}`}></div>
                    </div>
                  )}
                </div>

                {/* Ê¶ÇË¶Å */}
                {/* <div className={`${styles.row_area} flex h-[90px] w-full items-center`}> */}
                <div className={`${styles.row_area} flex max-h-max min-h-[75px] w-full items-center`}>
                  <div className="flex h-full w-full flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full `}>
                      <span className={`${styles.title}`}>Ê¶ÇË¶Å</span>
                      {!searchMode && (
                        <div
                          className={`${styles.value} max-h-max min-h-[70px] ${styles.textarea_box} ${styles.textarea_box_bg}`}
                          // className={`${styles.value} h-[85px] ${styles.textarea_box} ${styles.textarea_box_bg}`}
                          // onMouseEnter={(e) => handleOpenTooltip(e)}
                          // onMouseLeave={handleCloseTooltip}
                          dangerouslySetInnerHTML={{
                            __html: selectedRowDataActivity?.summary
                              ? selectedRowDataActivity?.summary.replace(/\n/g, "<br>")
                              : "",
                          }}
                        ></div>
                      )}
                      {/* {searchMode && (
                        <textarea
                          name="activity_summary"
                          id="activity_summary"
                          cols={30}
                          rows={10}
                          className={`${styles.textarea_box} `}
                          value={inputSummary}
                          onChange={(e) => setInputSummary(e.target.value)}
                        ></textarea>
                      )} */}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ‰∫ãÊ•≠ÈÉ®Âêç */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>‰∫ãÊ•≠ÈÉ®Âêç</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.department ? selectedRowDataActivity?.department : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>Ê¥ªÂãïÂπ¥ÊúàÂ∫¶</span>
                      {!searchMode && (
                        <span
                          // data-text={`${
                          //   selectedRowDataActivity?.senior_managing_director
                          //     ? selectedRowDataActivity?.senior_managing_director
                          //     : ""
                          // }`}
                          className={`${styles.value}`}
                          // onMouseEnter={(e) => handleOpenTooltip(e)}
                          // onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.activity_year_month
                            ? selectedRowDataActivity?.activity_year_month
                            : ""}
                        </span>
                      )}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ‰∫ãÊ•≠ÊâÄ„ÉªËá™Á§æÊãÖÂΩì */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>‰∫ãÊ•≠ÊâÄ</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.business_office ? selectedRowDataActivity?.business_office : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>Ëá™Á§æÊãÖÂΩì</span>
                      {!searchMode && (
                        <span
                          // data-text={`${
                          //   selectedRowDataActivity?.member_name
                          //     ? selectedRowDataActivity?.member_name
                          //     : ""
                          // }`}
                          className={`${styles.value}`}
                          // onMouseEnter={(e) => handleOpenTooltip(e)}
                          // onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.member_name ? selectedRowDataActivity?.member_name : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÂÆüÊñΩ1„ÉªÂÆüÊñΩ2 */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ1</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.product_introduction1
                            ? selectedRowDataActivity?.product_introduction1
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ2</span>
                      {!searchMode && (
                        <span
                          // data-text={`${
                          //   selectedRowDataActivity?.senior_managing_director
                          //     ? selectedRowDataActivity?.senior_managing_director
                          //     : ""
                          // }`}
                          className={`${styles.value}`}
                          // onMouseEnter={(e) => handleOpenTooltip(e)}
                          // onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.product_introduction2
                            ? selectedRowDataActivity?.product_introduction2
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÂÆüÊñΩ3„ÉªÂÆüÊñΩ4 */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ3</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.product_introduction3
                            ? selectedRowDataActivity?.product_introduction3
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ4</span>
                      {!searchMode && (
                        <span
                          // data-text={`${
                          //   selectedRowDataActivity?.senior_managing_director
                          //     ? selectedRowDataActivity?.senior_managing_director
                          //     : ""
                          // }`}
                          className={`${styles.value}`}
                          // onMouseEnter={(e) => handleOpenTooltip(e)}
                          // onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.product_introduction4
                            ? selectedRowDataActivity?.product_introduction4
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÂÆüÊñΩ5 */}
                <div className={`${styles.row_area} flex h-[30px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÂÆüÊñΩ5</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataActivity?.product_introduction5
                            ? selectedRowDataActivity?.product_introduction5
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      {/* <span className={`${styles.title}`}>ÂÆüÊñΩ4</span>
                      {!searchMode && (
                        <span
                          data-text={`${
                            selectedRowDataActivity?.senior_managing_director
                              ? selectedRowDataActivity?.senior_managing_director
                              : ""
                          }`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.senior_managing_director
                            ? selectedRowDataActivity?.senior_managing_director
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />} */}
                    </div>
                    {/* <div className={`${styles.underline}`}></div> */}
                  </div>
                </div>

                {/* TELË¶ÅÊ≥®ÊÑè„Éï„É©„Ç∞„ÉªTELË¶ÅÊ≥®ÊÑèÁêÜÁî± */}
                <div className={`${styles.right_row_area}  mt-[10px] flex h-[35px] w-full grow items-center`}>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>TELË¶ÅÊ≥®ÊÑè„Éï„É©„Ç∞</span>

                      <div className={`${styles.grid_select_cell_header} `}>
                        <input
                          type="checkbox"
                          // checked={!!checkedColumnHeader} // ÂàùÊúüÂÄ§
                          checked={!!selectedRowDataActivity?.call_careful_flag}
                          onChange={() => {
                            setLoadingGlobalState(false);
                            setIsOpenUpdateActivityModal(true);
                          }}
                          className={`${styles.grid_select_cell_header_input}`}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.right_under_title}`}>Ê≥®ÊÑèÁêÜÁî±</span>
                      {!searchMode && (
                        <span
                          data-text={`${
                            selectedRowDataActivity?.call_careful_reason
                              ? selectedRowDataActivity?.call_careful_reason
                              : ""
                          }`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e, "right")}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataActivity?.call_careful_reason
                            ? selectedRowDataActivity?.call_careful_reason
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* „É°„Éº„É´Á¶ÅÊ≠¢„Éï„É©„Ç∞„ÉªË≥áÊñôÁ¶ÅÊ≠¢„Éï„É©„Ç∞ */}
                <div className={`${styles.right_row_area}  mt-[10px] flex h-[35px] w-full grow items-center`}>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>„É°„Éº„É´Á¶ÅÊ≠¢„Éï„É©„Ç∞</span>

                      <div className={`${styles.grid_select_cell_header} `}>
                        <input
                          type="checkbox"
                          checked={!!selectedRowDataActivity?.email_ban_flag}
                          onChange={() => {
                            setLoadingGlobalState(false);
                            setIsOpenUpdateActivityModal(true);
                          }}
                          className={`${styles.grid_select_cell_header_input}`}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>Ë≥áÊñôÁ¶ÅÊ≠¢„Éï„É©„Ç∞</span>

                      <div className={`${styles.grid_select_cell_header} `}>
                        <input
                          type="checkbox"
                          checked={!!selectedRowDataActivity?.sending_materials_ban_flag}
                          onChange={() => {
                            setLoadingGlobalState(false);
                            setIsOpenUpdateActivityModal(true);
                          }}
                          className={`${styles.grid_select_cell_header_input}`}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* FAX„ÉªDMÁ¶ÅÊ≠¢„Éï„É©„Ç∞ */}
                <div className={`${styles.right_row_area}  mt-[10px] flex h-[35px] w-full grow items-center`}>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>FAX„ÉªDMÁ¶ÅÊ≠¢„Éï„É©„Ç∞</span>

                      <div className={`${styles.grid_select_cell_header} `}>
                        <input
                          type="checkbox"
                          checked={!!selectedRowDataActivity?.fax_dm_ban_flag}
                          onChange={() => {
                            setLoadingGlobalState(false);
                            setIsOpenUpdateActivityModal(true);
                          }}
                          className={`${styles.grid_select_cell_header_input}`}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}></div>
                  </div>
                </div>

                {/* Á¶ÅÊ≠¢ÁêÜÁî± */}
                <div className={`${styles.row_area} flex h-[70px] w-full items-center`}>
                  <div className="flex h-full w-full flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full `}>
                      <span className={`${styles.title}`}>Á¶ÅÊ≠¢ÁêÜÁî±</span>
                      {!searchMode && (
                        <div
                          data-text={`${
                            selectedRowDataActivity?.ban_reason ? selectedRowDataActivity?.ban_reason : ""
                          }`}
                          className={`${styles.value} h-[65px]`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                          dangerouslySetInnerHTML={{
                            __html: selectedRowDataActivity?.ban_reason
                              ? selectedRowDataActivity?.ban_reason.replace(/\n/g, "<br>")
                              : "",
                          }}
                        ></div>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>
                {/* „ÇØ„É¨„Éº„É† */}
                <div className={`${styles.row_area} flex h-[70px] w-full items-center`}>
                  <div className="flex h-full w-full flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full  `}>
                      <span className={`${styles.title}`}>„ÇØ„É¨„Éº„É†</span>
                      {!searchMode && (
                        <div
                          data-text={`${selectedRowDataActivity?.claim ? selectedRowDataActivity?.claim : ""}`}
                          className={`${styles.value} h-[65px]`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                          dangerouslySetInnerHTML={{
                            __html: selectedRowDataActivity?.claim
                              ? selectedRowDataActivity?.claim.replace(/\n/g, "<br>")
                              : "",
                          }}
                        ></div>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/*  */}
              </div>

              {/*  */}
            </div>
          </div>
        )}
        {/* ---------------- Âè≥„Ç≥„É≥„ÉÜ„Éä inputÊôÇ„ÅØsticky„Å´„Åó„Å¶null„ÇÑis null„Å™„Å©„ÅÆ„Éú„Çø„É≥„ÇÑË™¨Êòé„ÇíÈÖçÁΩÆ ---------------- */}
        {searchMode && (
          <div
            className={`${styles.right_sticky_container} sticky top-0 h-full grow bg-[aqua]/[0] pt-[20px] text-[var(--color-text)] `}
          >
            <div
              className={`${styles.right_sticky_contents_wrapper} flex h-[350px] w-full flex-col rounded-[8px] bg-[var(--color-bg-brand-f10)] px-[20px] `}
            >
              {/* <div className="flex h-[40px] w-full items-center justify-center text-[18px] font-semibold ">
                ‰ºöÁ§æ Êù°‰ª∂Ê§úÁ¥¢
              </div> */}
              <div className={` text-[13px]`}>
                <div className="mt-[5px] flex  min-h-[30px] items-center">‚óãÊ§úÁ¥¢„Åó„Åü„ÅÑÊù°‰ª∂„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</div>
                <div className="flex  min-h-[30px] items-center">
                  <span className="h-full w-[15px]"></span>
                  ‰æã„Åà„Å∞„ÄÅ„Äå&quot;Êù±‰∫¨ÈÉΩÂ§ßÁî∞Âå∫&quot;„Äç„ÅÆ‰ºöÁ§æ„Åß„Äå‰∫ãÊ•≠Êã†ÁÇπ„Äç„ÅåÂ≠òÂú®„Åô„Çã‰ºöÁ§æ„ÇíÊ§úÁ¥¢„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Äå‚óè‰ΩèÊâÄ„Äç„Å´„ÄåÊù±‰∫¨ÈÉΩÂ§ßÁî∞Âå∫‚Äª„Äç„Å®ÂÖ•Âäõ„Åó„ÄÅ„Äå‰∫ãÊ•≠Êã†ÁÇπ„Äç„Å´„Äåis
                  not null„Äç„Å®ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                </div>
                <div className="mt-[5px] flex  min-h-[30px] items-center">
                  ‚óã„Äå‚Äª „Ç¢„Çπ„Çø„É™„Çπ„ÇØ„Äç„ÅØ„ÄÅ„ÄåÂâçÊñπ‰∏ÄËá¥„ÉªÂæåÊñπ‰∏ÄËá¥„ÉªÈÉ®ÂàÜ‰∏ÄËá¥„Äç„ÇíË°®„Åó„Åæ„Åô
                </div>
                <div className="flex items-center">
                  <span className="h-full w-[15px]"></span>
                  ‰æã„Åà„Å∞„ÄÅ‰ºöÁ§æÂêç„Å´„Äå&quot;Â∑•Ê•≠&quot;„Äç„Å®‰ªò„Åè‰ºöÁ§æ„ÇíÊ§úÁ¥¢„Åó„Åü„ÅÑÂ†¥Âêà„Å´„ÄÅ„Äå‚ÄªÂ∑•Ê•≠‚Äª„Äç„ÄÅ„Äå&quot;Ë£Ω‰ΩúÊâÄ&quot;„Äç„Å®‰ªò„Åè‰ºöÁ§æ„ÅØ„Äå‚ÄªË£Ω‰ΩúÊâÄ‚Äª„Äç„Å®Ê§úÁ¥¢„Åô„Çã„Åì„Å®„Åß„ÄÅÊåáÂÆö„Åó„ÅüÊñáÂ≠ó„Åå‰ªò„Åè„Éá„Éº„Çø„ÇíÊ§úÁ¥¢ÂèØËÉΩ„Åß„Åô
                </div>
                <div className="mt-[5px] flex  min-h-[30px] items-center">
                  ‚óã„Äåis not null„Äç„ÅØ„Äå&quot;Á©∫Ê¨Ñ„Åß„Å™„ÅÑ&quot;„Éá„Éº„Çø„Äç„ÇíÊäΩÂá∫„Åó„Åæ„Åô
                </div>
                <div className="mt-[5px] flex  min-h-[30px] items-center">
                  ‚óã„Äåis null„Äç„ÅØ„Äå&quot;Á©∫Ê¨Ñ„ÅÆ&quot;„Éá„Éº„Çø„Äç„ÇíÊäΩÂá∫„Åó„Åæ„Åô
                </div>
                <div className="mt-[5px] flex  min-h-[30px] items-center">
                  ‚óãÈ†ÖÁõÆ„ÇíÁ©∫Ê¨Ñ„ÅÆ„Åæ„ÅæÊ§úÁ¥¢„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅ„Åù„ÅÆÈ†ÖÁõÆ„ÅÆ„ÄåÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø„Äç„ÇíÊäΩÂá∫„Åó„Åæ„Åô
                </div>
                <div className="mt-[10px] flex h-[30px] w-full items-center">
                  <button type="submit" className={`${styles.btn}`}>
                    Ê§úÁ¥¢
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </form>
  );
};

export const ActivityMainContainer = memo(ActivityMainContainerMemo);

/* Divider„ÄÅÂå∫Âàá„ÇäÁ∑ö */
//  <div className="flex h-full w-1/2 flex-col pr-[15px]">
//    <div className="flex h-full items-center">‚óãÊ≥ï‰∫∫Áï™Âè∑</div>
//    <div className={`${styles.underline}`}></div>
//  </div>;

/**
 * 
 * <div
        className={`${styles.scroll_container} relative flex w-full overflow-y-auto pl-[10px] ${
          tableContainerSize === "half" ? `${styles.height_all}` : ``
        } ${tableContainerSize === "all" ? `${styles.height_all}` : ``}`}
      >
*/
