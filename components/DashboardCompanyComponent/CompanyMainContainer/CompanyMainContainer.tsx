import React, { FC, FormEvent, Suspense, memo, useEffect, useState } from "react";
import styles from "../CompanyDetail/CompanyDetail.module.css";
import useDashboardStore from "@/store/useDashboardStore";
import useStore from "@/store";
// import { UnderRightActivityLog } from "./UnderRightActivityLog/UnderRightActivityLog";
import { Fallback } from "@/components/Fallback/Fallback";
import { ErrorBoundary } from "react-error-boundary";
import { ErrorFallback } from "@/components/ErrorFallback/ErrorFallback";
import dynamic from "next/dynamic";
import { useSupabaseClient } from "@supabase/auth-helpers-react";

// https://nextjs-ja-translation-docs.vercel.app/docs/advanced-features/dynamic-import
// „Éá„Éï„Ç©„É´„Éà„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÅÆÂ†¥Âêà„ÅÆ„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„Ç§„É≥„Éù„Éº„Éà
// const DynamicComponent = dynamic(() => import('../components/hello'));
// ÂêçÂâç‰ªò„Åç„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÅÆÂ†¥Âêà„ÅÆ„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„Ç§„É≥„Éù„Éº„Éà
const UnderRightActivityLog = dynamic(
  () => import("./UnderRightActivityLog/UnderRightActivityLog").then((mod) => mod.UnderRightActivityLog),
  {
    ssr: false,
  }
);
/**„Ç´„Çπ„Çø„É†„É≠„Éº„Éá„Ç£„É≥„Ç∞„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà „Ç™„Éó„Ç∑„Éß„É≥„ÅÆ loading „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíËøΩÂä†„Åó„Å¶„ÄÅÂãïÁöÑ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆË™≠„ÅøËæº„Åø‰∏≠„Å´Ë™≠„ÅøËæº„ÅøÁä∂ÊÖã„Çí„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åß„Åç„Åæ„Åô
 * const DynamicComponentWithCustomLoading = dynamic(() => import('../components/hello'), {
  loading: () => <p>...</p>
});
 */
// SSR„Çí‰ΩøÁî®„Åó„Å™„ÅÑÂ†¥Âêà
// Â∏∏„Å´„Çµ„Éº„Éê„ÉºÂÅ¥„Å´„É¢„Ç∏„É•„Éº„É´„ÇíÂê´„ÇÅ„ÇãÂøÖË¶Å„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åü„Å®„Åà„Å∞„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÅÆ„Åø„ÅßÂãï‰Ωú„Åô„Çã„É©„Ç§„Éñ„É©„É™„Åå„É¢„Ç∏„É•„Éº„É´„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„Åß„Åô„ÄÇ

const CompanyMainContainerMemo: FC = () => {
  const searchMode = useDashboardStore((state) => state.searchMode);
  const setSearchMode = useDashboardStore((state) => state.setSearchMode);
  console.log("üî• CompanyMainContainer„É¨„É≥„ÉÄ„É™„É≥„Ç∞ searchMode", searchMode);
  const setHoveredItemPosWrap = useStore((state) => state.setHoveredItemPosWrap);
  const isOpenSidebar = useDashboardStore((state) => state.isOpenSidebar);
  // ‰∏äÁîªÈù¢„ÅÆÈÅ∏Êäû‰∏≠„ÅÆÂàó„Éá„Éº„Çø‰ºöÁ§æ
  const selectedRowDataCompany = useDashboardStore((state) => state.selectedRowDataCompany);

  const handleOpenTooltip = (e: React.MouseEvent<HTMLElement, MouseEvent>, display: string = "center") => {
    // „Éõ„Éê„Éº„Åó„Åü„Ç¢„Ç§„ÉÜ„É†„Å´„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÇíË°®Á§∫
    const { x, y, width, height } = e.currentTarget.getBoundingClientRect();
    // console.log("„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éóx, y width , height", x, y, width, height);
    const content2 = ((e.target as HTMLDivElement).dataset.text2 as string)
      ? ((e.target as HTMLDivElement).dataset.text2 as string)
      : "";
    const content3 = ((e.target as HTMLDivElement).dataset.text3 as string)
      ? ((e.target as HTMLDivElement).dataset.text3 as string)
      : "";
    setHoveredItemPosWrap({
      x: x,
      y: y,
      itemWidth: width,
      itemHeight: height,
      content: (e.target as HTMLDivElement).dataset.text as string,
      content2: content2,
      content3: content3,
      display: display,
    });
  };
  // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÇíÈùûË°®Á§∫
  const handleCloseTooltip = () => {
    setHoveredItemPosWrap(null);
  };

  // „Çª„É´„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ „É¢„Éº„ÉÄ„É´Ë°®Á§∫
  // const handleDoubleClick = useCallback((e: React.MouseEvent<HTMLDivElement>, index: number, columnName: string) => {
  //   console.log("„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ index", index);
  //   if (columnName === "id") return console.log("„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ id„ÅÆ„Åü„ÇÅ„É™„Çø„Éº„É≥");
  //   // if (index === 0) return console.log("„É™„Çø„Éº„É≥");
  //   if (setTimeoutRef.current) {
  //     clearTimeout(setTimeoutRef.current);

  //     // console.log(e.detail);
  //     setTimeoutRef.current = null;
  //     // „ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´ÂÆüË°å„Åó„Åü„ÅÑÂá¶ÁêÜ
  //     console.log("„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ", e.currentTarget);
  //     // „ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüË¶ÅÁ¥†„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊ†ºÁ¥ç
  //     const text = e.currentTarget.innerText;
  //     setTextareaInput(text);
  //     setIsOpenEditModal(true);
  //   }
  // }, []);

  const tableContainerSize = useDashboardStore((state) => state.tableContainerSize);
  const underDisplayFullScreen = useDashboardStore((state) => state.underDisplayFullScreen);

  // üåü„Çµ„Éñ„Éü„ÉÉ„Éà
  const [inputName, setInputName] = useState("");
  const [inputDepartment, setInputDepartment] = useState("");
  const [inputTel, setInputTel] = useState("");
  const [inputFax, setInputFax] = useState("");
  const [inputZipcode, setInputZipcode] = useState("");
  const [inputAddress, setInputAddress] = useState("");
  const [inputEmployeesClass, setInputEmployeesClass] = useState("");
  const [inputCapital, setInputCapital] = useState("");
  const [inputFound, setInputFound] = useState("");
  const [inputContent, setInputContent] = useState("");
  const [inputHP, setInputHP] = useState("");
  const [inputEmail, setInputEmail] = useState("");
  const [inputIndustryType, setInputIndustryType] = useState("");
  const [inputProductL, setInputProductL] = useState("");
  const [inputProductM, setInputProductM] = useState("");
  const [inputProductS, setInputProductS] = useState("");
  const [inputFiscal, setInputFiscal] = useState("");
  const [inputClient, setInputClient] = useState("");
  const [inputSupplier, setInputSupplier] = useState("");
  const [inputFacility, setInputFacility] = useState("");
  const [inputBusinessSite, setInputBusinessSite] = useState("");
  const [inputOverseas, setInputOverseas] = useState("");
  const [inputGroup, setInputGroup] = useState("");
  const [inputCorporateNum, setInputCorporateNum] = useState("");

  const supabase = useSupabaseClient();
  const newSearchCompanyParams = useDashboardStore((state) => state.newSearchCompanyParams);
  const setNewSearchCompanyParams = useDashboardStore((state) => state.setNewSearchCompanyParams);
  const editSearchMode = useDashboardStore((state) => state.editSearchMode);
  const setEditSearchMode = useDashboardStore((state) => state.setEditSearchMode);
  const setLoadingGlobalState = useDashboardStore((state) => state.setLoadingGlobalState);

  // „Çµ„Éº„ÉÅÁ∑®ÈõÜ„É¢„Éº„Éâ„Åß„É™„Éó„É¨„Ç§„ÇπÂâç„ÅÆÂÄ§„Å´Âæ©ÂÖÉ„Åô„ÇãÈñ¢Êï∞
  function beforeAdjustFieldValue(value: string | null) {
    if (value === "") return ""; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
    if (value === null) return ""; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
    if (value.includes("%")) value = value.replace(/\%/g, "Ôºä");
    if (value === "ISNULL") return "is null"; // ISNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
    if (value === "ISNOTNULL") return "is not null"; // ISNOTNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
    return value;
  }
  console.log("üî•„É°„Ç§„É≥„Ç≥„É≥„ÉÜ„Éä„ÉºnewSearchCompanyParams", newSearchCompanyParams);

  // Á∑®ÈõÜ„É¢„Éº„Éâtrue„ÅÆÂ†¥Âêà„ÄÅ„Çµ„Éº„ÉÅÊù°‰ª∂„Çíinput„Çø„Ç∞„ÅÆvalue„Å´Ê†ºÁ¥ç
  // Êñ∞Ë¶è„Çµ„Éº„ÉÅ„ÅÆÂ†¥Âêà„Å´„ÅØ„ÄÅ„Çµ„Éº„ÉÅÊù°‰ª∂„ÇíÁ©∫„Å´„Åô„Çã
  useEffect(() => {
    if (newSearchCompanyParams === null) return;
    console.log("üî•„É°„Ç§„É≥„Ç≥„É≥„ÉÜ„Éä„ÉºnewSearchCompanyParamsÁ∑®ÈõÜ„É¢„Éº„Éâ", newSearchCompanyParams);
    if (editSearchMode) {
      setInputName(beforeAdjustFieldValue(newSearchCompanyParams.name));
      setInputDepartment(beforeAdjustFieldValue(newSearchCompanyParams.department_name));
      setInputTel(beforeAdjustFieldValue(newSearchCompanyParams?.main_phone_number));
      setInputFax(beforeAdjustFieldValue(newSearchCompanyParams?.main_fax));
      setInputZipcode(beforeAdjustFieldValue(newSearchCompanyParams?.zipcode));
      setInputEmployeesClass(beforeAdjustFieldValue(newSearchCompanyParams?.number_of_employees_class));
      setInputAddress(beforeAdjustFieldValue(newSearchCompanyParams?.address));
      setInputCapital(beforeAdjustFieldValue(newSearchCompanyParams?.capital));
      setInputFound(beforeAdjustFieldValue(newSearchCompanyParams?.established_in));
      setInputContent(beforeAdjustFieldValue(newSearchCompanyParams?.business_content));
      setInputHP(beforeAdjustFieldValue(newSearchCompanyParams.website_url));
      setInputEmail(beforeAdjustFieldValue(newSearchCompanyParams.email));
      setInputIndustryType(beforeAdjustFieldValue(newSearchCompanyParams.industry_type));
      setInputProductL(beforeAdjustFieldValue(newSearchCompanyParams.product_category_large));
      setInputProductM(beforeAdjustFieldValue(newSearchCompanyParams.product_category_medium));
      setInputProductS(beforeAdjustFieldValue(newSearchCompanyParams.product_category_small));
      setInputFiscal(beforeAdjustFieldValue(newSearchCompanyParams.fiscal_end_month));
      setInputClient(beforeAdjustFieldValue(newSearchCompanyParams.clients));
      setInputSupplier(beforeAdjustFieldValue(newSearchCompanyParams.supplier));
      setInputFacility(beforeAdjustFieldValue(newSearchCompanyParams.facility));
      setInputBusinessSite(beforeAdjustFieldValue(newSearchCompanyParams.business_sites));
      setInputOverseas(beforeAdjustFieldValue(newSearchCompanyParams.overseas_bases));
      setInputGroup(beforeAdjustFieldValue(newSearchCompanyParams.group_company));
      setInputCorporateNum(beforeAdjustFieldValue(newSearchCompanyParams.corporate_number));
    } else {
      setInputName("");
      setInputDepartment("");
      setInputTel("");
      setInputFax("");
      setInputZipcode("");
      setInputEmployeesClass("");
      setInputAddress("");
      setInputCapital("");
      setInputFound("");
      setInputContent("");
      setInputHP("");
      setInputEmail("");
      setInputIndustryType("");
      setInputProductL("");
      setInputProductM("");
      setInputProductS("");
      setInputFiscal("");
      setInputClient("");
      setInputSupplier("");
      setInputFacility("");
      setInputBusinessSite("");
      setInputOverseas("");
      setInputGroup("");
      setInputCorporateNum("");
    }
  }, [editSearchMode]);

  // „Çµ„Éº„ÉÅÈñ¢Êï∞ÂÆüË°å
  const handleSearchSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // // Asterisks to percent signs for PostgreSQL's LIKE operator
    function adjustFieldValue(value: string) {
      if (value === "") return null; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
      if (value === null) return null; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
      if (value.includes("*")) value = value.replace(/\*/g, "%");
      if (value.includes("Ôºä")) value = value.replace(/\Ôºä/g, "%");
      if (value === "is null") return "ISNULL"; // ISNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
      // if (value === "is not null") return "%%";
      if (value === "is not null") return "ISNOTNULL"; // ISNOTNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
      return value;
    }
    setLoadingGlobalState(true);

    let _name = adjustFieldValue(inputName);
    let _department_name = adjustFieldValue(inputDepartment);
    let _main_phone_number = adjustFieldValue(inputTel);
    let _main_fax = adjustFieldValue(inputFax);
    let _zipcode = adjustFieldValue(inputZipcode);
    let _number_of_employees_class = adjustFieldValue(inputEmployeesClass);
    let _address = adjustFieldValue(inputAddress);
    let _capital = adjustFieldValue(inputCapital);
    let _established_in = adjustFieldValue(inputFound);
    let _business_content = adjustFieldValue(inputContent);
    let _website_url = adjustFieldValue(inputHP);
    let _email = adjustFieldValue(inputEmail);
    let _industry_type = adjustFieldValue(inputIndustryType);
    let _product_category_large = adjustFieldValue(inputProductL);
    let _product_category_medium = adjustFieldValue(inputProductM);
    let _product_category_small = adjustFieldValue(inputProductS);
    let _fiscal_end_month = adjustFieldValue(inputFiscal);
    let _clients = adjustFieldValue(inputClient);
    let _supplier = adjustFieldValue(inputSupplier);
    let _facility = adjustFieldValue(inputFacility);
    let _business_sites = adjustFieldValue(inputBusinessSite);
    let _overseas_bases = adjustFieldValue(inputOverseas);
    let _group_company = adjustFieldValue(inputGroup);
    let _corporate_number = adjustFieldValue(inputCorporateNum);

    // // Asterisks to percent signs for PostgreSQL's LIKE operator
    // if (_field1.includes("*")) _field1 = _field1.replace(/\*/g, "%");
    // if (_field1 === "is null") _field1 = null;
    // if (_field1 === "is not null") _field1 = "%%";

    const params = {
      name: _name,
      department_name: _department_name,
      main_phone_number: _main_phone_number,
      main_fax: _main_fax,
      zipcode: _zipcode,
      number_of_employees_class: _number_of_employees_class,
      address: _address,
      capital: _capital,
      established_in: _established_in,
      business_content: _business_content,
      website_url: _website_url,
      email: _email,
      industry_type: _industry_type,
      product_category_large: _product_category_large,
      product_category_medium: _product_category_medium,
      product_category_small: _product_category_small,
      fiscal_end_month: _fiscal_end_month,
      clients: _clients,
      supplier: _supplier,
      facility: _facility,
      business_sites: _business_sites,
      overseas_bases: _overseas_bases,
      group_company: _group_company,
      corporate_number: _corporate_number,
    };

    console.log("‚úÖ Êù°‰ª∂ params", params);

    setInputName("");
    setInputDepartment("");
    setInputTel("");
    setInputFax("");
    setInputZipcode("");
    setInputEmployeesClass("");
    setInputAddress("");
    setInputCapital("");
    setInputFound("");
    setInputContent("");
    setInputHP("");
    setInputEmail("");
    setInputIndustryType("");
    setInputProductL("");
    setInputProductM("");
    setInputProductS("");
    setInputFiscal("");
    setInputClient("");
    setInputSupplier("");
    setInputFacility("");
    setInputBusinessSite("");
    setInputOverseas("");
    setInputGroup("");
    setInputCorporateNum("");

    setSearchMode(false);
    setEditSearchMode(false);

    // Zustand„Å´Ê§úÁ¥¢Êù°‰ª∂„ÇíÊ†ºÁ¥ç
    setNewSearchCompanyParams(params);

    console.log("‚úÖ params", params);
    // const { data, error } = await supabase.rpc("search_companies", { params });

    // ‰ºöÁ§æID„Åånull„ÄÅ„Å§„Åæ„Çä„Åæ„Å†ÊúâÊñô„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÊåÅ„Å£„Å¶„ÅÑ„Å™„ÅÑ„É¶„Éº„Ç∂„Éº
    // const { data, error } = await supabase
    //   .rpc("search_companies", { params })
    //   .is("created_by_company_id", null)
    //   .range(0, 20);

    // if (error) return alert(error.message);
    // console.log("‚úÖ Ê§úÁ¥¢ÁµêÊûú„Éá„Éº„ÇøÂèñÂæó data", data);
  };

  // const tableContainerSize = useRootStore(useDashboardStore, (state) => state.tableContainerSize);
  return (
    <form className={`${styles.main_container} w-full `} onSubmit={handleSearchSubmit}>
      {/* ------------------------- „Çπ„ÇØ„É≠„Éº„É´„Ç≥„É≥„ÉÜ„Éä ------------------------- */}
      {/* <div className={`${styles.scroll_container} relative flex w-full overflow-y-auto pl-[10px] `}> */}
      <div
        className={`${styles.scroll_container} relative flex w-full overflow-y-auto pl-[10px] ${
          tableContainerSize === "half" && underDisplayFullScreen ? `${styles.height_all}` : ``
        } ${tableContainerSize === "all" && underDisplayFullScreen ? `${styles.height_all}` : ``}`}
      >
        {/* ------------------------- Â∑¶„Ç≥„É≥„ÉÜ„Éä ------------------------- */}
        <div
          className={`${styles.left_container} h-full min-w-[calc(50vw-var(--sidebar-mini-width))] pb-[35px] pt-[10px]`}
        >
          {/* --------- „É©„ÉÉ„Éë„Éº --------- */}
          <div className={`${styles.left_contents_wrapper} flex h-full w-full flex-col`}>
            {/* ‰ºöÁ§æÂêç */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óè‰ºöÁ§æÂêç</span>
                  {!searchMode && (
                    <span className={`${styles.value} ${styles.value_highlight}`}>
                      {selectedRowDataCompany?.name ? selectedRowDataCompany?.name : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      placeholder="Ê†™Âºè‰ºöÁ§æ‚óã‚óã"
                      autoFocus
                      className={`${styles.input_box}`}
                      value={inputName}
                      onChange={(e) => setInputName(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ÈÉ®ÁΩ≤Âêç */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óèÈÉ®ÁΩ≤Âêç</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.department_name ? selectedRowDataCompany?.department_name : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      placeholder="„Äå‰ª£Ë°®ÂèñÁ∑†ÂΩπÔºä„Äç„ÇÑ„ÄåÔºäË£ΩÈÄ†ÈÉ®Ôºä„Äç„ÄåÔºäÂìÅË≥™Ôºä„Äç„Å™„Å©"
                      className={`${styles.input_box}`}
                      value={inputDepartment}
                      onChange={(e) => setInputDepartment(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰ª£Ë°®TEL„Éª‰ª£Ë°®Fax */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óè‰ª£Ë°®TEL</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.main_phone_number ? selectedRowDataCompany?.main_phone_number : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="tel"
                      placeholder=""
                      className={`${styles.input_box}`}
                      value={inputTel}
                      onChange={(e) => setInputTel(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>‰ª£Ë°®Fax</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.main_fax ? selectedRowDataCompany?.main_fax : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="tel"
                      className={`${styles.input_box}`}
                      value={inputFax}
                      onChange={(e) => setInputFax(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ÈÉµ‰æøÁï™Âè∑„ÉªÁ´∂Âêà„ÉÅ„Çß„ÉÉ„ÇØ */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>ÈÉµ‰æøÁï™Âè∑</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.zipcode ? selectedRowDataCompany?.zipcode : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputZipcode}
                      onChange={(e) => setInputZipcode(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className={`flex h-full w-1/2 flex-col pr-[20px]`}>
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>ÂæìÊ•≠Âì°Êï∞</span>
                  {/* <span className={`${styles.title}`}>‰ºöÂì°Â∞ÇÁî®</span> */}
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.number_of_employees ? selectedRowDataCompany?.number_of_employees : ""}
                    </span>
                  )}
                  {/* {!searchMode && <span className={`${styles.value}`}>ÊúâÊñô‰ºöÂì°ÊßòÂ∞ÇÁî®„ÅÆ„Éï„Ç£„Éº„É´„Éâ„Åß„Åô</span>} */}
                  {/* {searchMode && <input type="text" className={`${styles.input_box}`} />} */}
                  {/* „Çµ„Éñ„Çπ„ÇØÊú™Âä†ÂÖ•ËÄÖ„Å´„ÅØ„Éñ„É©„Éº„ÇíË°®Á§∫ */}
                  {/* <div className={`${styles.limited_lock_cover_half} flex-center`}>
                    <FaLock />
                  </div> */}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰ΩèÊâÄ */}
            <div className={`${styles.row_area} flex h-[50px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px] ">
                <div className={`${styles.title_box} flex h-full `}>
                  <span className={`${styles.title}`}>‚óã‰ΩèÊâÄ</span>
                  {!searchMode && (
                    <span className={`${styles.textarea_value} h-[45px]`}>
                      {selectedRowDataCompany?.address ? selectedRowDataCompany?.address : ""}
                    </span>
                  )}
                  {searchMode && (
                    <textarea
                      name="address"
                      id="address"
                      cols={30}
                      rows={10}
                      placeholder="„ÄåÁ•ûÂ•àÂ∑ùÁúåÔºä„Äç„ÇÑ„ÄåÔºäÂ§ßÁî∞Âå∫Ôºä„Äç„Å™„Å©"
                      className={`${styles.textarea_box} `}
                      value={inputAddress}
                      onChange={(e) => setInputAddress(e.target.value)}
                    ></textarea>
                  )}
                </div>
                <div className={`${styles.underline} `}></div>
              </div>
            </div>

            {/* Ë≥áÊú¨Èáë„ÉªË®≠Á´ã */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>Ë≥áÊú¨Èáë</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.capital ? selectedRowDataCompany?.capital : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputCapital}
                      onChange={(e) => setInputCapital(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>Ë®≠Á´ã</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.established_in ? selectedRowDataCompany?.established_in : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputFound}
                      onChange={(e) => setInputFound(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∫ãÊ•≠ÂÜÖÂÆπ */}
            <div className={`${styles.row_area} flex h-[50px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px] ">
                <div className={`${styles.title_box}  flex h-full`}>
                  <span className={`${styles.title}`}>‰∫ãÊ•≠Ê¶ÇË¶Å</span>
                  {!searchMode && (
                    <>
                      {/* <span className={`${styles.textarea_value} h-[45px]`}>
                        Êù±‰∫¨ÈÉΩÊ∏ØÂå∫ËäùÊµ¶4-20-2
                        ËäùÊµ¶„Ç¢„Ç§„É©„É≥„Éâ„Éñ„É´„Éº„É†„Çø„ÉØ„Éº602Âè∑ÂÆ§„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇËäùÊµ¶„Ç¢„Ç§„É©„É≥„Éâ„Éñ„É´„Éº„É†„Çø„ÉØ„Éº602Âè∑ÂÆ§222„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ
                      </span> */}
                      <span
                        data-text={`${
                          selectedRowDataCompany?.business_content ? selectedRowDataCompany?.business_content : ""
                        }`}
                        className={`${styles.textarea_value} h-[45px]`}
                        onMouseEnter={(e) => handleOpenTooltip(e)}
                        onMouseLeave={handleCloseTooltip}
                      >
                        {selectedRowDataCompany?.business_content ? selectedRowDataCompany?.business_content : ""}
                      </span>
                    </>
                  )}
                  {searchMode && (
                    <textarea
                      name="address"
                      id="address"
                      cols={30}
                      rows={10}
                      className={`${styles.textarea_box} `}
                      value={inputContent}
                      onChange={(e) => setInputContent(e.target.value)}
                    ></textarea>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* HP */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>HP</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.website_url ? selectedRowDataCompany?.website_url : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      placeholder="„Äåis not null„Äç„ÅßHPÊúâ„Çä„ÅÆ„Éá„Éº„Çø„ÅÆ„ÅøÊäΩÂá∫"
                      value={inputHP}
                      onChange={(e) => setInputHP(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Email */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>Email</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.email ? selectedRowDataCompany?.email : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputEmail}
                      onChange={(e) => setInputEmail(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Ê•≠Á®Æ */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óãÊ•≠Á®Æ</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.industry_type ? selectedRowDataCompany?.industry_type : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputIndustryType}
                      onChange={(e) => setInputIndustryType(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Ë£ΩÂìÅÂàÜÈ°û(Â§ßÂàÜÈ°û) */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title} !mr-[5px] !min-w-max`}>‚óãË£ΩÂìÅÂàÜÈ°û(Â§ßÂàÜÈ°û)</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.product_category_large
                        ? selectedRowDataCompany?.product_category_large
                        : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputProductL}
                      onChange={(e) => setInputProductL(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>
            {/* Ë£ΩÂìÅÂàÜÈ°û(‰∏≠ÂàÜÈ°û) */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title} !mr-[5px] !min-w-max`}>‚óãË£ΩÂìÅÂàÜÈ°û(‰∏≠ÂàÜÈ°û)</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.product_category_medium
                        ? selectedRowDataCompany?.product_category_medium
                        : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputProductM}
                      onChange={(e) => setInputProductM(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>
            {/* Ë£ΩÂìÅÂàÜÈ°û(Â∞èÂàÜÈ°û) */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title} !mr-[5px] !min-w-max`}>‚óãË£ΩÂìÅÂàÜÈ°û(Â∞èÂàÜÈ°û)</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.product_category_small
                        ? selectedRowDataCompany?.product_category_small
                        : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputProductS}
                      onChange={(e) => setInputProductS(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Ë¶èÊ®°Ôºà„É©„É≥„ÇØÔºâ„ÉªÊ±∫ÁÆóÊúà */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>Ë¶èÊ®°(ÔæóÔæùÔΩ∏)</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.number_of_employees_class
                        ? selectedRowDataCompany?.number_of_employees_class
                        : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputEmployeesClass}
                      onChange={(e) => setInputEmployeesClass(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>Ê±∫ÁÆóÊúà</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.fiscal_end_month ? selectedRowDataCompany?.fiscal_end_month : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputFiscal}
                      onChange={(e) => setInputFiscal(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∫àÁÆóÁî≥Ë´ãÊúà1„Éª‰∫àÁÆóÁî≥Ë´ãÊúà2 */}
            {/* <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰∫àÁÆóÁî≥Ë´ãÊúà1</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.budget_request_month1
                        ? selectedRowDataCompany?.budget_request_month1
                        : ""}
                    </span>
                  )}
                  {searchMode && <input type="text" className={`${styles.input_box}`} />}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>‰∫àÁÆóÁî≥Ë´ãÊúà2</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.budget_request_month2
                        ? selectedRowDataCompany?.budget_request_month2
                        : ""}
                    </span>
                  )}
                  {searchMode && <input type="text" className={`${styles.input_box}`} />}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div> */}

            {/* ‰∏ªË¶ÅÂèñÂºïÂÖà */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰∏ªË¶ÅÂèñÂºïÂÖà</span>
                  {!searchMode && (
                    <span
                      data-text={`${selectedRowDataCompany?.clients ? selectedRowDataCompany?.clients : ""}`}
                      className={`${styles.value}`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataCompany?.clients ? selectedRowDataCompany?.clients : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputClient}
                      onChange={(e) => setInputClient(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∏ªË¶Å‰ªïÂÖ•ÂÖà */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰∏ªË¶Å‰ªïÂÖ•ÂÖà</span>
                  {!searchMode && (
                    <span
                      data-text={`${selectedRowDataCompany?.supplier ? selectedRowDataCompany?.supplier : ""}`}
                      className={`${styles.value}`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataCompany?.supplier ? selectedRowDataCompany?.supplier : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputSupplier}
                      onChange={(e) => setInputSupplier(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Ë®≠ÂÇô */}
            <div className={`${styles.row_area} flex h-[50px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px] ">
                <div className={`${styles.title_box}  flex h-full`}>
                  <span className={`${styles.title}`}>Ë®≠ÂÇô</span>
                  {!searchMode && (
                    <>
                      {/* <span className={`${styles.textarea_value} h-[45px]`}>
                        Êù±‰∫¨ÈÉΩÊ∏ØÂå∫ËäùÊµ¶4-20-2
                        ËäùÊµ¶„Ç¢„Ç§„É©„É≥„Éâ„Éñ„É´„Éº„É†„Çø„ÉØ„Éº602Âè∑ÂÆ§„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇËäùÊµ¶„Ç¢„Ç§„É©„É≥„Éâ„Éñ„É´„Éº„É†„Çø„ÉØ„Éº602Âè∑ÂÆ§222„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ
                      </span> */}
                      <span
                        data-text={`${selectedRowDataCompany?.facility ? selectedRowDataCompany?.facility : ""}`}
                        className={`${styles.textarea_value} h-[45px]`}
                        onMouseEnter={(e) => handleOpenTooltip(e)}
                        onMouseLeave={handleCloseTooltip}
                      >
                        {selectedRowDataCompany?.facility ? selectedRowDataCompany?.facility : ""}
                      </span>
                    </>
                  )}
                  {searchMode && (
                    <textarea
                      name="address"
                      id="address"
                      cols={30}
                      rows={10}
                      className={`${styles.textarea_box} `}
                      value={inputFacility}
                      onChange={(e) => setInputFacility(e.target.value)}
                    ></textarea>
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* ‰∫ãÊ•≠Êã†ÁÇπ„ÉªÊµ∑Â§ñÊã†ÁÇπ */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‰∫ãÊ•≠Êã†ÁÇπ</span>
                  {!searchMode && (
                    <span
                      data-text={`${
                        selectedRowDataCompany?.business_sites ? selectedRowDataCompany?.business_sites : ""
                      }`}
                      className={`${styles.value}`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataCompany?.business_sites ? selectedRowDataCompany?.business_sites : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputBusinessSite}
                      onChange={(e) => setInputBusinessSite(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title}`}>Êµ∑Â§ñÊã†ÁÇπ</span>
                  {!searchMode && (
                    <span
                      data-text={`${
                        selectedRowDataCompany?.overseas_bases ? selectedRowDataCompany?.overseas_bases : ""
                      }`}
                      className={`${styles.value}`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataCompany?.overseas_bases ? selectedRowDataCompany?.overseas_bases : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputOverseas}
                      onChange={(e) => setInputOverseas(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* „Ç∞„É´„Éº„Éó‰ºöÁ§æ */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-full flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>„Ç∞„É´„Éº„Éó‰ºöÁ§æ</span>
                  {!searchMode && (
                    <span
                      className={`${styles.value}`}
                      data-text={`${
                        selectedRowDataCompany?.group_company ? selectedRowDataCompany?.group_company : ""
                      }`}
                      onMouseEnter={(e) => handleOpenTooltip(e)}
                      onMouseLeave={handleCloseTooltip}
                    >
                      {selectedRowDataCompany?.group_company ? selectedRowDataCompany?.group_company : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputGroup}
                      onChange={(e) => setInputGroup(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* Ê≥ï‰∫∫Áï™Âè∑„ÉªID */}
            <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center `}>
                  <span className={`${styles.title}`}>‚óãÊ≥ï‰∫∫Áï™Âè∑</span>
                  {!searchMode && (
                    <span className={`${styles.value}`}>
                      {selectedRowDataCompany?.corporate_number ? selectedRowDataCompany?.corporate_number : ""}
                    </span>
                  )}
                  {searchMode && (
                    <input
                      type="text"
                      className={`${styles.input_box}`}
                      value={inputCorporateNum}
                      onChange={(e) => setInputCorporateNum(e.target.value)}
                    />
                  )}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
              <div className="flex h-full w-1/2 flex-col pr-[20px]">
                <div className={`${styles.title_box} flex h-full items-center`}>
                  <span className={`${styles.title_min}`}>ID</span>
                  {!searchMode && (
                    <span className={`${styles.value} truncate`}>
                      {selectedRowDataCompany?.id ? selectedRowDataCompany?.id : ""}
                    </span>
                  )}
                  {/* {searchMode && <input type="text" className={`${styles.input_box}`} />} */}
                </div>
                <div className={`${styles.underline}`}></div>
              </div>
            </div>

            {/* --------- „É©„ÉÉ„Éë„Éº„Åì„Åì„Åæ„Åß --------- */}
          </div>
        </div>
        {/* ---------------- Âè≥„Ç≥„É≥„ÉÜ„Éä „Çµ„Éº„ÉÅ„É¢„Éº„Éâ„Åß„ÅØ„Å™„ÅÑÈÄöÂ∏∏„É¢„Éº„Éâ Ê¥ªÂãï„ÉÜ„Éº„Éñ„É´ ---------------- */}
        {!searchMode && (
          <div className={`${styles.right_container} h-full grow bg-[aqua]/[0] pb-[35px] pt-[20px]`}>
            <div className={`${styles.right_contents_wrapper} flex h-full w-full flex-col bg-[#000]/[0]`}>
              {/* Ê¥ªÂãïÂ±•Ê≠¥ */}
              <ErrorBoundary FallbackComponent={ErrorFallback}>
                <Suspense
                  fallback={<Fallback className="min-h-[calc(100vh-100vh/3-var(--header-height)/3--20px-22px-40px)]" />}
                >
                  <UnderRightActivityLog />
                </Suspense>
              </ErrorBoundary>
              {/* ‰∏ã„Ç®„É™„Ç¢ Á¶ÅÊ≠¢„Éï„É©„Ç∞„Å™„Å© */}
              <div
                className={`${styles.right_under_container} h-screen w-full  bg-[#f0f0f0]/[0] ${
                  isOpenSidebar ? `transition-base02` : `transition-base01`
                }`}
              >
                {/* ‰ª£Ë°®ËÄÖ„Éª‰ºöÈï∑ */}
                <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>‰ª£Ë°®ËÄÖ</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataCompany?.representative_name
                            ? selectedRowDataCompany?.representative_name
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>‰ºöÈï∑</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataCompany?.chairperson ? selectedRowDataCompany?.chairperson : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÂâØÁ§æÈï∑„ÉªÂ∞ÇÂãôÂèñÁ∑†ÂΩπ */}
                <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÂâØÁ§æÈï∑</span>
                      {!searchMode && (
                        <span className={`${styles.value}`}>
                          {selectedRowDataCompany?.senior_vice_president
                            ? selectedRowDataCompany?.senior_vice_president
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>Â∞ÇÂãôÂèñÁ∑†ÂΩπ</span>
                      {!searchMode && (
                        <span
                          data-text={`${
                            selectedRowDataCompany?.senior_managing_director
                              ? selectedRowDataCompany?.senior_managing_director
                              : ""
                          }`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataCompany?.senior_managing_director
                            ? selectedRowDataCompany?.senior_managing_director
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* Â∏∏ÂãôÂèñÁ∑†ÂΩπ„ÉªÂèñÁ∑†ÂΩπ */}
                <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>Â∏∏ÂãôÂèñÁ∑†ÂΩπ</span>
                      {!searchMode && (
                        <span
                          data-text={`${
                            selectedRowDataCompany?.managing_director ? selectedRowDataCompany?.managing_director : ""
                          }`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataCompany?.managing_director ? selectedRowDataCompany?.managing_director : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>ÂèñÁ∑†ÂΩπ</span>
                      {!searchMode && (
                        <span
                          data-text={`${selectedRowDataCompany?.director ? selectedRowDataCompany?.director : ""}`}
                          className={`${styles.value} truncate`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataCompany?.director ? selectedRowDataCompany?.director : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÂΩπÂì°„ÉªÁõ£ÊüªÂΩπ */}
                <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÂΩπÂì°</span>
                      {!searchMode && (
                        <span
                          data-text={`${
                            selectedRowDataCompany?.board_member ? selectedRowDataCompany?.board_member : ""
                          }`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataCompany?.board_member ? selectedRowDataCompany?.board_member : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>Áõ£ÊüªÂΩπ</span>
                      {!searchMode && (
                        <span
                          data-text={`${selectedRowDataCompany?.auditor ? selectedRowDataCompany?.auditor : ""}`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataCompany?.auditor ? selectedRowDataCompany?.auditor : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>

                {/* ÈÉ®Èï∑„ÉªÊãÖÂΩìËÄÖ */}
                <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>ÈÉ®Èï∑</span>
                      {!searchMode && (
                        <span
                          data-text={`${selectedRowDataCompany?.manager ? selectedRowDataCompany?.manager : ""}`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataCompany?.manager ? selectedRowDataCompany?.manager : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center`}>
                      <span className={`${styles.title}`}>ÊãÖÂΩìËÄÖ</span>
                      {!searchMode && (
                        <span
                          data-text={`${selectedRowDataCompany?.member ? selectedRowDataCompany?.member : ""}`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataCompany?.member ? selectedRowDataCompany?.member : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div>
                {/* TELË¶ÅÊ≥®ÊÑè„Éï„É©„Ç∞„ÉªTELË¶ÅÊ≥®ÊÑèÁêÜÁî± */}
                {/* <div className={`${styles.right_row_area}  mt-[10px] flex h-[35px] w-full grow items-center`}>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>TELË¶ÅÊ≥®ÊÑè</span>

                      <div className={`${styles.grid_select_cell_header}`}>
                        <input
                          type="checkbox"
                          // checked={!!checkedColumnHeader} // ÂàùÊúüÂÄ§
                          checked={!!selectedRowDataCompany?.call_careful_flag}
                          onChange={() => console.log("„ÉÅ„Çß„ÉÉ„ÇØ„ÇØ„É™„ÉÉ„ÇØ")}
                          className={`${styles.grid_select_cell_header_input}`}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="flex h-full w-1/2 flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.right_under_title}`}>Ê≥®ÊÑèÁêÜÁî±</span>
                      {!searchMode && (
                        <span
                          data-text={`${
                            selectedRowDataCompany?.call_careful_reason
                              ? selectedRowDataCompany?.call_careful_reason
                              : ""
                          }`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e, "right")}
                          onMouseLeave={handleCloseTooltip}
                          // onDoubleClick={(e) => handleDoubleClick(e, index, columnHeaderItemList[index].columnName)}
                        >
                          {selectedRowDataCompany?.call_careful_reason
                            ? selectedRowDataCompany?.call_careful_reason
                            : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div> */}

                {/* „É°„Éº„É´Á¶ÅÊ≠¢„Éï„É©„Ç∞„ÉªË≥áÊñôÁ¶ÅÊ≠¢„Éï„É©„Ç∞ */}
                {/* <div className={`${styles.right_row_area}  mt-[10px] flex h-[35px] w-full grow items-center`}>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>„É°„Éº„É´Á¶ÅÊ≠¢„Éï„É©„Ç∞</span>

                      <div className={`${styles.grid_select_cell_header}`}>
                        <input
                          type="checkbox"
                          // checked={!!checkedColumnHeader} // ÂàùÊúüÂÄ§
                          checked={!!selectedRowDataCompany?.email_ban_flag}
                          onChange={() => console.log("„ÉÅ„Çß„ÉÉ„ÇØ„ÇØ„É™„ÉÉ„ÇØ")}
                          className={`${styles.grid_select_cell_header_input}`}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>Ë≥áÊñôÁ¶ÅÊ≠¢„Éï„É©„Ç∞</span>

                      <div className={`${styles.grid_select_cell_header}`}>
                        <input
                          type="checkbox"
                          // checked={!!checkedColumnHeader} // ÂàùÊúüÂÄ§
                          checked={!!selectedRowDataCompany?.sending_ban_flag}
                          onChange={() => console.log("„ÉÅ„Çß„ÉÉ„ÇØ„ÇØ„É™„ÉÉ„ÇØ")}
                          className={`${styles.grid_select_cell_header_input}`}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div> */}

                {/* FAX„ÉªDMÁ¶ÅÊ≠¢„Éï„É©„Ç∞ */}
                {/* <div className={`${styles.right_row_area}  mt-[10px] flex h-[35px] w-full grow items-center`}>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}>
                      <span className={`${styles.check_title}`}>FAX„ÉªDMÁ¶ÅÊ≠¢„Éï„É©„Ç∞</span>

                      <div className={`${styles.grid_select_cell_header}`}>
                        <input
                          type="checkbox"
                          // checked={!!checkedColumnHeader} // ÂàùÊúüÂÄ§
                          checked={!!selectedRowDataCompany?.fax_dm_ban_flag}
                          onChange={() => console.log("„ÉÅ„Çß„ÉÉ„ÇØ„ÇØ„É™„ÉÉ„ÇØ")}
                          className={`${styles.grid_select_cell_header_input}`}
                        />
                        <svg viewBox="0 0 16 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z" />
                        </svg>
                      </div>
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                  <div className="transition-base03 flex h-full w-1/2  flex-col pr-[20px]">
                    <div className={`${styles.title_box} transition-base03 flex h-full items-center `}></div>
                  </div>
                </div> */}

                {/* Á¶ÅÊ≠¢ÁêÜÁî± */}
                {/* <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
                  <div className="flex h-full w-full flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>Á¶ÅÊ≠¢ÁêÜÁî±</span>
                      {!searchMode && (
                        <span
                          data-text={`${selectedRowDataCompany?.ban_reason ? selectedRowDataCompany?.ban_reason : ""}`}
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          {selectedRowDataCompany?.ban_reason ? selectedRowDataCompany?.ban_reason : ""}
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div> */}
                {/* „ÇØ„É¨„Éº„É† */}
                {/* <div className={`${styles.row_area} flex h-[35px] w-full items-center`}>
                  <div className="flex h-full w-full flex-col pr-[20px]">
                    <div className={`${styles.title_box} flex h-full items-center `}>
                      <span className={`${styles.title}`}>„ÇØ„É¨„Éº„É†</span>
                      {!searchMode && (
                        <span
                          data-text="ÂêæËº©„ÅØÁå´„Åß„ÅÇ„Çã„ÄÇÂêçÂâç„ÅØ„Åæ„Å†ÁÑ°„ÅÑ„ÄÇ"
                          className={`${styles.value}`}
                          onMouseEnter={(e) => handleOpenTooltip(e)}
                          onMouseLeave={handleCloseTooltip}
                        >
                          ÂêæËº©„ÅØÁå´„Åß„ÅÇ„Çã„ÄÇÂêçÂâç„ÅØ„Åæ„Å†ÁÑ°„ÅÑ„ÄÇ
                        </span>
                      )}
                      {searchMode && <input type="text" className={`${styles.input_box}`} />}
                    </div>
                    <div className={`${styles.underline}`}></div>
                  </div>
                </div> */}

                {/*  */}
              </div>

              {/*  */}
            </div>
          </div>
        )}
        {/* ---------------- Âè≥„Ç≥„É≥„ÉÜ„Éä inputÊôÇ„ÅØsticky„Å´„Åó„Å¶null„ÇÑis null„Å™„Å©„ÅÆ„Éú„Çø„É≥„ÇÑË™¨Êòé„ÇíÈÖçÁΩÆ ---------------- */}
        {searchMode && (
          <div
            className={`${styles.right_sticky_container} sticky top-0 h-full grow bg-[aqua]/[0] pt-[20px] text-[var(--color-text)] `}
          >
            <div
              className={`${styles.right_sticky_contents_wrapper} flex h-[350px] w-full flex-col rounded-[8px] bg-[var(--color-bg-brand-f10)] px-[20px] `}
            >
              {/* <div className="flex h-[40px] w-full items-center justify-center text-[18px] font-semibold ">
                ‰ºöÁ§æ Êù°‰ª∂Ê§úÁ¥¢
              </div> */}
              <div className={` text-[13px]`}>
                <div className="mt-[5px] flex  min-h-[30px] items-center">‚óãÊ§úÁ¥¢„Åó„Åü„ÅÑÊù°‰ª∂„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</div>
                <div className="flex  min-h-[30px] items-center">
                  <span className="h-full w-[15px]"></span>
                  ‰æã„Åà„Å∞„ÄÅ„Äå&quot;Êù±‰∫¨ÈÉΩÂ§ßÁî∞Âå∫&quot;„Äç„ÅÆ‰ºöÁ§æ„Åß„Äå‰∫ãÊ•≠Êã†ÁÇπ„Äç„ÅåÂ≠òÂú®„Åô„Çã‰ºöÁ§æ„ÇíÊ§úÁ¥¢„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Äå‚óè‰ΩèÊâÄ„Äç„Å´„ÄåÊù±‰∫¨ÈÉΩÂ§ßÁî∞Âå∫‚Äª„Äç„Å®ÂÖ•Âäõ„Åó„ÄÅ„Äå‰∫ãÊ•≠Êã†ÁÇπ„Äç„Å´„Äåis
                  not null„Äç„Å®ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                </div>
                <div className="mt-[5px] flex  min-h-[30px] items-center">
                  ‚óã„Äå‚Äª „Ç¢„Çπ„Çø„É™„Çπ„ÇØ„Äç„ÅØ„ÄÅ„ÄåÂâçÊñπ‰∏ÄËá¥„ÉªÂæåÊñπ‰∏ÄËá¥„ÉªÈÉ®ÂàÜ‰∏ÄËá¥„Äç„ÇíË°®„Åó„Åæ„Åô
                </div>
                <div className="flex items-center">
                  <span className="h-full w-[15px]"></span>
                  ‰æã„Åà„Å∞„ÄÅ‰ºöÁ§æÂêç„Å´„Äå&quot;Â∑•Ê•≠&quot;„Äç„Å®‰ªò„Åè‰ºöÁ§æ„ÇíÊ§úÁ¥¢„Åó„Åü„ÅÑÂ†¥Âêà„Å´„ÄÅ„Äå‚ÄªÂ∑•Ê•≠‚Äª„Äç„ÄÅ„Äå&quot;Á≤æÊ©ü&quot;„Äç„Å®‰ªò„Åè‰ºöÁ§æ„ÅØ„Äå‚ÄªÁ≤æÊ©ü‚Äª„Äç„Å®Ê§úÁ¥¢„Åô„Çã„Åì„Å®„Åß„ÄÅÊåáÂÆö„Åó„ÅüÊñáÂ≠ó„Åå‰ªò„Åè„Éá„Éº„Çø„ÇíÊ§úÁ¥¢ÂèØËÉΩ„Åß„Åô
                </div>
                <div className="mt-[5px] flex  min-h-[30px] items-center">
                  ‚óã„Äåis not null„Äç„ÅØ„Äå&quot;Á©∫Ê¨Ñ„Åß„Å™„ÅÑ&quot;„Éá„Éº„Çø„Äç„ÇíÊäΩÂá∫„Åó„Åæ„Åô
                </div>
                <div className="mt-[5px] flex  min-h-[30px] items-center">
                  ‚óã„Äåis null„Äç„ÅØ„Äå&quot;Á©∫Ê¨Ñ„ÅÆ&quot;„Éá„Éº„Çø„Äç„ÇíÊäΩÂá∫„Åó„Åæ„Åô
                </div>
                <div className="mt-[5px] flex  min-h-[30px] items-center">
                  ‚óãÈ†ÖÁõÆ„ÇíÁ©∫Ê¨Ñ„ÅÆ„Åæ„ÅæÊ§úÁ¥¢„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅ„Åù„ÅÆÈ†ÖÁõÆ„ÅÆ„ÄåÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø„Äç„ÇíÊäΩÂá∫„Åó„Åæ„Åô
                </div>
                <div className="mt-[10px] flex h-[30px] w-full items-center">
                  <button type="submit" className={`${styles.btn}`}>
                    Ê§úÁ¥¢
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </form>
  );
};

export const CompanyMainContainer = memo(CompanyMainContainerMemo);

/* Divider„ÄÅÂå∫Âàá„ÇäÁ∑ö */
//  <div className="flex h-full w-1/2 flex-col pr-[15px]">
//    <div className="flex h-full items-center">‚óãÊ≥ï‰∫∫Áï™Âè∑</div>
//    <div className={`${styles.underline}`}></div>
//  </div>;

/**
 * 
 * <div
        className={`${styles.scroll_container} relative flex w-full overflow-y-auto pl-[10px] ${
          tableContainerSize === "half" ? `${styles.height_all}` : ``
        } ${tableContainerSize === "all" ? `${styles.height_all}` : ``}`}
      >
*/
