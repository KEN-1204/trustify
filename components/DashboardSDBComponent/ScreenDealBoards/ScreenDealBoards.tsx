import { Dispatch, DragEvent, FormEvent, MouseEvent, SetStateAction, Suspense, memo, useEffect, useState } from "react";
import styles from "./ScreenDealBoards.module.css";
import { DealBoard } from "./DealBoard/DealBoard";
import { AvatarIcon } from "@/components/Parts/AvatarIcon/AvatarIcon";
import { MemberAccounts } from "@/types";
import useDashboardStore from "@/store/useDashboardStore";
import { SpinnerBrand } from "@/components/Parts/SpinnerBrand/SpinnerBrand";
import { ErrorBoundary } from "react-error-boundary";
import { ErrorFallback } from "@/components/ErrorFallback/ErrorFallback";
import { ProgressCircle } from "@/components/Parts/Charts/ProgressCircle/ProgressCircle";

type Props = {
  memberList: MemberAccounts[];
  periodType: string;
  period: number;
};

// üå†ÂêÑ„É°„É≥„Éê„Éº„ÅÆ„Éç„ÇøË°®„Çí‰∏ÄË¶ß„ÅßË°®Á§∫„Åô„Çã„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const ScreenDealBoardsMemo = ({ memberList, periodType, period }: Props) => {
  const userProfileState = useDashboardStore((state) => state.userProfileState);

  if (!userProfileState || !userProfileState?.company_id) return null;

  if (!periodType || !period) {
    return (
      <div className="flex-center h-[80dvh] w-[100vw]">
        {/* <SpinnerBrand bgColor="var(--color-sdb-bg)" /> */}
        <span></span>
      </div>
    );
  }

  // SalesProgress„ÅßÈÅ∏Êäû„Åï„Çå„Åü„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„ÅÆid„ÇíÂèñÂæó„Åô„Çã
  // üî∏ÂÄãÂà•„É°„É≥„Éê„Éº„ÅÆ„Éç„ÇøË°®„ÅØÊúÄÂ§ßË°®Á§∫Êï∞„Çí10‰∫∫„Åæ„Åß„Å´„Åô„Çã(ÂÄãÂà•„Å´ÈÅ∏Êäû„Åó„Å¶Ë≤†Ëç∑„ÇíÂ∞ë„Å™„Åè„Åô„Çã)
  // üîπÂÖ®Á§æ„ÅÆÂ†¥Âêà
  //  „ÉªÂÄãÂà•„ÅÆ„É°„É≥„Éê„Éº„ÅÆ„Éç„ÇøË°®ËøΩÂä†„ÅØ„Å™„Åó ÂÖ®‰Ωì„ÅÆ„Éá„Éº„Çø„ÅÆ„Åø
  // üîπ‰∫ãÊ•≠ÈÉ®„ÄÅË™≤„ÅÆÂ†¥Âêà
  //  „ÉªSalesProgress: ÂÖ®‰Ωì„Å®ÂÄãÂà•„É°„É≥„Éê„ÉºÈÅ∏Êäû ÈÅ∏Êäû„Åï„Çå„Åü„É°„É≥„Éê„Éº„ÅÆidÈÖçÂàó„ÇíuseQuery„ÅßÂèñÂæó
  //  „ÉªScreenDealBoards: useQuery„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâidÈÖçÂàó„ÇíÂèñÂæó„Åó„Å¶„ÄÅidÊï∞ÂàÜ„ÅÆDealBoard„Çíid„ÇíProps„ÅßÊ∏°„Åó„Å¶map„ÅßÂ±ïÈñã
  //  „ÉªDealBoard: ÂêÑDealBoard„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÂÜÖ„ÅßProps„ÅßÂèó„ÅëÂèñ„Å£„Åüid„Çí‰Ωø„Å£„Å¶useQuery„ÅßÂÄãÂà•„É°„É≥„Éê„Éº„ÅÆ„Éç„ÇøË°®„ÇíÂèñÂæó
  // üîπ‰øÇ„ÅÆÂ†¥Âêà
  //  „Éª‰∫∫Êï∞„ÅåÂ∞ë„Å™„ÅÑ„ÅÆ„Åß„ÄÅ„Éá„Éï„Ç©„É´„Éà„ÅßÂÖ®„Å¶„ÅÆ„É°„É≥„Éê„Éº„Å´„ÉÅ„Çß„ÉÉ„ÇØ„ÅåÂàù„ÇÅ„Åã„Çâ„Å§„ÅÑ„Å¶„ÅÑ„ÇãÂΩ¢„Å´„Åô„Çã
  // üîπ„É°„É≥„Éê„Éº„ÅÆÂ†¥Âêà
  //  „Éª„Çµ„Ç§„Éâ„ÉÜ„Éº„Éñ„É´„Åß„É°„É≥„Éê„Éº„ÇíÂèñÂæó„Åó„Å¶Ë°®Á§∫

  // ÂÖ®„Å¶„ÅÆ„Éú„Éº„Éâ„Åå„Éû„Ç¶„É≥„Éà„Åó„ÅüÂæå„Å´ProgressCircle„Çí„Éû„Ç¶„É≥„Éà„Åï„Åõ„Çã
  const [isRenderProgress, setIsRenderProgress] = useState(false);

  useEffect(() => {
    if (periodType && period) {
      setTimeout(() => {
        setIsRenderProgress(true);
        console.log("ProgressCircle„É¨„É≥„ÉÄ„É™„É≥„Ç∞");
      }, 1800);
    }
  }, []);

  // ÈÅ∏Êäû„Åï„Çå„Åü„É°„É≥„Éê„Éº„ÅÆid„ÇíDealBoard„Å´props„ÅßÊ∏°„Åô
  const activeThemeColor = useDashboardStore((state) => state.activeThemeColor);

  const FallbackDealBoard = () => {
    return (
      <div className="flex-center h-[50dvh] w-[100vw]">
        <SpinnerBrand
          bgColor="var(--color-sdb-bg)"
          bgTransition={`${activeThemeColor !== "theme-black-gradient" ? `transition-bg05` : ``}`}
        />
      </div>
    );
  };

  return (
    <>
      {/* <section className={`${styles.company_table_screen} h-screen w-full bg-neutral-900 text-neutral-50`}> */}
      <section className={`${styles.screen_deal_boards} transition-bg05 w-full`}>
        {/* ------------------- „Éç„ÇøË°®„Éú„Éº„Éâ ------------------- */}
        {memberList.map((memberObj, index) => {
          return (
            <div key={`${index}_board`} className={`${styles.entity_board_container} bg-[red]/[0]`}>
              <div className={`${styles.entity_detail_container} bg-[green]/[0]`}>
                <div className={`${styles.entity_detail_wrapper}`}>
                  <div className={`${styles.entity_detail} space-x-[12px] text-[12px]`}>
                    <AvatarIcon
                      // size={33}
                      size={36}
                      name={memberObj.profile_name ?? "Êú™Ë®≠ÂÆö"}
                      withCircle={false}
                      hoverEffect={false}
                      textSize={16}
                      // imgUrl={memberObj.avatar_url ?? null}
                    />
                    <div className={`${styles.entity_name} text-[19px] font-bold`}>
                      <span>{memberObj.profile_name}</span>
                    </div>
                    <div className={`${styles.sub_info} pt-[6px]`}>{memberObj.position_name ?? "ÂΩπËÅ∑Êú™Ë®≠ÂÆö"}</div>
                    <div className={`${styles.sub_info} pt-[6px]`}>{memberObj.assigned_employee_id_name ?? ""}</div>
                    {/* <div className={`flex flex-col justify-end `}>
                      <div className={`${styles.sub_info} pt-[0px]`}>216088</div>
                      <div className={`${styles.sub_info} pt-[0px]`}>‰ª£Ë°®ÂèñÁ∑†ÂΩπ</div>
                    </div> */}
                    {isRenderProgress && (
                      <div className={`fade05 relative h-[33px] w-[33px]`} style={{ marginLeft: `24px` }}>
                        <div className="absolute bottom-[-10px] left-0">
                          <ProgressCircle
                            circleId="1"
                            textId="1"
                            progress={78}
                            size={56}
                            strokeWidth={6}
                            fontSize={12}
                            // textVerticalDirReverse={true}
                            textColor="var(--color-text-title)"
                          />
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              <ErrorBoundary FallbackComponent={ErrorFallback}>
                <Suspense fallback={<FallbackDealBoard />}>
                  <DealBoard
                    companyId={userProfileState.company_id!}
                    userId={memberObj.id}
                    periodType={periodType}
                    period={period}
                  />
                </Suspense>
              </ErrorBoundary>
            </div>
          );
        })}
        {/* ------------------- „Éç„ÇøË°®„Éú„Éº„Éâ„Åì„Åì„Åæ„Åß ------------------- */}

        {/* ------------------- „ÉÜ„Çπ„Éà ------------------- */}
        {/* {Array(3)
          .fill(null)
          .map((_, index) => (
            <div key={`${index}_board`} className={`${styles.entity_board_container} bg-[red]/[0]`}>
              <div className={`${styles.entity_detail_container} bg-[green]/[0]`}>
                <div className={`${styles.entity_detail_wrapper}`}>
                  <div className={`${styles.entity_detail} space-x-[12px] text-[12px]`}>
                    <AvatarIcon size={33} name="‰ºäËó§Ë¨ôÂ§™" withCircle={false} hoverEffect={false} />
                    <div className={`${styles.entity_name} text-[19px] font-bold`}>
                      <span>‰ºäËó§ Ë¨ôÂ§™</span>
                    </div>
                    <div className={`${styles.sub_info} pt-[6px]`}>‰ª£Ë°®ÂèñÁ∑†ÂΩπ</div>
                    <div className={`${styles.sub_info} pt-[6px]`}>216088</div>
                  </div>
                </div>
              </div>
              <DealBoard />
            </div>
          ))} */}
        {/* ------------------- „ÉÜ„Çπ„Éà„Åì„Åì„Åæ„Åß ------------------- */}
      </section>
    </>
  );
};

export const ScreenDealBoards = memo(ScreenDealBoardsMemo);
