import {
  Dispatch,
  DragEvent,
  FormEvent,
  Fragment,
  MouseEvent,
  SetStateAction,
  Suspense,
  memo,
  useEffect,
  useState,
} from "react";
import styles from "./ScreenDealBoards.module.css";
import { DealBoard } from "./DealBoard/DealBoard";
import { AvatarIcon } from "@/components/Parts/AvatarIcon/AvatarIcon";
import { MemberAccounts } from "@/types";
import useDashboardStore from "@/store/useDashboardStore";
import { SpinnerBrand } from "@/components/Parts/SpinnerBrand/SpinnerBrand";
import { ErrorBoundary } from "react-error-boundary";
import { ErrorFallback } from "@/components/ErrorFallback/ErrorFallback";
import { ProgressCircle } from "@/components/Parts/Charts/ProgressCircle/ProgressCircle";
import { ProgressNumber } from "@/components/Parts/Charts/ProgressNumber/ProgressNumber";
import { GradientModal } from "@/components/Parts/GradientModal/GradientModal";
import { EditModalDealCard } from "./EditModalDealCard/EditModalDealCard";
import { formatDisplayPrice } from "@/utils/Helpers/formatDisplayPrice";

type Props = {
  memberList: MemberAccounts[];
  periodType: string;
  period: number;
};

// üå†ÂêÑ„É°„É≥„Éê„Éº„ÅÆ„Éç„ÇøË°®„Çí‰∏ÄË¶ß„ÅßË°®Á§∫„Åô„Çã„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const ScreenDealBoardsMemo = ({ memberList, periodType, period }: Props) => {
  const userProfileState = useDashboardStore((state) => state.userProfileState);
  const isOpenCongratulationsModal = useDashboardStore((state) => state.isOpenCongratulationsModal);
  const setIsOpenCongratulationsModal = useDashboardStore((state) => state.setIsOpenCongratulationsModal);
  const setIsRequiredInputSoldProduct = useDashboardStore((state) => state.setIsRequiredInputSoldProduct);
  const setSelectedRowDataProperty = useDashboardStore((state) => state.setSelectedRowDataProperty);
  const setIsOpenUpdatePropertyModal = useDashboardStore((state) => state.setIsOpenUpdatePropertyModal);
  // ÈÅ∏Êäû‰∏≠„ÅÆ„Éç„Çø„Ç´„Éº„Éâ
  const selectedDealCard = useDashboardStore((state) => state.selectedDealCard);
  // „Éç„Çø„Ç´„Éº„Éâ„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´Ë°®Á§∫„Åô„ÇãÊ¶ÇË¶Å„É¢„Éº„ÉÄ„É´
  const isOpenDealCardModal = useDashboardStore((state) => state.isOpenDealCardModal);

  if (!userProfileState || !userProfileState?.company_id) return null;

  if (!periodType || !period) {
    return (
      <div className="flex-center h-[80dvh] w-[100vw]">
        {/* <SpinnerBrand bgColor="var(--color-sdb-bg)" /> */}
        <span></span>
      </div>
    );
  }

  // SalesProgress„ÅßÈÅ∏Êäû„Åï„Çå„Åü„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„ÅÆid„ÇíÂèñÂæó„Åô„Çã
  // üî∏ÂÄãÂà•„É°„É≥„Éê„Éº„ÅÆ„Éç„ÇøË°®„ÅØÊúÄÂ§ßË°®Á§∫Êï∞„Çí10‰∫∫„Åæ„Åß„Å´„Åô„Çã(ÂÄãÂà•„Å´ÈÅ∏Êäû„Åó„Å¶Ë≤†Ëç∑„ÇíÂ∞ë„Å™„Åè„Åô„Çã)
  // üîπÂÖ®Á§æ„ÅÆÂ†¥Âêà
  //  „ÉªÂÄãÂà•„ÅÆ„É°„É≥„Éê„Éº„ÅÆ„Éç„ÇøË°®ËøΩÂä†„ÅØ„Å™„Åó ÂÖ®‰Ωì„ÅÆ„Éá„Éº„Çø„ÅÆ„Åø
  // üîπ‰∫ãÊ•≠ÈÉ®„ÄÅË™≤„ÅÆÂ†¥Âêà
  //  „ÉªSalesProgress: ÂÖ®‰Ωì„Å®ÂÄãÂà•„É°„É≥„Éê„ÉºÈÅ∏Êäû ÈÅ∏Êäû„Åï„Çå„Åü„É°„É≥„Éê„Éº„ÅÆidÈÖçÂàó„ÇíuseQuery„ÅßÂèñÂæó
  //  „ÉªScreenDealBoards: useQuery„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâidÈÖçÂàó„ÇíÂèñÂæó„Åó„Å¶„ÄÅidÊï∞ÂàÜ„ÅÆDealBoard„Çíid„ÇíProps„ÅßÊ∏°„Åó„Å¶map„ÅßÂ±ïÈñã
  //  „ÉªDealBoard: ÂêÑDealBoard„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÂÜÖ„ÅßProps„ÅßÂèó„ÅëÂèñ„Å£„Åüid„Çí‰Ωø„Å£„Å¶useQuery„ÅßÂÄãÂà•„É°„É≥„Éê„Éº„ÅÆ„Éç„ÇøË°®„ÇíÂèñÂæó
  // üîπ‰øÇ„ÅÆÂ†¥Âêà
  //  „Éª‰∫∫Êï∞„ÅåÂ∞ë„Å™„ÅÑ„ÅÆ„Åß„ÄÅ„Éá„Éï„Ç©„É´„Éà„ÅßÂÖ®„Å¶„ÅÆ„É°„É≥„Éê„Éº„Å´„ÉÅ„Çß„ÉÉ„ÇØ„ÅåÂàù„ÇÅ„Åã„Çâ„Å§„ÅÑ„Å¶„ÅÑ„ÇãÂΩ¢„Å´„Åô„Çã
  // üîπ„É°„É≥„Éê„Éº„ÅÆÂ†¥Âêà
  //  „Éª„Çµ„Ç§„Éâ„ÉÜ„Éº„Éñ„É´„Åß„É°„É≥„Éê„Éº„ÇíÂèñÂæó„Åó„Å¶Ë°®Á§∫

  // ÂÖ®„Å¶„ÅÆ„Éú„Éº„Éâ„Åå„Éû„Ç¶„É≥„Éà„Åó„ÅüÂæå„Å´ProgressCircle„Çí„Éû„Ç¶„É≥„Éà„Åï„Åõ„Çã
  const [isRenderProgress, setIsRenderProgress] = useState(false);

  useEffect(() => {
    if (periodType && period) {
      setTimeout(() => {
        setIsRenderProgress(true);
        console.log("ProgressCircle„É¨„É≥„ÉÄ„É™„É≥„Ç∞");
      }, 1500);
    }
  }, []);

  // ÈÅ∏Êäû„Åï„Çå„Åü„É°„É≥„Éê„Éº„ÅÆid„ÇíDealBoard„Å´props„ÅßÊ∏°„Åô
  const activeThemeColor = useDashboardStore((state) => state.activeThemeColor);

  const FallbackDealBoard = () => {
    return (
      <div className="flex-center h-[50dvh] w-[100vw]">
        <SpinnerBrand
          bgColor="var(--color-sdb-bg)"
          bgTransition={`${activeThemeColor !== "theme-black-gradient" ? `transition-bg05` : ``}`}
        />
      </div>
    );
  };

  // ÂèóÊ≥®Ê∏à„Åø„Å´Â§âÊõ¥Âæå„Å´Ë°®Á§∫„Åô„Çã„É¢„Éº„ÉÄ„É´„ÅÆ„ÄåÂèçÊò†„Åô„Çã„Äç„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´ÂÆüË°å„Åï„Çå„ÇãÈñ¢Êï∞
  const handleClickActiveSoldModal = () => {
    setIsOpenUpdatePropertyModal(true); // Ê°à‰ª∂Á∑®ÈõÜ„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè
    setIsRequiredInputSoldProduct(true); // Ê°à‰ª∂Á∑®ÈõÜ„É¢„Éº„ÉÄ„É´„Å´ÂèóÊ≥®ÂæåÂ£≤‰∏äÂÖ•Âäõ„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊ∏°„Åô
    setIsOpenCongratulationsModal(false); // „ÅäÁ•ù„ÅÑ„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
  };
  // ÂèóÊ≥®Ê∏à„Åø„Å´Â§âÊõ¥Âæå„Å´Ë°®Á§∫„Åô„Çã„É¢„Éº„ÉÄ„É´„ÅÆ„ÄåÂèçÊò†„Åô„Çã„Äç„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´ÂÆüË°å„Åï„Çå„ÇãÈñ¢Êï∞
  const handleClickCancelSoldModal = () => {
    setSelectedRowDataProperty(null); // ÈÅ∏Êäû‰∏≠„ÅÆRowData„Çí„É™„Çª„ÉÉ„Éà
    setIsOpenCongratulationsModal(false); // „ÅäÁ•ù„ÅÑ„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
  };

  return (
    <>
      {/* <section className={`${styles.company_table_screen} h-screen w-full bg-neutral-900 text-neutral-50`}> */}
      <section className={`${styles.screen_deal_boards} transition-bg05 w-full`}>
        {/* ------------------- „Éç„ÇøË°®„Éú„Éº„Éâ ------------------- */}
        {memberList.map((memberObj, index) => {
          return (
            <Fragment key={`${index}_board`}>
              <div
                // className={`${styles.entity_board_container} bg-[red]/[0]`}
                className={`${styles.entity_board_container} bg-[red]/[0] ${
                  isRenderProgress ? `${styles.fade_bg}` : ``
                }`}
              >
                <div className={`${styles.entity_detail_container} bg-[green]/[0]`}>
                  <div className={`${styles.entity_detail_wrapper}`}>
                    <div className={`${styles.entity_detail} space-x-[12px] text-[12px]`}>
                      <AvatarIcon
                        // size={33}
                        size={36}
                        name={memberObj.profile_name ?? "Êú™Ë®≠ÂÆö"}
                        withCircle={false}
                        hoverEffect={false}
                        textSize={16}
                        // imgUrl={memberObj.avatar_url ?? null}
                      />
                      <div className={`${styles.entity_name} text-[19px] font-bold`}>
                        <span>{memberObj.profile_name}</span>
                      </div>
                      <div className={`${styles.sub_info} pt-[6px]`}>{memberObj.position_name ?? "ÂΩπËÅ∑Êú™Ë®≠ÂÆö"}</div>
                      <div className={`${styles.sub_info} pt-[6px]`}>{memberObj.assigned_employee_id_name ?? ""}</div>
                      {/* <div className={`flex flex-col justify-end `}>
                      <div className={`${styles.sub_info} pt-[0px]`}>216088</div>
                      <div className={`${styles.sub_info} pt-[0px]`}>‰ª£Ë°®ÂèñÁ∑†ÂΩπ</div>
                    </div> */}
                      {/* {isRenderProgress && (
                      <div className={`fade05 relative h-[33px] w-[33px]`} style={{ marginLeft: `24px` }}>
                        <div className="absolute bottom-[-4px] left-0">
                          <ProgressCircle
                            circleId="1"
                            textId="1"
                            progress={78}
                            size={56}
                            strokeWidth={6}
                            fontSize={12}
                            // textVerticalDirReverse={true}
                            textColor="var(--color-text-title)"
                          />
                        </div>
                      </div>
                    )} */}
                      <div
                        className={`relative !ml-[24px] !mr-[12px] flex h-full min-h-[56px] w-auto items-end bg-[red]/[0]`}
                      >
                        <div className="flex h-full min-w-[150px] items-end justify-end">
                          {/* <span className="mb-[-3px] text-[27px]">12,000,000,000</span> */}
                          <ProgressNumber
                            // targetNumber={12000000000}
                            targetNumber={6200000}
                            // targetNumber={0}
                            // startNumber={Math.round(68000 / 2)}
                            // startNumber={Number((68000 * 0.1).toFixed(0))}
                            startNumber={0}
                            duration={4000}
                            // easeFn="Quartic"
                            easeFn="Quintic"
                            fontSize={27}
                            margin="0 0 -3px 0"
                            isReady={isRenderProgress}
                            fade={`fade08_forward`}
                            // fade={`fade10_forward`}
                          />
                        </div>
                        <div className="relative h-full min-w-[33px]">
                          <div className="absolute left-[66%] top-[68%] min-h-[2px] w-[30px] translate-x-[-50%] translate-y-[-50%] rotate-[120deg] bg-[var(--color-text-title)]"></div>
                        </div>
                        <div className="mr-[12px] flex h-full min-w-max items-end justify-start">
                          <span className="text-[16px]">9,000,000</span>
                          {/* <span className="text-[16px]">12,000,000,000</span> */}
                        </div>
                      </div>
                      <div className={`relative h-[56px] w-[66px]`} style={{ margin: `0` }}>
                        <div className="absolute bottom-[-6px] right-0">
                          <ProgressCircle
                            circleId="1"
                            textId="1"
                            progress={78}
                            // progress={0}
                            duration={4000}
                            easeFn="Quartic"
                            size={66}
                            strokeWidth={7}
                            fontSize={14}
                            textColor="var(--color-text-title)"
                            isReady={isRenderProgress}
                            fade={`fade08_forward`}
                            // fade={`fade10_forward`}
                          />
                        </div>
                      </div>
                      {/* {isRenderProgress && (
                      <div
                        className={`${styles.progress_circle} relative h-[56px] w-[66px]`}
                        // style={{ marginLeft: `24px` }}
                      >
                        <div className="absolute bottom-[-6px] right-0">
                          <ProgressCircle
                            circleId="1"
                            textId="1"
                            progress={78}
                            duration={4000}
                            easeFn="Quartic"
                            size={66}
                            strokeWidth={7}
                            fontSize={14}
                            // progress={78}
                            // size={56}
                            // strokeWidth={6}
                            // fontSize={12}
                            // textVerticalDirReverse={true}
                            textColor="var(--color-text-title)"
                            isReady={isRenderProgress}
                            fade={`fade08-forward`}
                          />
                        </div>
                      </div>
                    )} */}
                    </div>
                  </div>
                  <div className={`${styles.status_col_wrapper}`}>
                    <div className={`${styles.status_flex_wrapper}`}>
                      {/* <div className={`relative mr-[12px] flex h-full w-auto items-end bg-[red]/[0]`}>
                      <span
                        className={`absolute left-[30%] top-[36%] translate-x-[-50%] translate-y-[-50%] text-[27px] `}
                      >
                        6,800,000
                      </span>
                      <span className="text-[27px] opacity-0">6,800,000</span>
                      <div className="h-full min-w-[39px] opacity-0"></div>
                      <div className="absolute left-[62%] top-[50%]  min-h-[2px] w-[56px] translate-x-[-50%] translate-y-[-50%] rotate-[139deg] bg-[white]"></div>
                      <span className={`absolute right-[0%] top-[70%] translate-y-[-50%] text-[16px] `}>
                        12,000,000
                      </span>
                      <span className="text-[16px] opacity-0">12,000,000</span>
                    </div> */}
                      {/* <div className={`relative mr-[24px] flex h-full w-auto items-end bg-[red]/[0]`}>
                      <span className="mb-[-3px] text-[27px] ">6,800,000</span>
                      <div className="h-full min-w-[33px] opacity-0"></div>
                      <div className="absolute left-[60%] top-[68%]  min-h-[2px] w-[33px] translate-x-[-50%] translate-y-[-50%] rotate-[120deg] bg-[white]"></div>
                      <span className="text-[16px] ">12,000,000</span>
                    </div>
                    {isRenderProgress && (
                      <div
                        className={`fade05 relative h-[56px] w-[66px]`}
                        // style={{ marginLeft: `24px` }}
                      >
                        <div className="absolute bottom-[-6px] right-0">
                          <ProgressCircle
                            circleId="1"
                            textId="1"
                            progress={78}
                            size={66}
                            strokeWidth={7}
                            fontSize={14}
                            // progress={78}
                            // size={56}
                            // strokeWidth={6}
                            // fontSize={12}
                            // textVerticalDirReverse={true}
                            textColor="var(--color-text-title)"
                          />
                        </div>
                      </div>
                    )} */}
                      <div className={`${styles.right_spacer}`}></div>
                    </div>
                  </div>
                </div>
                <ErrorBoundary FallbackComponent={ErrorFallback}>
                  <Suspense fallback={<FallbackDealBoard />}>
                    <DealBoard
                      companyId={userProfileState.company_id!}
                      userId={memberObj.id}
                      periodType={periodType}
                      period={period}
                    />
                  </Suspense>
                </ErrorBoundary>
              </div>
              {/* {isRenderProgress && (
                <div className="flex-center fade08_forward my-[12px] w-full px-[24px]">
                  <hr className="min-h-[1px] w-full bg-[var(--color-border-base)]" />
                </div>
              )} */}
            </Fragment>
          );
        })}

        {/* ------------------- „Éç„ÇøË°®„Éú„Éº„Éâ„Åì„Åì„Åæ„Åß ------------------- */}

        {/* ------------------- „ÉÜ„Çπ„Éà ------------------- */}
        {/* {Array(3)
          .fill(null)
          .map((_, index) => (
            <div key={`${index}_board`} className={`${styles.entity_board_container} bg-[red]/[0]`}>
              <div className={`${styles.entity_detail_container} bg-[green]/[0]`}>
                <div className={`${styles.entity_detail_wrapper}`}>
                  <div className={`${styles.entity_detail} space-x-[12px] text-[12px]`}>
                    <AvatarIcon size={33} name="‰ºäËó§Ë¨ôÂ§™" withCircle={false} hoverEffect={false} />
                    <div className={`${styles.entity_name} text-[19px] font-bold`}>
                      <span>‰ºäËó§ Ë¨ôÂ§™</span>
                    </div>
                    <div className={`${styles.sub_info} pt-[6px]`}>‰ª£Ë°®ÂèñÁ∑†ÂΩπ</div>
                    <div className={`${styles.sub_info} pt-[6px]`}>216088</div>
                  </div>
                </div>
              </div>
              <DealBoard />
            </div>
          ))} */}
        {/* ------------------- „ÉÜ„Çπ„Éà„Åì„Åì„Åæ„Åß ------------------- */}
      </section>
      {/* ------------------- „Éç„ÇøË°® Ë©≥Á¥∞„ÉªÁ∑®ÈõÜ„É¢„Éº„ÉÄ„É´ ------------------- */}
      {isOpenDealCardModal && selectedDealCard && <EditModalDealCard />}
      {/* ------------------- „Éç„ÇøË°® Ë©≥Á¥∞„ÉªÁ∑®ÈõÜ„É¢„Éº„ÉÄ„É´ „Åì„Åì„Åæ„Åß ------------------- */}
      {/* ------------------- ÂèóÊ≥®Ê∏à„Åø„Å´Â§âÊõ¥Âæå„ÅÆÂ£≤‰∏äÂÖ•Âäõ„É¢„Éº„ÉÄ„É´ ------------------- */}
      {isOpenCongratulationsModal && (
        <ErrorBoundary FallbackComponent={ErrorFallback}>
          <Suspense fallback={<FallbackDealBoard />}>
            <GradientModal
              title1="ÂèóÊ≥®„Åä„ÇÅ„Åß„Å®„ÅÜüéâ"
              title2="„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´Â£≤‰∏ä„ÇíÂèçÊò†„Åï„Åõ„Åæ„Åó„Çá„ÅÜÔºÅ"
              tagText="ÂèóÊ≥®"
              contentText="ÂèóÊ≥®Ê∏à„Åø„ÅÆÊ°à‰ª∂„Å´„ÄåÂ£≤‰∏äÂïÜÂìÅ„ÉªÂ£≤‰∏ä‰æ°Ê†º„ÉªÂ£≤‰∏äÊó•‰ªò„Äç„ÇíË®òÈå≤„Åô„Çã„Åì„Å®„Åß„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ‰∏ä„Å´Â£≤‰∏äÂÆüÁ∏æ„Å®ÈÅîÊàêÁéá„ÅåÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ"
              btnActiveText="ÂèçÊò†„Åô„Çã"
              btnCancelText="Èñâ„Åò„Çã"
              illustText="ÂèóÊ≥®„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ"
              handleClickActive={handleClickActiveSoldModal}
              handleClickCancel={handleClickCancelSoldModal}
            />
          </Suspense>
        </ErrorBoundary>
      )}
      {/* ------------------- ÂèóÊ≥®Ê∏à„Åø„Å´Â§âÊõ¥Âæå„ÅÆÂ£≤‰∏äÂÖ•Âäõ„É¢„Éº„ÉÄ„É´ „Åì„Åì„Åæ„Åß ------------------- */}
    </>
  );
};

export const ScreenDealBoards = memo(ScreenDealBoardsMemo);
