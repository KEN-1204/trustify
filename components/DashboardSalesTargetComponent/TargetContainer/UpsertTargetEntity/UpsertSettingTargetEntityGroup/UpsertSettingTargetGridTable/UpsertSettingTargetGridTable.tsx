import { CSSProperties, Dispatch, SetStateAction, memo, useEffect, useMemo, useState } from "react";
import styles from "../../../../DashboardSalesTargetComponent.module.css";
import useDashboardStore from "@/store/useDashboardStore";
import {
  columnHeaderListTarget,
  formatColumnName,
  formatRowName,
  formatRowNameShort,
  rowHeaderListTarget,
} from "../UpsertSettingTargetEntityGroup";
import { ProgressCircle } from "@/components/Parts/Charts/ProgressCircle/ProgressCircle";
import { ProgressNumber } from "@/components/Parts/Charts/ProgressNumber/ProgressNumber";
import { SparkChart } from "@/components/Parts/Charts/SparkChart/SparkChart";
import useStore from "@/store";
import { formatDisplayPrice } from "@/utils/Helpers/formatDisplayPrice";
import { isValidNumber } from "@/utils/Helpers/isValidNumber";
import { checkNotFalsyExcludeZero } from "@/utils/Helpers/checkNotFalsyExcludeZero";
import { convertToYen } from "@/utils/Helpers/convertToYen";
import { calculateYearOverYear } from "@/utils/Helpers/PercentHelpers/calculateYearOverYear";
import { TbSnowflake, TbSnowflakeOff } from "react-icons/tb";
import {
  Department,
  FiscalYearMonthObjForTarget,
  MemberAccounts,
  Office,
  SalesSummaryYearHalf,
  SalesTargetUpsertColumns,
  Section,
  SparkChartObj,
  Unit,
} from "@/types";
import { useQuerySalesSummaryAndGrowth } from "@/hooks/useQuerySalesSummaryAndGrowth";
import { toast } from "react-toastify";
import Decimal from "decimal.js";
import { cloneDeep } from "lodash";
import { HiOutlineSwitchHorizontal } from "react-icons/hi";
import { useQueryClient } from "@tanstack/react-query";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import { SpinnerX } from "@/components/Parts/SpinnerX/SpinnerX";
import { FallbackScrollContainer } from "../../../SalesTargetsContainer/SalesTargetGridTable/FallbackScrollContainer";

/**
 *   "period_type",
  "sales_target",
  "share",
  "yoy_growth",
  "yo2y_growth",
  "last_year_sales",
  "two_years_ago_sales",
  "three_years_ago_sales",
  "sales_trend",
 */

type Props = {
  isEndEntity: boolean;
  entityLevel: string;
  entityNameTitle: string;
  entityId: string;
  stickyRow: string | null;
  setStickyRow: Dispatch<SetStateAction<string | null>>;
  annualFiscalMonths: FiscalYearMonthObjForTarget | null;
  isFirstHalf: boolean | undefined;
  isMainTarget: boolean; // „É°„Ç§„É≥ÁõÆÊ®ô„Åã„Å©„ÅÜ„Åã
  fetchEnabled?: boolean; // „É°„Ç§„É≥ÁõÆÊ®ô„Åß„Å™„ÅÑÂ†¥Âêà„ÅØfetchEnabled„Ååtrue„Å´Â§âÊõ¥„Åï„Çå„Åü„Çâ„Éï„Çß„ÉÉ„ÉÅ„ÇíË®±ÂèØ„Åô„Çã
  onFetchComplete?: () => void;
  subTargetList?: Department[] | Section[] | Unit[] | Office[] | MemberAccounts[];
  setSubTargetList?: Dispatch<SetStateAction<Department[] | Section[] | Unit[] | Office[] | MemberAccounts[]>>;
};

const UpsertSettingTargetGridTableMemo = ({
  isEndEntity,
  entityLevel,
  entityNameTitle,
  entityId,
  stickyRow,
  setStickyRow,
  // fiscalYearMonthsForThreeYear,
  annualFiscalMonths,
  isFirstHalf,
  isMainTarget = false,
  fetchEnabled,
  onFetchComplete,
  subTargetList,
  setSubTargetList,
}: // startYearMonth,
// endYearMonth,
Props) => {
  const queryClient = useQueryClient();
  const supabase = useSupabaseClient();
  const language = useStore((state) => state.language);
  const userProfileState = useDashboardStore((state) => state.userProfileState);
  const upsertTargetObj = useDashboardStore((state) => state.upsertTargetObj);

  const [isLoading, setIsLoading] = useState(false);

  if (!upsertTargetObj || !userProfileState || !userProfileState.company_id) return;

  // „ÄåÂçäÊúü„ÄúÊúàÂ∫¶„Äç
  if (isEndEntity && !annualFiscalMonths) return null;

  // --------------------- üåüÈÅéÂéª3Âπ¥ÂàÜ„ÅÆÂ£≤‰∏ä„Å®ÂâçÂπ¥Â∫¶„ÅÆÂâçÂπ¥‰º∏„Å≥ÁéáÂÆüÁ∏æ„ÇíÂèñÂæó„Åô„ÇãuseQueryüåü ---------------------
  const {
    data: salesSummaryRowData,
    error: salesSummaryError,
    isLoading: isLoadingQuery,
    isSuccess: isSuccessQuery,
    isError: isErrorQuery,
  } = useQuerySalesSummaryAndGrowth({
    companyId: userProfileState.company_id,
    entityLevel: entityLevel,
    entityId: entityId,
    periodType: isEndEntity ? `half_monthly` : `year_half`,
    fiscalYear: upsertTargetObj.fiscalYear,
    isFirstHalf: isFirstHalf,
    annualFiscalMonths: annualFiscalMonths,
    fetchEnabled: isMainTarget ? true : fetchEnabled, // „É°„Ç§„É≥ÁõÆÊ®ô„ÅØtrue, „Åß„Å™„Åë„Çå„Å∞fetchEnabled„Å´Âæì„ÅÜ
  });
  // --------------------- üåüÈÅéÂéª3Âπ¥ÂàÜ„ÅÆÂ£≤‰∏ä„Å®ÂâçÂπ¥Â∫¶„ÅÆÂâçÂπ¥‰º∏„Å≥ÁéáÂÆüÁ∏æ„ÇíÂèñÂæó„Åô„ÇãuseQueryüåü „Åì„Åì„Åæ„Åß ---------------------

  // ---------------- useQuery„Åß„Éï„Çß„ÉÉ„ÉÅ„ÅåÂÆå‰∫Ü„Åó„Åü„Çâ ----------------
  useEffect(() => {
    if (isSuccessQuery || isErrorQuery) {
      if (onFetchComplete) onFetchComplete();
    }
  }, [isSuccessQuery, isErrorQuery]);

  // ---------------- „É≠„Éº„Ç´„É´state ----------------
  // Â£≤‰∏äÁõÆÊ®ôinput „ÄåÂπ¥Â∫¶„Éª‰∏äÂçäÊúü„Éª‰∏ãÂçäÊúü„Äç
  const [inputSalesTargetYear, setInputSalesTargetYear] = useState("");
  const [inputSalesTargetFirstHalf, setInputSalesTargetFirstHalf] = useState("");
  const [inputSalesTargetSecondHalf, setInputSalesTargetSecondHalf] = useState("");
  // ÂâçÂπ¥ÊØîinput „ÄåÂπ¥Â∫¶„Éª‰∏äÂçäÊúü„Éª‰∏ãÂçäÊúü„Äç
  const [inputYoYGrowthYear, setInputYoYGrowthYear] = useState<string>("");
  const [inputYoYGrowthFirstHalf, setInputYoYGrowthFirstHalf] = useState<string>("");
  const [inputYoYGrowthSecondHalf, setInputYoYGrowthSecondHalf] = useState<string>("");
  // ‰∏äÂçäÊúü„ÅÆ„Ç∑„Çß„Ç¢
  const [shareFirstHalf, setShareFirstHalf] = useState<number>(0);
  // ‰∏ãÂçäÊúü„ÅÆ„Ç∑„Çß„Ç¢
  const [shareSecondHalf, setShareSecondHalf] = useState<number>(0);
  // Â£≤‰∏äÊé®Áßª(Âπ¥Â∫¶„Éª‰∏äÊúü„ÄÅ‰∏ãÊúü)
  const [salesTrendsYear, setSalesTrendsYear] = useState<(SparkChartObj & { updateAt: number }) | null>(() => {
    if (!salesSummaryRowData) return null;
    const initialData = salesSummaryRowData.find((obj) => obj.period_type === "fiscal_year")?.sales_trend ?? null;
    return initialData ? { ...initialData, updateAt: Date.now() } : null;
  });
  const [salesTrendsFirstHalf, setSalesTrendsFirstHalf] = useState(() => {
    if (!salesSummaryRowData) return null;
    const initialData = salesSummaryRowData.find((obj) => obj.period_type === "first_half")?.sales_trend ?? null;
    return initialData ? { ...initialData, updateAt: Date.now() } : null;
  });
  const [salesTrendsSecondHalf, setSalesTrendsSecondHalf] = useState(() => {
    if (!salesSummaryRowData) return null;
    const initialData = salesSummaryRowData.find((obj) => obj.period_type === "second_half")?.sales_trend ?? null;
    return initialData ? { ...initialData, updateAt: Date.now() } : null;
  });

  useEffect(() => {
    if (salesSummaryRowData) {
      if (salesTrendsYear && salesTrendsFirstHalf && salesTrendsSecondHalf) return;
      const newSalesTrendsYear =
        salesSummaryRowData.find((obj) => obj.period_type === "fiscal_year")?.sales_trend ?? null;
      const newSalesTrendsFirstHalf =
        salesSummaryRowData.find((obj) => obj.period_type === "first_half")?.sales_trend ?? null;
      const newSalesTrendsSecondHalf =
        salesSummaryRowData.find((obj) => obj.period_type === "second_half")?.sales_trend ?? null;
      setSalesTrendsYear(newSalesTrendsYear ? { ...newSalesTrendsYear, updateAt: Date.now() } : null);
      setSalesTrendsFirstHalf(newSalesTrendsFirstHalf ? { ...newSalesTrendsFirstHalf, updateAt: Date.now() } : null);
      setSalesTrendsSecondHalf(newSalesTrendsSecondHalf ? { ...newSalesTrendsSecondHalf, updateAt: Date.now() } : null);
    }
  }, [salesSummaryRowData]);

  const inputSalesTargetsList = [
    {
      key: "fiscal_year",
      title: { ja: "Âπ¥Â∫¶", en: "Fiscal Year" },
      inputTarget: inputSalesTargetYear,
      setInputTarget: setInputSalesTargetYear,
      inputYoYGrowth: inputYoYGrowthYear,
      setInputYoYGrowth: setInputYoYGrowthYear,
      salesTrends: salesTrendsYear,
      setSalesTrends: setSalesTrendsYear,
    },
    {
      key: "first_half",
      title: { ja: "‰∏äÂçäÊúü", en: "H1" },
      inputTarget: inputSalesTargetFirstHalf,
      setInputTarget: setInputSalesTargetFirstHalf,
      inputYoYGrowth: inputYoYGrowthFirstHalf,
      setInputYoYGrowth: setInputYoYGrowthFirstHalf,
      salesTrends: salesTrendsFirstHalf,
      setSalesTrends: setSalesTrendsFirstHalf,
    },
    {
      key: "second_half",
      title: { ja: "‰∏ãÂçäÊúü", en: "H2" },
      inputTarget: inputSalesTargetSecondHalf,
      setInputTarget: setInputSalesTargetSecondHalf,
      inputYoYGrowth: inputYoYGrowthSecondHalf,
      setInputYoYGrowth: setInputYoYGrowthSecondHalf,
      salesTrends: salesTrendsSecondHalf,
      setSalesTrends: setSalesTrendsSecondHalf,
    },
  ];
  type RowHeaderNameYearHalf = "fiscal_year" | "first_half" | "second_half";
  // const mappingInputSalesTargets: {
  //   [K in RowHeaderNameYearHalf]: {
  //     [K in "key" | "title" | "inputTarget" | "setInputTarget" | "inputYoYGrowth" | "setInputYoYGrowth"]: any;
  //   };
  // } = {
  //   fiscal_year: {
  //     key: "fiscal_year",
  //     title: { ja: "Âπ¥Â∫¶", en: "Fiscal Year" },
  //     inputTarget: inputSalesTargetYear,
  //     setInputTarget: setInputSalesTargetYear,
  //     inputYoYGrowth: inputYoYGrowthYear,
  //     setInputYoYGrowth: setInputYoYGrowthYear,
  //   },
  //   first_half: {
  //     key: "first_half",
  //     title: { ja: "‰∏äÂçäÊúü", en: "H1" },
  //     inputTarget: inputSalesTargetFirstHalf,
  //     setInputTarget: setInputSalesTargetFirstHalf,
  //     inputYoYGrowth: inputYoYGrowthFirstHalf,
  //     setInputYoYGrowth: setInputYoYGrowthFirstHalf,
  //   },
  //   second_half: {
  //     key: "second_half",
  //     title: { ja: "‰∏ãÂçäÊúü", en: "H2" },
  //     inputTarget: inputSalesTargetSecondHalf,
  //     setInputTarget: setInputSalesTargetSecondHalf,
  //     inputYoYGrowth: inputYoYGrowthSecondHalf,
  //     setInputYoYGrowth: setInputYoYGrowthSecondHalf,
  //   },
  // };
  // // Âûã„Ç¨„Éº„ÉâÈñ¢Êï∞
  // function isRowHeaderNameYearHalf(value: any): value is RowHeaderNameYearHalf {
  //   return ["fiscal_year", "first_half", "second_half"].includes(value);
  // }
  // function isRowHeaderObjProp(
  //   value: any
  // ): value is "key" | "title" | "inputTarget" | "setInputTarget" | "inputYoYGrowth" | "setInputYoYGrowth" {
  //   return ["key", "title", "inputTarget", "setInputTarget", "inputYoYGrowth", "setInputYoYGrowth"].includes(
  //     value
  //   );
  // }

  // ---------------- Â§âÊï∞ ----------------
  // üåüÂêÑË°å„Éá„Éº„Çø„ÅÆ„Ç´„É©„É†„ÇíË£úÂÆå„Åó„Å¶ÂÜçÁîüÊàê„Åô„Çã„Éë„Çø„Éº„É≥
  // const allRows = useMemo(() => {
  //   return salesSummaryRowData
  //     ? salesSummaryRowData.map((row, index) => {
  //         let _share = 100;
  //         let _yoy_growth = inputYoYGrowthYear;
  //         let _sales_target = inputSalesTargetYear;
  //         let _sales_trend: SparkChartObj = {
  //           title: "Â£≤‰∏ä",
  //           subTitle: "‰º∏„Å≥Áéá",
  //           mainValue: row.last_year_sales,
  //           growthRate: row.yo2y_growth ? row.yo2y_growth.toFixed(1) : null,
  //           data: [],
  //         };
  //         if (!isEndEntity) {
  //           if (row.period_type === "fiscal_year") {
  //             _share = 100;
  //             _yoy_growth = inputYoYGrowthYear;
  //             _sales_target = inputSalesTargetYear;
  //             _sales_trend = {
  //               ..._sales_trend,
  //               data: Array(3)
  //                 .fill(null)
  //                 .map((_, index) => {
  //                   let sales = row.last_year_sales;
  //                   if (index === 1) sales = row.two_years_ago_sales;
  //                   if (index === 2) sales = row.three_years_ago_sales;
  //                   return {
  //                     date: upsertTargetObj.fiscalYear - index - 1,
  //                     value: sales,
  //                   };
  //                 }),
  //             };
  //           }
  //           if (row.period_type === "first_half") {
  //             _share = shareFirstHalf;
  //             _yoy_growth = inputYoYGrowthFirstHalf;
  //             _sales_target = inputSalesTargetFirstHalf;
  //             _sales_trend = {
  //               ..._sales_trend,
  //               data: Array(3)
  //                 .fill(null)
  //                 .map((_, index) => {
  //                   let sales = row.last_year_sales;
  //                   if (index === 1) sales = row.two_years_ago_sales;
  //                   if (index === 2) sales = row.three_years_ago_sales;
  //                   return {
  //                     date: (upsertTargetObj.fiscalYear - index - 1) * 10 + 1,
  //                     value: sales,
  //                   };
  //                 }),
  //             };
  //           } else if (row.period_type === "second_half") {
  //             _share = shareSecondHalf;
  //             _yoy_growth = inputYoYGrowthSecondHalf;
  //             _sales_target = inputSalesTargetSecondHalf;
  //             _sales_trend = {
  //               ..._sales_trend,
  //               data: Array(3)
  //                 .fill(null)
  //                 .map((_, index) => {
  //                   let sales = row.last_year_sales;
  //                   if (index === 1) sales = row.two_years_ago_sales;
  //                   if (index === 2) sales = row.three_years_ago_sales;
  //                   return {
  //                     date: (upsertTargetObj.fiscalYear - index - 1) * 10 + 2,
  //                     value: sales,
  //                   };
  //                 }),
  //             };
  //           }
  //         }
  //         return {
  //           ...row,
  //           share: _share,
  //           yoy_growth: _yoy_growth,
  //           sales_target: _sales_target,
  //           sales_trend: _sales_trend
  //         } as SalesTargetUpsertColumns;
  //       })
  //     : [];
  // }, [salesSummaryRowData])

  // ===================== üåü„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó 3ÁÇπ„É™„Éº„ÉÄ„Éº„ÅÆÊôÇ„Å´„ÉÑ„Éº„É´„ÉÅ„ÉÉ„ÉóË°®Á§∫üåü =====================
  const hoveredItemPos = useStore((state) => state.hoveredItemPos);
  const setHoveredItemPos = useStore((state) => state.setHoveredItemPos);
  type TooltipParams = {
    e: React.MouseEvent<HTMLElement, MouseEvent>;
    display: string;
    content: string;
    content2?: string | undefined | null;
    marginTop?: number;
    itemsPosition?: string;
  };
  const handleOpenTooltip = ({
    e,
    display,
    content,
    content2,
    marginTop = 0,
    itemsPosition = "center",
  }: TooltipParams) => {
    // „Éõ„Éê„Éº„Åó„Åü„Ç¢„Ç§„ÉÜ„É†„Å´„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÇíË°®Á§∫
    const { x, y, width, height } = e.currentTarget.getBoundingClientRect();
    // console.log("„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éóx, y width , height", x, y, width, height);

    setHoveredItemPos({
      x: x,
      y: y,
      itemWidth: width,
      itemHeight: height,
      content: content,
      content2: content2,
      display: display,
      marginTop: marginTop,
      itemsPosition: itemsPosition,
    });
  };
  // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÇíÈùûË°®Á§∫
  const handleCloseTooltip = () => {
    if (hoveredItemPos) setHoveredItemPos(null);
  };
  // ==================================================================================

  // ---------------- Èñ¢Êï∞ ----------------
  // row„ÅÆÂÄ§„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™„Ç∑„Çß„Ç¢„ÇíËøî„ÅôÈñ¢Êï∞
  const getShare = (row: string) => {
    switch (row) {
      case "fiscal_year":
        return 100;
      case "first_half":
        return shareFirstHalf;
      case "second_half":
        return shareSecondHalf;
      default:
        return 0;
        break;
    }
  };

  // Ë°å„Éò„ÉÉ„ÉÄ„Éº„ÅÆÂÄ§(ÊúüÈñì„Çø„Ç§„Éó)„Å®„Å®Âàó„Éò„ÉÉ„ÉÄ„Éº„ÅÆÂÄ§„Å´Âøú„Åò„Å¶Ë°®Á§∫„Åô„ÇãÂÄ§„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åô„Çã
  const formatDisplayValue = (row: SalesSummaryYearHalf, column: string) => {
    switch (column) {
      case "last_year_sales":
      case "two_years_ago_sales":
      case "three_years_ago_sales":
        return formatDisplayPrice(row[column]);
        break;
      //   // Â£≤‰∏äÁõÆÊ®ô
      // case 'sales_target':
      //   if (isRowHeaderNameYearHalf(row.period_type)) return;

      // case "yoy_growth":
      //   if (isRowHeaderNameYearHalf(row.period_type)) return mappingInputSalesTargets[row.period_type].inputYoYGrowth;
      //   break
      case "yo2y_growth":
        if (row.yo2y_growth === null || !isValidNumber(row.yo2y_growth)) return `- %`;
        return `${row.yo2y_growth.toFixed(1)}%`;
        break;

      default:
        break;
    }
  };

  // „Çµ„ÉñÁõÆÊ®ô„É™„Çπ„Éà„Åã„ÇâÈÉ®ÈñÄ„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„ÇíÂâäÈô§(target_type„Çínull„Å´Â§âÊõ¥)
  const handleRemoveFromTargetList = async () => {
    if (!subTargetList) return;
    if (!setSubTargetList) return;
    // „Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„Çø„Ç§„Éó„Åã„Çâupdate„Åô„Çã„ÉÜ„Éº„Éñ„É´„ÇíÁ¢∫ÂÆö
    let updatedTable = "";
    if (entityLevel === "department") updatedTable = "departments";
    if (entityLevel === "section") updatedTable = "sections";
    if (entityLevel === "unit") updatedTable = "units";
    if (entityLevel === "office") updatedTable = "offices";
    if (entityLevel === "member") updatedTable = "profiles";
    if (entityLevel === "") return alert("ÈÉ®ÈñÄ„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ");

    const updatedPayload = { target_type: null };

    setIsLoading(true); // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÈñãÂßã

    try {
      console.log("ÂâäÈô§ÂÆüË°åüî• updatedTable", updatedTable, entityId);
      const { error } = await supabase.from(updatedTable).update(updatedPayload).eq("id", entityId);

      if (error) throw error;

      // „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„Çµ„ÉñÁõÆÊ®ô„É™„Çπ„Éà„Åã„ÇâÈÉ®ÈñÄ„ÇíÂâäÈô§
      // const periodType = isEndEntity ? `half_monthly` : `year_half`;
      // const fiscalYear = upsertTargetObj.fiscalYear;
      // const queryKey = ["sales_summary_and_growth", entityLevel, entityId, periodType, fiscalYear, isFirstHalf];

      // „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆÈÉ®ÈñÄ„Åã„Çâsales_target„Çínull„Å´Êõ¥Êñ∞„Åô„Çã
      let queryKey = "departments";
      if (entityLevel === "department") queryKey = "departments";
      if (entityLevel === "section") queryKey = "sections";
      if (entityLevel === "unit") queryKey = "units";
      if (entityLevel === "office") queryKey = "offices";
      if (entityLevel === "member") queryKey = "member_accounts";
      const prevCache = queryClient.getQueryData([queryKey]) as
        | Department[]
        | Section[]
        | Unit[]
        | Office[]
        | MemberAccounts[];
      const newCache = [...prevCache]; // „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„Ç∑„É£„É≠„Éº„Ç≥„Éî„Éº„Çí‰ΩúÊàê
      // Êõ¥Êñ∞ÂØæË±°„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆtarget_type„Çínull„Å´Â§âÊõ¥
      const updateIndex = newCache.findIndex((obj) => obj.id === entityId);
      if (updateIndex !== -1) {
        // Êõ¥Êñ∞ÂØæË±°„ÅÆÈÖçÂàóÂÜÖ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÂ§â„Åà„Åö„Å´ÂØæË±°„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„ÅÆ„ÅøÂ§âÊõ¥
        newCache.splice(updateIndex, 1, { ...prevCache[updateIndex], target_type: null });
        queryClient.setQueryData([queryKey], newCache); // „Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÊõ¥Êñ∞
      }

      // Âõ∫ÂÆö„Åó„Å¶„ÅÑ„ÅüÂ†¥Âêà„ÅØÂõ∫ÂÆö„ÇíËß£Èô§
      if (stickyRow === entityId) {
        setStickyRow(null);
      }

      setIsLoading(false); // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁµÇ‰∫Ü

      // „Çµ„ÉñÁõÆÊ®ô„É™„Çπ„Éà„Åã„ÇâÂâäÈô§
      const newList = [...subTargetList].filter((obj) => obj.id !== entityId) as
        | Department[]
        | Section[]
        | Unit[]
        | Office[]
        | MemberAccounts[];
      setSubTargetList(newList);

      toast.success(`${entityNameTitle}„ÇíÁõÆÊ®ô„É™„Çπ„Éà„Åã„ÇâÂâäÈô§„Åó„Åæ„Åó„Åüüåü`);
    } catch (error: any) {
      console.error("„Ç®„É©„ÉºÔºö", error);
      toast.error("ÁõÆÊ®ô„É™„Çπ„Éà„Åã„Çâ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü...üôá‚Äç‚ôÄÔ∏è");
    }
  };

  // „ÉÅ„É£„Éº„Éà „Éû„Ç¶„É≥„Éà„Çí0.6sÈÅÖ„Çâ„Åõ„Çã
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => {
    if (isMounted) return;
    setTimeout(() => {
      setIsMounted(true);
    }, 600);
  }, []);

  console.log(
    "UpsertSettingTargetGridTable„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„É¨„É≥„ÉÄ„É™„É≥„Ç∞",
    "entityNameTitle",
    entityNameTitle
    // "entityLevel",
    // entityLevel,
    // "annualFiscalMonths",
    // annualFiscalMonths,
    // "isFirstHalf",
    // isFirstHalf,
    // "salesSummaryRowData",
    // salesSummaryRowData,
    // "inputSalesTargetsList",
    // inputSalesTargetsList,
    // "salesSummaryError",
    // salesSummaryError,
    // "isLoadingQuery",
    // isLoadingQuery
  );

  if (isLoadingQuery) return <FallbackScrollContainer title={entityNameTitle} />;

  return (
    <>
      <div className={`${styles.grid_row} ${styles.col1} fade08_forward`}>
        <div className={`${styles.grid_content_card} relative`}>
          {isLoading && (
            <div className={`flex-center absolute left-0 top-0 z-[50] h-full w-full rounded-[12px] bg-[#00000090]`}>
              <SpinnerX />
            </div>
          )}
          <div className={`${styles.card_title_area}`}>
            {/* <div className={`${styles.card_title_wrapper} space-x-[24px]`}>
                <div className={`${styles.card_title}`}>
                  <span>Á∑èÂêàÁõÆÊ®ô</span>
                </div>
                <div className={`${styles.card_title} pb-[1px]`}>
                  <span>{upsertTargetObj.entityName}</span>
                  <div className={`absolute bottom-0 left-0 min-h-[2px] w-full bg-[var(--color-bg-brand-f)]`} />
                </div>
              </div> */}
            <div className={`${styles.card_title}`}>
              <span>{entityNameTitle}</span>
            </div>

            <div className={`${styles.btn_area} flex items-center space-x-[12px]`}>
              {!isMainTarget && (
                <div
                  className={`${styles.btn} ${styles.basic} space-x-[4px]`}
                  onMouseEnter={(e) => {
                    handleOpenTooltip({
                      e: e,
                      display: "top",
                      content: `ÁõÆÊ®ô„É™„Çπ„Éà„Åã„ÇâÂâäÈô§`,
                      marginTop: 9,
                    });
                  }}
                  onMouseLeave={handleCloseTooltip}
                  onClick={handleRemoveFromTargetList}
                >
                  <HiOutlineSwitchHorizontal />
                  <span>ÂâäÈô§</span>
                </div>
              )}
              <div
                className={`${styles.btn} ${styles.basic} space-x-[4px]`}
                onMouseEnter={(e) => {
                  handleOpenTooltip({
                    e: e,
                    display: "top",
                    content: stickyRow === entityId ? `Âõ∫ÂÆö„ÇíËß£Èô§` : `ÁîªÈù¢ÂÜÖ„Å´Âõ∫ÂÆö`,
                    marginTop: 9,
                  });
                }}
                onMouseLeave={handleCloseTooltip}
                onClick={() => {
                  if (entityId === stickyRow) {
                    setStickyRow(null);
                  } else {
                    setStickyRow(entityId);
                  }
                  handleCloseTooltip();
                }}
              >
                {stickyRow === entityId && <TbSnowflakeOff />}
                {stickyRow !== entityId && <TbSnowflake />}
                {stickyRow === entityId && <span>Ëß£Èô§</span>}
                {stickyRow !== entityId && <span>Âõ∫ÂÆö</span>}
              </div>
            </div>
          </div>
          {/* ------------------ „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„Éä ------------------ */}
          <div className={`${styles.main_container}`}>
            {/* ------------------ Grid„Ç≥„É≥„ÉÜ„Éä ------------------ */}
            <div
              role="grid"
              className={`${styles.grid_scroll_container}`}
              style={
                {
                  "--template-columns": `80px 240px 48px repeat(2, 100px) repeat(3, 150px) minmax(180px, 1fr)`,
                  "--header-row-height": `35px`,
                  "--grid-row-height": `56px`,
                  "--row-width": `100%`,
                } as CSSProperties
              }
            >
              {/* ----------- „Éò„ÉÉ„ÉÄ„Éº ----------- */}
              <div
                role="row"
                tabIndex={-1}
                aria-rowindex={1}
                aria-selected={false}
                className={`${styles.grid_header_row}`}
              >
                {columnHeaderListTarget.map((column, colIndex) => {
                  let displayValue = formatColumnName(column, upsertTargetObj.fiscalYear)[language];
                  return (
                    <div
                      key={colIndex}
                      role="columnheader"
                      aria-colindex={colIndex + 1}
                      aria-selected={false}
                      tabIndex={-1}
                      className={`${styles.grid_column_header_all}`}
                      style={{ gridColumnStart: colIndex + 1, ...(column === "share" && { padding: `0px` }) }}
                    >
                      <div className={`${styles.grid_column_header_inner} pointer-events-none`}>
                        {!(column === "yo2y_growth" && language === "ja") && (
                          <span
                            className={`${styles.grid_column_header_inner_name} pointer-events-none ${
                              column === "sales_target" && `${styles.sales_target}`
                            }`}
                          >
                            {displayValue}
                          </span>
                        )}
                        {column === "yo2y_growth" && language === "ja" && (
                          <>
                            <span className={`${styles.grid_column_header_inner_name} pointer-events-none`}>
                              ÂâçÂπ¥Â∫¶
                            </span>
                            <span className={`${styles.grid_column_header_inner_name} pointer-events-none`}>
                              ÂâçÂπ¥‰º∏„Å≥ÁéáÂÆüÁ∏æ
                            </span>
                          </>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
              {/* ----------- „Éò„ÉÉ„ÉÄ„Éº „Åì„Åì„Åæ„Åß ----------- */}
              {/* ----------- rowgroup ----------- */}
              <div role="rowgroup">
                {/* ----------- Row Âπ¥Â∫¶„ÉªÂçäÊúü„É™„Çπ„Éà ----------- */}
                {/* {rowHeaderListTarget.map((row, rowIndex) => { */}
                {salesSummaryRowData &&
                  salesSummaryRowData.map((row, rowIndex) => {
                    // const rowHeaderName = formatRowName(row, upsertTargetObj.fiscalYear)[language];
                    const rowHeaderName = formatRowName(row.period_type, upsertTargetObj.fiscalYear)[language];
                    return (
                      <div key={`grid_row_${rowIndex}`} role="row" className={`${styles.row}`}>
                        {columnHeaderListTarget.map((column, colIndex) => {
                          // let displayValue = formatRowCell(column, upsertTargetObj.fiscalYear)[language];
                          // Â£≤‰∏äÁõÆÊ®ô
                          const inputSalesTarget = inputSalesTargetsList[rowIndex].inputTarget;
                          const setInputSalesTarget = inputSalesTargetsList[rowIndex].setInputTarget;
                          // ÂâçÂπ¥ÊØî
                          const inputYoYGrowth = inputSalesTargetsList[rowIndex].inputYoYGrowth;
                          const setInputYoYGrowth = inputSalesTargetsList[rowIndex].setInputYoYGrowth;
                          // Â£≤‰∏äÊé®Áßª
                          const salesTrends = inputSalesTargetsList[rowIndex].salesTrends;
                          const setSalesTrends = inputSalesTargetsList[rowIndex].setSalesTrends;

                          // Ë°å„ÅÆÊúüÈñì„Çø„Ç§„Éó„Å®„Ç´„É©„É†„ÅÆÂÄ§„Å´Âøú„Åò„Å¶Ë°®Á§∫„Åô„Çã„Éá„Éº„Çø„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
                          const displayCellValue = formatDisplayValue(row, column);
                          return (
                            <div
                              key={colIndex}
                              role="gridcell"
                              aria-colindex={colIndex + 1}
                              aria-selected={false}
                              tabIndex={-1}
                              className={`${styles.grid_cell}`}
                              style={{
                                gridColumnStart: colIndex + 1,
                                ...(column === "share" && { padding: `0px` }),
                              }}
                            >
                              {column === "period_type" && <span>{rowHeaderName}</span>}
                              {column === "sales_target" && row.period_type !== "second_half" && (
                                <input
                                  type="text"
                                  // placeholder="‰æãÔºö600‰∏áÂÜÜ ‚Üí 6000000„ÄÄ‚ÄªÂçäËßí„ÅßÂÖ•Âäõ"
                                  className={`${styles.input_box} ${styles.upsert}`}
                                  // value={inputDiscountAmountEdit ? inputDiscountAmountEdit : ""}
                                  value={inputSalesTarget ? inputSalesTarget : ""}
                                  onChange={(e) => {
                                    setInputSalesTarget(e.target.value);
                                  }}
                                  onFocus={() => {
                                    // Â£≤‰∏äÁõÆÊ®ô„Åå0‰ª•Â§ñ„ÅÆfalsy„Å™„Çâ„É™„Çø„Éº„É≥
                                    if (!isValidNumber(inputSalesTarget.replace(/[^\d.]/g, ""))) {
                                      console.log(
                                        "„É™„Çø„Éº„É≥inputSalesTarget",
                                        inputSalesTarget,
                                        !isValidNumber(inputSalesTarget)
                                      );
                                      return;
                                    }
                                    console.log("„Åì„Åì„ÅìinputSalesTarget", inputSalesTarget);
                                    // „Éï„Ç©„Éº„Ç´„ÇπÊôÇ„ÅØÊï∞Â≠ó„Å®Â∞èÊï∞ÁÇπ‰ª•Â§ñÈô§Âéª
                                    setInputSalesTarget(inputSalesTarget.replace(/[^\d.]/g, ""));
                                  }}
                                  onBlur={(e) => {
                                    // ÁèæÂú®„ÅÆÂ£≤‰∏äÁõÆÊ®ôÈáëÈ°ç
                                    const replacedPrice = inputSalesTarget.replace(/[^\d.]/g, "");

                                    // Â£≤‰∏äÁõÆÊ®ô„ÅåÁ©∫ÊñáÂ≠ó„ÅÆÂ†¥Âêà„ÅØÂ£≤‰∏äÊé®Áßª„Åã„ÇâÁõÆÊ®ô„ÇíÂèñ„ÇäÈô§„ÅÑ„Å¶„É™„Çø„Éº„É≥„Åô„Çã
                                    if (!checkNotFalsyExcludeZero(replacedPrice)) {
                                      console.log("Â£≤‰∏äÊé®Áßª„Çí„É™„Çª„ÉÉ„Éà", replacedPrice);
                                      // Â£≤‰∏äÊé®Áßª„Çí„É™„Çª„ÉÉ„Éà
                                      setSalesTrends({
                                        ...salesSummaryRowData[rowIndex].sales_trend,
                                        updateAt: Date.now(),
                                      });
                                      // Âπ¥Â∫¶„ÅÆÂ£≤‰∏äÁõÆÊ®ô„ÅåÁ©∫ÊñáÂ≠ó„Å´„Å™„Å£„ÅüÂ†¥Âêà„Å´„ÅØ„ÄÅ‰∏äÊúü„Å®‰∏ãÊúü„ÅÆ„Ç∑„Çß„Ç¢„Å®Â£≤‰∏äÊé®Áßª„Çí„É™„Çª„ÉÉ„Éà
                                      // ‰∏ãÊúü„ÅÆÂ£≤‰∏äÁõÆÊ®ô„Çí„É™„Çª„ÉÉ„Éà
                                      setInputSalesTargetSecondHalf("");
                                      // ‰∏ãÊúü„ÅÆÂ£≤‰∏äÊé®Áßª„Çí„É™„Çª„ÉÉ„Éà
                                      setSalesTrendsSecondHalf({
                                        ...salesSummaryRowData[2].sales_trend,
                                        updateAt: Date.now(),
                                      });
                                      // ‰∏ãÊúü„ÅÆÂâçÂπ¥ÊØî„Çí„É™„Çª„ÉÉ„Éà
                                      setInputYoYGrowthSecondHalf("");
                                      // ‰∏äÊúü‰∏ãÊúü„ÅÆ„Ç∑„Çß„Ç¢„Çí„É™„Çª„ÉÉ„Éà
                                      setShareFirstHalf(0);
                                      setShareSecondHalf(0);
                                      return;
                                    }
                                    // „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂæå„ÅÆÁõÆÊ®ôÈáëÈ°ç
                                    // const convertedDiscountPrice = checkNotFalsyExcludeZero(inputSalesTarget)
                                    //   ? convertToYen(inputSalesTarget.trim())
                                    //   : null;
                                    const convertedSalesTarget = checkNotFalsyExcludeZero(inputSalesTarget)
                                      ? convertToYen(inputSalesTarget)
                                      : null;
                                    const newFormatDiscountAmount = formatDisplayPrice(convertedSalesTarget || 0);
                                    setInputSalesTarget(newFormatDiscountAmount);

                                    // ÂâçÂπ¥ÊØî„ÅÆË®àÁÆó
                                    const {
                                      yearOverYear,
                                      error: yoyError,
                                      isPositive,
                                    } = calculateYearOverYear(
                                      convertedSalesTarget,
                                      row.last_year_sales,
                                      1,
                                      true,
                                      false
                                    );
                                    if (yoyError) {
                                      console.log(`‚ùå${row.period_type} ÂÄ§ÂºïÁéá„ÅÆÂèñÂæó„Å´Â§±Êïó`, yoyError);
                                      setInputYoYGrowth("");
                                    } else if (yearOverYear) {
                                      setInputYoYGrowth(yearOverYear);
                                    }

                                    // Â£≤‰∏äÊé®Áßª„Å´ËøΩÂä†
                                    if (salesTrends) {
                                      // „Éá„Ç£„Éº„Éó„Ç≥„Éî„Éº
                                      let newTrend = cloneDeep(salesTrends) as SparkChartObj;
                                      let newDataArray = [...newTrend.data];
                                      const newDate =
                                        row.period_type === "fiscal_year"
                                          ? upsertTargetObj.fiscalYear
                                          : row.period_type === "first_half"
                                          ? upsertTargetObj.fiscalYear * 10 + 1
                                          : upsertTargetObj.fiscalYear * 10 + 2;
                                      const newData = {
                                        date: newDate,
                                        value: convertedSalesTarget,
                                      };
                                      if (newDataArray.length === 3) {
                                        newDataArray.push(newData);
                                      } else if (newDataArray.length === 4) {
                                        newDataArray.splice(-1, 1, newData);
                                      }
                                      const newTitle =
                                        row.period_type === "fiscal_year"
                                          ? `FY${upsertTargetObj.fiscalYear}`
                                          : row.period_type === "first_half"
                                          ? `${upsertTargetObj.fiscalYear}H1`
                                          : `${upsertTargetObj.fiscalYear}H2`;
                                      newTrend = {
                                        ...newTrend,
                                        title: newTitle,
                                        mainValue: convertedSalesTarget,
                                        growthRate: yearOverYear ? parseFloat(yearOverYear.replace(/%/g, "")) : null,
                                        data: newDataArray,
                                      };
                                      console.log(
                                        "„Åì„Åìüî•üî•üî•üî•üî•üî• newTrend",
                                        newTrend,
                                        "row.period_type ",
                                        row.period_type
                                      );
                                      setSalesTrends({ ...newTrend, updateAt: Date.now() });
                                    }

                                    // ÂêåÊôÇ„Å´„Ç∑„Çß„Ç¢„ÄÅ‰∏ãÂçäÊúü„ÇÇË®àÁÆó„Åó„Å¶Êõ¥Êñ∞„Åô„Çã
                                    if (row.period_type === "first_half" || row.period_type === "fiscal_year") {
                                      const convertedTotalTargetYear = inputSalesTargetYear.replace(/[^\d.]/g, "");
                                      const convertedFirstHalfTarget = inputSalesTargetFirstHalf.replace(/[^\d.]/g, "");
                                      if (
                                        (row.period_type === "first_half" &&
                                          isValidNumber(convertedTotalTargetYear) &&
                                          isValidNumber(convertedSalesTarget) &&
                                          inputSalesTargetYear !== "0") ||
                                        (row.period_type === "fiscal_year" &&
                                          isValidNumber(convertedSalesTarget) &&
                                          isValidNumber(convertedFirstHalfTarget) &&
                                          convertedFirstHalfTarget !== "0")
                                      ) {
                                        try {
                                          // Âπ¥Â∫¶„Å®‰∏äÊúü„ÅÆÂ£≤‰∏äÁõÆÊ®ô Decimal„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÁîüÊàê
                                          const totalTargetDecimal = new Decimal(
                                            row.period_type === "first_half"
                                              ? convertedTotalTargetYear
                                              : convertedSalesTarget!
                                          );
                                          const firstHalfTargetDecimal = new Decimal(
                                            row.period_type === "first_half"
                                              ? convertedSalesTarget!
                                              : convertedFirstHalfTarget
                                          );
                                          // üî∏‰∏äÂçäÊúü„ÅåÂπ¥Â∫¶„Çí‰∏äÂõû„Å£„Å¶„ÅÑ„ÅüÂ†¥Âêà„ÅØ„ÄÅ‰ªñÊñπ„Çí„É™„Çª„ÉÉ„Éà
                                          // Âπ¥Â∫¶ÂÖ•Âäõ„ÅßÂπ¥Â∫¶„Åå‰∏äÂçäÊúü„Çí‰∏ãÂõû„Å£„ÅüÂ†¥Âêà„ÅØ‰∏äÂçäÊúü„Çí„É™„Çª„ÉÉ„Éà
                                          if (
                                            row.period_type === "fiscal_year" &&
                                            totalTargetDecimal.lessThan(firstHalfTargetDecimal)
                                          ) {
                                            // ‰∏äÊúü„Éª‰∏ãÊúü Â£≤‰∏äÁõÆÊ®ô„Çí„É™„Çª„ÉÉ„Éà
                                            setInputSalesTargetFirstHalf("");
                                            setInputSalesTargetSecondHalf("");
                                            // ‰∏äÊúü„Éª‰∏ãÊúü „Ç∑„Çß„Ç¢„Çí„É™„Çª„ÉÉ„Éà
                                            setShareFirstHalf(0);
                                            setShareSecondHalf(0);
                                            // ‰∏äÊúü„Éª‰∏ãÊúü ÂâçÂπ¥ÊØî„Çí„É™„Çª„ÉÉ„Éà
                                            setInputYoYGrowthFirstHalf("");
                                            setInputYoYGrowthSecondHalf("");
                                            // ‰∏äÊúü„Éª‰∏ãÊúü Â£≤‰∏äÊé®Áßª„Çí„É™„Çª„ÉÉ„Éà
                                            setSalesTrendsFirstHalf({
                                              ...salesSummaryRowData[1].sales_trend,
                                              updateAt: Date.now(),
                                            });
                                            setSalesTrendsSecondHalf({
                                              ...salesSummaryRowData[2].sales_trend,
                                              updateAt: Date.now(),
                                            });
                                            // Âπ¥Â∫¶„Åå‰∏äÊúü„Çí‰∏ãÂõû„Å£„ÅüÂ†¥Âêà„Å´„ÅØ„Åì„Åì„Åß„É™„Çø„Éº„É≥
                                            return;
                                          }
                                          // ‰∏äÊúüÂÖ•Âäõ„Åß‰∏äÊúü„ÅåÂπ¥Â∫¶„Çí‰∏äÂõû„Å£„Å¶„ÅÑ„ÅüÂ†¥Âêà„ÅØÂπ¥Â∫¶„Çí„É™„Çª„ÉÉ„Éà
                                          else if (
                                            row.period_type === "first_half" &&
                                            totalTargetDecimal.lessThan(firstHalfTargetDecimal)
                                          ) {
                                            // Âπ¥Â∫¶„Éª‰∏ãÊúü Â£≤‰∏äÁõÆÊ®ô„Çí„É™„Çª„ÉÉ„Éà
                                            setInputSalesTargetYear("");
                                            setInputSalesTargetSecondHalf("");
                                            // ‰∏äÊúü„Éª‰∏ãÊúü „Ç∑„Çß„Ç¢„Çí„É™„Çª„ÉÉ„Éà(‰∏äÊúü„ÅØÂπ¥Â∫¶Â£≤‰∏äÁõÆÊ®ô„Åå„É™„Çª„ÉÉ„Éà„Åï„Çå„Çã„Åü„ÇÅ„Ç∑„Çß„Ç¢„ÇÇ„É™„Çª„ÉÉ„Éà)
                                            setShareFirstHalf(0);
                                            setShareSecondHalf(0);
                                            // Âπ¥Â∫¶„Éª‰∏ãÊúü ÂâçÂπ¥ÊØî„Çí„É™„Çª„ÉÉ„Éà
                                            setInputYoYGrowthYear("");
                                            setInputYoYGrowthSecondHalf("");
                                            // Âπ¥Â∫¶„Éª‰∏ãÊúü Â£≤‰∏äÊé®Áßª„Çí„É™„Çª„ÉÉ„Éà
                                            setSalesTrendsYear({
                                              ...salesSummaryRowData[0].sales_trend,
                                              updateAt: Date.now(),
                                            });
                                            setSalesTrendsSecondHalf({
                                              ...salesSummaryRowData[2].sales_trend,
                                              updateAt: Date.now(),
                                            });
                                            // Âπ¥Â∫¶„Åå‰∏äÊúü„Çí‰∏ãÂõû„Å£„ÅüÂ†¥Âêà„Å´„ÅØ„Åì„Åì„Åß„É™„Çø„Éº„É≥
                                            return;
                                          }

                                          // ‰∏äÊúü„Ç∑„Çß„Ç¢„ÇíË®àÁÆó„Åó„ÄÅÊï¥Êï∞„Å´‰∏∏„ÇÅ„Çã
                                          const firstHalfShare = firstHalfTargetDecimal
                                            .dividedBy(totalTargetDecimal)
                                            .times(100)
                                            .toFixed(0, Decimal.ROUND_HALF_UP);
                                          setShareFirstHalf(Number(firstHalfShare));
                                          // ‰∏ãÊúü„Ç∑„Çß„Ç¢„ÇíË®àÁÆó„Åô„ÇãÔºà100„Åã„Çâ‰∏äÊúü„Ç∑„Çß„Ç¢„ÇíÂºï„ÅèÔºâ
                                          const secondHalfShare = 100 - Number(firstHalfShare);
                                          setShareSecondHalf(secondHalfShare);
                                          // ‰∏ãÊúüÂ£≤‰∏äÁõÆÊ®ô„ÇíË®àÁÆó„Åó„Å¶Êõ¥Êñ∞
                                          const newSecondHalfTarget = totalTargetDecimal
                                            .minus(firstHalfTargetDecimal)
                                            .toNumber();
                                          const formattedSecondHalfTarget = formatDisplayPrice(newSecondHalfTarget);
                                          setInputSalesTargetSecondHalf(formattedSecondHalfTarget);
                                          // ‰∏ãÊúüÂâçÂπ¥ÊØî„ÇíÁÆóÂá∫
                                          // ÂâçÂπ¥ÊØî
                                          const secondHalfResult = calculateYearOverYear(
                                            newSecondHalfTarget,
                                            salesSummaryRowData[salesSummaryRowData.length - 1].last_year_sales,
                                            1,
                                            true,
                                            false
                                          );
                                          if (secondHalfResult.error) {
                                            // toast.error(`„Ç®„É©„ÉºÔºö${secondHalfResult.error}üôá‚Äç‚ôÄÔ∏è`);
                                            console.log(
                                              `‚ùå${
                                                salesSummaryRowData[salesSummaryRowData.length - 1].period_type
                                              } ÂÄ§ÂºïÁéá„ÅÆÂèñÂæó„Å´Â§±Êïó`,
                                              secondHalfResult.error
                                            );
                                            setInputYoYGrowthSecondHalf("");
                                          } else if (secondHalfResult.yearOverYear) {
                                            setInputYoYGrowthSecondHalf(secondHalfResult.yearOverYear);
                                          }

                                          // ‰∏ãÊúü„ÅÆÂ£≤‰∏äÊé®Áßª„Å´ËøΩÂä†
                                          if (salesTrendsSecondHalf && isValidNumber(newSecondHalfTarget)) {
                                            // „Éá„Ç£„Éº„Éó„Ç≥„Éî„Éº
                                            let newTrend = cloneDeep(salesTrendsSecondHalf) as SparkChartObj;
                                            let newDataArray = [...newTrend.data];
                                            const newDate = upsertTargetObj.fiscalYear * 10 + 2; // ‰∏ãÊúü
                                            const newData = {
                                              date: newDate,
                                              value: newSecondHalfTarget,
                                            };
                                            if (newDataArray.length === 3) {
                                              newDataArray.push(newData);
                                            } else if (newDataArray.length === 4) {
                                              newDataArray.splice(-1, 1, newData);
                                            }
                                            const newTitle = `${upsertTargetObj.fiscalYear}H2`;
                                            newTrend = {
                                              ...newTrend,
                                              title: newTitle,
                                              mainValue: newSecondHalfTarget,
                                              growthRate: secondHalfResult.yearOverYear
                                                ? parseFloat(secondHalfResult.yearOverYear.replace(/%/g, ""))
                                                : null,
                                              data: newDataArray,
                                            };
                                            console.log(
                                              "„Åì„Åìüî•üî•üî•üî•üî•üî• newTrend",
                                              newTrend,
                                              "row.period_type ",
                                              row.period_type
                                            );
                                            setSalesTrendsSecondHalf({ ...newTrend, updateAt: Date.now() });
                                          }
                                        } catch (error: any) {
                                          toast.error("„Ç®„É©„ÉºÔºö„Ç∑„Çß„Ç¢„ÅÆÁÆóÂá∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü...üôá‚Äç‚ôÄÔ∏è");
                                          console.log(`‚ùåÂÖ•ÂäõÂÄ§"${inputSalesTargetFirstHalf}"„ÅåÁÑ°Âäπ„Åß„Åô„ÄÇ`, error);
                                        }
                                      }
                                    }
                                  }}
                                />
                              )}
                              {column === "sales_target" && row.period_type === "second_half" && (
                                <span className={`px-[8px] text-[15px]`}>{inputSalesTargetSecondHalf ?? ""}</span>
                              )}
                              {column === "share" && (
                                <>
                                  <div
                                    className={`${styles.grid_header_cell_share} flex-center relative h-full w-full pb-[12px]`}
                                  >
                                    {isMounted && (
                                      <>
                                        <ProgressCircle
                                          circleId="3"
                                          textId="3"
                                          progress={getShare(row.period_type)}
                                          // progress={0}
                                          duration={5000}
                                          easeFn="Quartic"
                                          size={24}
                                          strokeWidth={3}
                                          hiddenCenterText={true}
                                          oneColor="var(--main-color-f)"
                                          notGrad={true}
                                          isReady={true}
                                          withShadow={false}
                                          fade={`fade03_forward`}
                                        />
                                        <ProgressNumber
                                          targetNumber={getShare(row.period_type)}
                                          // startNumber={Math.round(68000 / 2)}
                                          // startNumber={Number((68000 * 0.1).toFixed(0))}
                                          startNumber={0}
                                          duration={5000}
                                          // easeFn="Quartic"
                                          easeFn="Quartic"
                                          fontSize={9}
                                          margin="0 0 0 0"
                                          isReady={true}
                                          isPrice={false}
                                          isPercent={true}
                                          fade={`fade03_forward`}
                                          customClass={`absolute bottom-[7px] left-[50%] translate-x-[-50%] text-[5px]`}
                                          textColor={`var(--color-text-sub)`}
                                        />
                                      </>
                                    )}
                                  </div>
                                </>
                              )}
                              {["yoy_growth", "yo2y_growth"].includes(column) && (
                                <div className="flex h-full w-full items-center whitespace-pre-wrap">
                                  {/* <span>{displayCellValue}</span> */}
                                  {/* <span>{inputYoYGrowth}</span> */}
                                  {column === "yoy_growth" && <span>{inputYoYGrowth || "- %"}</span>}
                                  {column === "yo2y_growth" && <span>{displayCellValue}</span>}
                                </div>
                              )}
                              {["last_year_sales", "two_years_ago_sales", "three_years_ago_sales"].includes(column) && (
                                <div className="flex h-full w-full items-center whitespace-pre-wrap">
                                  {/* 10ÂÖÜ5256ÂÑÑ2430‰∏á2100ÂÜÜ */}
                                  {displayCellValue}
                                </div>
                              )}
                              {column === "sales_trend" && salesTrends && (
                                <SparkChart
                                  key={`${row.period_type}_${salesTrends?.title}_${salesTrends?.mainValue}_${salesTrends?.data?.length}_${salesTrends.updateAt}`}
                                  id={`${row.period_type}_${salesTrends?.title}_${salesTrends?.mainValue}_${salesTrends?.data?.length}_${salesTrends.updateAt}`}
                                  title={salesTrends.title}
                                  subTitle={salesTrends.subTitle}
                                  mainValue={salesTrends.mainValue} // COALESCEÈñ¢Êï∞„ÅßÂ£≤‰∏ä„Åå„Å™„Åè„Å¶„ÇÇ0„ÅåÂÖ•„Çã„Åü„ÇÅnumberÂûã„Å´„Å™„Çã
                                  growthRate={salesTrends.growthRate}
                                  data={salesTrends.data}
                                  dataUpdateAt={salesTrends.updateAt}
                                  // title={row.sales_trend.title}
                                  // subTitle={row.sales_trend.subTitle}
                                  // mainValue={row.sales_trend.mainValue} // COALESCEÈñ¢Êï∞„ÅßÂ£≤‰∏ä„Åå„Å™„Åè„Å¶„ÇÇ0„ÅåÂÖ•„Çã„Åü„ÇÅnumberÂûã„Å´„Å™„Çã
                                  // growthRate={row.sales_trend.growthRate}
                                  // data={row.sales_trend.data}
                                  // title={`${upsertTargetObj.fiscalYear - rowIndex}Âπ¥Â∫¶`}
                                  height={48}
                                  width={270}
                                  delay={600}
                                />
                              )}
                            </div>
                          );
                        })}
                      </div>
                    );
                  })}
                {/* ----------- Row Âπ¥Â∫¶„ÉªÂçäÊúü„É™„Çπ„Éà „Åì„Åì„Åæ„Åß ----------- */}
              </div>
              {/* ----------- rowgroup „Åì„Åì„Åæ„Åß ----------- */}
            </div>
            {/* ------------------ Grid„Ç≥„É≥„ÉÜ„Éä „Åì„Åì„Åæ„Åß ------------------ */}
          </div>
          {/* ------------------ „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„Éä „Åì„Åì„Åæ„Åß ------------------ */}
        </div>
      </div>
    </>
  );
};

export const UpsertSettingTargetGridTable = memo(UpsertSettingTargetGridTableMemo);
