import { SpinnerBrand } from "@/components/Parts/SpinnerBrand/SpinnerBrand";
import { memo, useMemo, useState } from "react";
import styles from "../../DashboardSalesTargetComponent.module.css";
import { MdOutlineDataSaverOff, MdSaveAlt } from "react-icons/md";
import useDashboardStore from "@/store/useDashboardStore";
import { TbSnowflake, TbSnowflakeOff } from "react-icons/tb";
import useStore from "@/store";
import { addTaskIllustration, dataIllustration } from "@/components/assets";
import { BsCheck2 } from "react-icons/bs";
import NextImage from "next/image";
import { useQueryEntityLevels } from "@/hooks/useQueryEntityLevels";
import { useQueryEntities } from "@/hooks/useQueryEntities";
import { Department, Office, Section, Unit } from "@/types";
import { useQueryClient } from "@tanstack/react-query";

const UpsertTargetEntityMemo = () => {
  const queryClient = useQueryClient();
  const language = useStore((state) => state.language);
  const userProfileState = useDashboardStore((state) => state.userProfileState);
  const upsertTargetObj = useDashboardStore((state) => state.upsertTargetObj);
  const setUpsertTargetObj = useDashboardStore((state) => state.setUpsertTargetObj);
  const setUpsertTargetMode = useDashboardStore((state) => state.setUpsertTargetMode);

  const [isLoading, setIsLoading] = useState(false);
  const [step, setStep] = useState(1);
  // sticky
  const [isStickySidebar, setIsStickySidebar] = useState(false);
  const [isStickyHeader, setIsStickyHeader] = useState(false);

  if (!userProfileState) return null;
  if (!userProfileState.company_id) return null;
  if (!upsertTargetObj) return null;
  if (!upsertTargetObj.fiscalYear) return null;

  // // ÈÅ∏Êäû‰∏≠„ÅÆ‰ºöË®àÂπ¥Â∫¶„É≠„Éº„Ç´„É´state
  // const [selectedFiscalYearLocal, setSelectedFiscalYearLocal] = useState(upsertTargetObj.fiscalYear);
  // // Âπ¥Â∫¶„Ç™„Éó„Ç∑„Éß„É≥ÈÅ∏ÊäûËÇ¢
  // const optionsFiscalYear = useDashboardStore((state) => state.optionsFiscalYear);
  // const setOptionsFiscalYear = useDashboardStore((state) => state.setOptionsFiscalYear);

  // ===================== üå†„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„É¨„Éô„É´useQueryüå† =====================
  const {
    data: entityLevelsQueryData,
    isLoading: isLoadingQueryLevel,
    isError: isErrorQueryLevel,
  } = useQueryEntityLevels(userProfileState.company_id, upsertTargetObj.fiscalYear, "sales_target", true);
  // ===================== üå†„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„É¨„Éô„É´useQueryüå† =====================

  // ===================== üå†„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£useQueryüå† =====================
  // „Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„É¨„Éô„É´„ÅÆid„ÅÆ„Åø„ÅßÈÖçÂàó„Çí‰ΩúÊàê(„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£useQueryÁî®)
  const entityLevelIds = useMemo(() => {
    if (!entityLevelsQueryData) return [];
    return entityLevelsQueryData.map((obj) => obj.id);
  }, [entityLevelsQueryData]);

  const {
    data: entitiesQueryData,
    isLoading: isLoadingQueryEntities,
    isError: isErrorQueryEntities,
  } = useQueryEntities(userProfileState.company_id, upsertTargetObj.fiscalYear, "sales_target", entityLevelIds, true);
  // ===================== üå†„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£useQueryüå† =====================

  // ========================= üåü‰∫ãÊ•≠ÈÉ®„ÉªË™≤„Éª‰øÇ„Éª‰∫ãÊ•≠ÊâÄ„É™„Çπ„ÉàÂèñÂæóuseQuery „Ç≠„É£„ÉÉ„Ç∑„É•üåü =========================
  const departmentDataArray: Department[] | undefined = queryClient.getQueryData(["departments"]);
  const sectionDataArray: Section[] | undefined = queryClient.getQueryData(["sections"]);
  const unitDataArray: Unit[] | undefined = queryClient.getQueryData(["units"]);
  const officeDataArray: Office[] | undefined = queryClient.getQueryData(["offices"]);
  // ========================= üåü‰∫ãÊ•≠ÈÉ®„ÉªË™≤„Éª‰øÇ„Éª‰∫ãÊ•≠ÊâÄ„É™„Çπ„ÉàÂèñÂæóuseQuery „Ç≠„É£„ÉÉ„Ç∑„É•üåü =========================

  // „Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„É¨„Éô„É´Map key: „É¨„Éô„É´Âêç, value: „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆMap„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÁîüÊàê
  const entityLevelsMap = useMemo(() => {
    if (!entityLevelsQueryData || entityLevelsQueryData?.length === 0) return null;
    return new Map(entityLevelsQueryData.map((obj) => [obj.entity_level, obj]));
  }, [entityLevelsQueryData]);

  // ===================== üåü„É¶„Éº„Ç∂„Éº„Åå‰ΩúÊàê„Åó„Åü„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„ÅÆ„Åø„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„É™„Çπ„Éà„ÇíÂÜçÁîüÊàêüåü =====================
  const entityLevelList: {
    title: string;
    name: {
      [key: string]: string;
    };
  }[] = useMemo(() => {
    let newEntityList = [{ title: "company", name: { ja: "ÂÖ®Á§æ", en: "Company" } }];
    if (departmentDataArray && departmentDataArray.length > 0) {
      newEntityList.push({ title: "department", name: { ja: "‰∫ãÊ•≠ÈÉ®", en: "Department" } });
    }
    if (sectionDataArray && sectionDataArray.length > 0) {
      newEntityList.push({ title: "section", name: { ja: "Ë™≤„Éª„Çª„ÇØ„Ç∑„Éß„É≥", en: "Section" } });
    }
    if (unitDataArray && unitDataArray.length > 0) {
      newEntityList.push({ title: "unit", name: { ja: "‰øÇ„Éª„ÉÅ„Éº„É†", en: "Unit" } });
    }
    // „É°„É≥„Éê„Éº„ÅØÂøÖ„ÅöËøΩÂä†
    newEntityList.push({ title: "member", name: { ja: "„É°„É≥„Éê„Éº", en: "Member" } });
    // ‰∫ãÊ•≠ÊâÄ„ÅØ‰∏ÄÊó¶Ë¶ãÂêà„Çè„Åõ
    // if (officeDataArray && officeDataArray.length > 0) {
    //   newEntityList.push({ title: "office", name: { ja: "‰∫ãÊ•≠ÊâÄ", en: "Office" } });
    // }

    // „Åæ„Å†‰∏Ä„Å§„ÇÇ„É¨„Éô„É´„ÅåËøΩÂä†„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÂÖ®„Å¶„ÅÆ„É¨„Éô„É´„ÅÆÈÅ∏ÊäûËÇ¢„ÇíËøî„Åô
    if (!entityLevelsMap || entityLevelsMap.size === 0) return newEntityList;

    // Êó¢„Å´ÊåáÂÆöÂπ¥Â∫¶„ÅÆÂ£≤‰∏äÁõÆÊ®ô„ÇíÊßãÊàê„Åô„Çã„É¨„Éô„É´„ÅåËøΩÂä†„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅËøΩÂä†Ê∏à„Åø„ÅÆÊú´Á´Ø„É¨„Éô„É´„ÅÆ‰∏ã‰Ωç„É¨„Éô„É´„Å´ÂΩì„Åü„Çã„É¨„Éô„É´‰ª•Èôç„ÇíÈÅ∏ÊäûËÇ¢„Å®„Åó„Å¶„Éï„Ç£„É´„Çø„Éº„Åó„Å¶Ëøî„Åô
    if (entityLevelsMap.has("member")) return [];
    if (entityLevelsMap.has("unit")) return [{ title: "member", name: { ja: "„É°„É≥„Éê„Éº", en: "Member" } }];
    if (entityLevelsMap.has("section")) {
      return newEntityList.filter((obj) => ["unit", "member"].includes(obj.title));
    }
    if (entityLevelsMap.has("department")) {
      return newEntityList.filter((obj) => ["section", "unit", "member"].includes(obj.title));
    }
    if (entityLevelsMap.has("company")) {
      return newEntityList.filter((obj) => ["department", "section", "unit", "member"].includes(obj.title));
    }
    return [];
  }, [departmentDataArray, sectionDataArray, unitDataArray, officeDataArray]);
  // ===================== üåü„É¶„Éº„Ç∂„Éº„Åå‰ΩúÊàê„Åó„Åü„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„ÅÆ„Åø„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„É™„Çπ„Éà„ÇíÂÜçÁîüÊàêüåü =====================

  // =====================ÂàùÂõû„ÅÆ„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£„É¨„Éô„É´„ÅÆÈÅ∏ÊäûËÇ¢=====================
  const [selectedEntityLevel, setSelectedEntityLevel] = useState(() => {
    // Êó¢„Å´ËøΩÂä†Ê∏à„Åø„ÅÆ„É¨„Éô„É´„ÅÆ‰∏ã‰Ωç„É¨„Éô„É´„ÇíÈÅ∏ÊäûÊ∏à„Åø„Å´„Åô„Çã
    if (!entityLevelsMap || entityLevelsMap.size === 0) return "company";
    if (entityLevelsMap.has("member")) return "";
    if (entityLevelsMap.has("unit")) return "member";
    if (entityLevelsMap.has("section")) return entityLevelsMap.has("unit") ? "unit" : "member";
    if (entityLevelsMap.has("department")) {
      if (entityLevelsMap.has("section")) entityLevelsMap.has("unit") ? "unit" : "member";
      return "member";
    }
    return "company";
  });

  // ===================== Èñ¢Êï∞ =====================
  // üåüÁõÆÊ®ôË®≠ÂÆö„É¢„Éº„Éâ„ÇíÁµÇ‰∫Ü
  const handleCancelUpsert = () => {
    // setUpsertTargetMode(false);
    setUpsertTargetMode(null);
    setUpsertTargetObj(null);
  };
  // ===================== Èñ¢Êï∞ =====================

  // ===================== üåü„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó 3ÁÇπ„É™„Éº„ÉÄ„Éº„ÅÆÊôÇ„Å´„ÉÑ„Éº„É´„ÉÅ„ÉÉ„ÉóË°®Á§∫üåü =====================
  const hoveredItemPos = useStore((state) => state.hoveredItemPos);
  const setHoveredItemPos = useStore((state) => state.setHoveredItemPos);
  type TooltipParams = {
    e: React.MouseEvent<HTMLElement, MouseEvent>;
    display: string;
    content: string;
    content2?: string | undefined | null;
    marginTop?: number;
    itemsPosition?: string;
  };
  const handleOpenTooltip = ({
    e,
    display,
    content,
    content2,
    marginTop = 0,
    itemsPosition = "center",
  }: TooltipParams) => {
    // „Éõ„Éê„Éº„Åó„Åü„Ç¢„Ç§„ÉÜ„É†„Å´„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÇíË°®Á§∫
    const { x, y, width, height } = e.currentTarget.getBoundingClientRect();
    // console.log("„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éóx, y width , height", x, y, width, height);

    setHoveredItemPos({
      x: x,
      y: y,
      itemWidth: width,
      itemHeight: height,
      content: content,
      content2: content2,
      display: display,
      marginTop: marginTop,
      itemsPosition: itemsPosition,
    });
  };
  // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÇíÈùûË°®Á§∫
  const handleCloseTooltip = () => {
    if (hoveredItemPos) setHoveredItemPos(null);
  };
  // ==================================================================================

  // „Ç§„É≥„É©„Ç§„É≥„Çπ„Çø„Ç§„É´
  const getActiveSteps = (num: number) =>
    step === num
      ? `border-[var(--color-bg-brand-f)] bg-[var(--color-bg-brand-f)] text-[#fff]`
      : `border-[var(--color-border-light)] bg-[var(--color-edit-bg-solid)] text-[var(--color-text-sub)]`;
  const getActiveStep = (num: number) =>
    step === num
      ? `border-[var(--color-bg-brand-f)] bg-[var(--color-bg-brand-f)] text-[#fff]`
      : `border-[var(--color-border-light)] bg-[var(--color-edit-bg-solid)] text-[var(--color-text-disabled)]`;
  const getActiveDesc = (num: number) =>
    step === num ? `text-[var(--color-text-title)]` : `text-[var(--color-text-disabled)]`;

  console.log(
    "UpsertTargetEntity„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„É¨„É≥„ÉÄ„É™„É≥„Ç∞",
    "upsertTargetObj",
    upsertTargetObj,
    "entityLevelsQueryData",
    entityLevelsQueryData,
    "entityLevelIds",
    entityLevelIds,
    "entitiesQueryData",
    entitiesQueryData
  );
  return (
    <>
      {/* „É≠„Éº„Éá„Ç£„É≥„Ç∞ */}
      {isLoading && (
        <div
          className={`flex-center fixed left-0 top-0 z-[5000] h-full w-full bg-[var(--overlay-loading-modal-inside)]`}
        >
          <SpinnerBrand withBorder withShadow />
        </div>
      )}
      {/* ===================== „Çπ„ÇØ„É≠„Éº„É´„Ç≥„É≥„ÉÜ„Éä „Åì„Åì„Åã„Çâ ===================== */}
      <div className={`${styles.main_container_entity} fade08_forward`}>
        <div className={`${styles.title_area}`}>
          <h1 className={`${styles.title} ${styles.upsert} space-x-[24px]`}>
            <span className="min-w-max">{upsertTargetObj.fiscalYear}Âπ¥Â∫¶ ÁõÆÊ®ôË®≠ÂÆö</span>
            {/* ----„Éó„É≠„Ç∞„É¨„Çπ„Ç®„É™„Ç¢---- */}
            <div className="relative flex h-[25px] w-full items-center">
              {/* „Éó„É≠„Ç∞„É¨„Çπ„É©„Ç§„É≥ */}
              <div className="absolute left-0 top-[50%] z-[0] h-[1px] w-[145px] bg-[var(--color-progress-bg)]"></div>
              {/* ‚óã */}
              <div
                className={`flex-center z-[1] mr-[15px] h-[25px] w-[25px] cursor-pointer rounded-full border border-solid ${getActiveSteps(
                  1
                )}`}
                onClick={() => setStep(1)}
              >
                <span className={`text-[12px] font-bold`}>1</span>
              </div>
              {/* ‚óã */}
              <div
                className={`flex-center  z-[1] mr-[15px] h-[25px] w-[25px] cursor-not-allowed rounded-full border border-solid ${getActiveSteps(
                  2
                )}`}
                onClick={() => setStep(2)}
              >
                <span className={`text-[12px] font-bold`}>2</span>
              </div>
              {/* ‚óã */}
              <div
                className={`flex-center  z-[1] mr-[15px] h-[25px] w-[25px] cursor-not-allowed rounded-full border border-solid ${getActiveSteps(
                  3
                )}`}
                onClick={() => setStep(3)}
              >
                <span className={`text-[12px] font-bold`}>3</span>
              </div>
              {/* ‚óã */}
              <div
                className={`flex-center  z-[1] mr-[15px] h-[25px] w-[25px] cursor-not-allowed rounded-full border border-solid ${getActiveSteps(
                  4
                )}`}
                onClick={() => setStep(4)}
              >
                <span className={`text-[12px] font-bold`}>4</span>
              </div>
            </div>
            {/* ----„Éó„É≠„Ç∞„É¨„Çπ„Ç®„É™„Ç¢ „Åì„Åì„Åæ„Åß---- */}
          </h1>
          <div className={`${styles.btn_area} flex items-start space-x-[12px]`}>
            <div className={`${styles.btn} ${styles.basic}`} onClick={handleCancelUpsert}>
              <span>Êàª„Çã</span>
            </div>
            <div
              className={`${styles.btn} ${styles.brand} space-x-[3px]`}
              onClick={(e) => {
                console.log("„ÇØ„É™„ÉÉ„ÇØ");
              }}
            >
              {/* <RiSave3Fill className={`stroke-[3] text-[12px] text-[#fff]`} /> */}
              <MdSaveAlt className={`text-[14px] text-[#fff]`} />
              <span>‰øùÂ≠ò</span>
            </div>
          </div>
        </div>
        <div className={`${styles.contents_area_entity}`}>
          <div className={`${styles.left_container} bg-[red]/[0] ${isStickySidebar ? `${styles.sticky_side}` : ``}`}>
            <div className={`${styles.step_container} space-y-[12px]`}>
              <div className={`flex w-full justify-between`}>
                <h4 className={`w-full text-[18px] font-bold`}>
                  <span>ÊâãÈ†Ü</span>
                </h4>
                <div
                  className={`${styles.btn} ${styles.basic} space-x-[4px] whitespace-nowrap`}
                  onMouseEnter={(e) => {
                    handleOpenTooltip({
                      e: e,
                      display: "top",
                      content: isStickySidebar ? `Âõ∫ÂÆö„ÇíËß£Èô§` : `ÁîªÈù¢ÂÜÖ„Å´Âõ∫ÂÆö`,
                      marginTop: 9,
                    });
                  }}
                  onMouseLeave={handleCloseTooltip}
                  onClick={() => {
                    setIsStickySidebar(!isStickySidebar);
                    handleCloseTooltip();
                  }}
                >
                  {isStickySidebar && <TbSnowflakeOff />}
                  {!isStickySidebar && <TbSnowflake />}
                  {isStickySidebar && <span>Ëß£Èô§</span>}
                  {!isStickySidebar && <span>Âõ∫ÂÆö</span>}
                </div>
              </div>
              {/* ------------- */}
              <li className={`flex h-max w-full flex-col`}>
                <div className={`flex w-full items-center space-x-[9px] text-[14px] font-bold ${getActiveDesc(1)}`}>
                  <div className="flex h-full min-w-max items-center">
                    <div
                      className={`flex-center z-[1] min-h-[22px] min-w-[22px] rounded-full border border-solid ${getActiveStep(
                        1
                      )}`}
                    >
                      <span className={`text-[12px] font-bold`}>1</span>
                    </div>
                  </div>
                  <span>ÁµÑÁπî„ÇíÊßãÊàê„Åô„Çã„É¨„Ç§„É§„Éº„ÇíËøΩÂä†</span>
                </div>
                <div className={`${styles.description} w-full text-[12px] ${step === 1 ? `${styles.open}` : ``}`}>
                  <p>{`Â£≤‰∏äÁõÆÊ®ô„Å´Èñ¢„Çè„ÇãÁµÑÁπî„É¨„Ç§„É§„Éº„Çí„ÅäÂÆ¢Êßò„Åå‰ΩúÊàê„Åï„Çå„Åü„ÄåÂÖ®Á§æ„ÄÅ‰∫ãÊ•≠ÈÉ®„ÄÅË™≤„ÄÅ‰øÇ„ÄÅ„É°„É≥„Éê„Éº„Äç„Åã„ÇâËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`}</p>
                </div>
              </li>
              {/* ------------- */}
              {/* ------------- */}
              <li className={`flex h-max w-full flex-col`}>
                <div className={`flex w-full items-center space-x-[9px] text-[14px] font-bold ${getActiveDesc(2)}`}>
                  <div className="flex h-full min-w-max items-center">
                    <div
                      className={`flex-center z-[1] min-h-[22px] min-w-[22px] rounded-full border border-solid ${getActiveStep(
                        2
                      )}`}
                    >
                      <span className={`text-[12px] font-bold`}>2</span>
                    </div>
                  </div>
                  <span>ÂêÑ„É¨„Ç§„É§„ÉºÂÜÖ„ÅßÈÉ®ÈñÄ„Éª‰∫∫„ÇíËøΩÂä†</span>
                </div>
                <div className={`${styles.description} w-full text-[12px] ${step === 2 ? `${styles.open}` : ``}`}>
                  <p>{`ËøΩÂä†„Åó„Åü„É¨„Ç§„É§„ÉºÂÜÖ„ÅßÂ£≤‰∏äÁõÆÊ®ô„Å´Áõ¥Êé•Èñ¢„Çè„ÇãÈÉ®ÈñÄ„ÇÑ‰∫∫„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`}</p>
                </div>
              </li>
              {/* ------------- */}
              {/* ------------- */}
              <li className={`flex h-max w-full flex-col`}>
                <div className={`flex w-full items-center space-x-[9px] text-[14px] font-bold ${getActiveDesc(3)}`}>
                  <div className="flex h-full min-w-max items-center">
                    <div
                      className={`flex-center z-[1] min-h-[22px] min-w-[22px] rounded-full border border-solid ${getActiveStep(
                        3
                      )}`}
                    >
                      <span className={`text-[12px] font-bold`}>3</span>
                    </div>
                  </div>
                  <span>Â£≤‰∏äÁõÆÊ®ô„ÇíË®≠ÂÆö„Éª‰øùÂ≠ò</span>
                </div>
                <div className={`${styles.description} w-full text-[12px] ${step === 3 ? `${styles.open}` : ``}`}>
                  <p>{`2„ÅßËøΩÂä†„Åó„Åü„ÄåÂÖ®Á§æ„Äú‰øÇ„Äç„Åæ„Åß„ÅØ„ÄåÂπ¥Â∫¶„ÉªÂçäÊúü„Äç„ÅÆÂ£≤‰∏äÁõÆÊ®ô„ÇíË®≠ÂÆö„Åó„ÄÅ\nÂêÑ„É°„É≥„Éê„Éº„ÅØ‰∏Ä„Å§‰∏ä„ÅÆ„É¨„Ç§„É§„Éº„ÅßÊ±∫„ÇÅ„ÅüÂ£≤‰∏äÁõÆÊ®ô„Å®ÂçäÊúü„ÅÆÂ£≤‰∏äÁõÆÊ®ô„Ç∑„Çß„Ç¢„ÇíÂâ≤„ÇäÊåØ„Çä„ÄÅÁèæÂú®„ÅÆ‰øùÊúâ„Åó„Å¶„ÅÑ„ÇãÊ°à‰ª∂„Å®Êù•Êúü„ÅÆÂ£≤‰∏äË¶ãËæº„Åø„ÇíÂü∫„Å´„ÄåÂçäÊúü„ÄúÊúàÊ¨°„Äç„ÅÆÂ£≤‰∏äÁõÆÊ®ô„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`}</p>
                </div>
              </li>
              {/* ------------- */}
              {/* ------------- */}
              <li className={`flex h-max w-full flex-col`}>
                <div className={`flex w-full items-center space-x-[9px] text-[14px] font-bold ${getActiveDesc(4)}`}>
                  <div className="flex h-full min-w-max items-center">
                    <div
                      className={`flex-center z-[1] min-h-[22px] min-w-[22px] rounded-full border border-solid ${getActiveStep(
                        4
                      )}`}
                    >
                      <span className={`text-[12px] font-bold`}>4</span>
                    </div>
                  </div>
                  <span>ÂÖ®„É¨„Ç§„É§„Éº„ÅÆÂπ¥Â∫¶„ÄúÊúàÊ¨°„ÅÆÂ£≤‰∏äÁõÆÊ®ô„ÇíÂÆåÊàê„Åï„Åõ„Çã</span>
                </div>
                <div className={`${styles.description} w-full text-[12px] ${step === 4 ? `${styles.open}` : ``}`}>
                  <p>{`ÂÖ®„Å¶„ÅÆ„É°„É≥„Éê„Éº„ÅÆÂõõÂçäÊúü„ÄÅÊúàÊ¨°ÁõÆÊ®ô„ÅÆË®≠ÂÆö„ÅåÂÆå‰∫Ü„Åó„Åü„Çâ„ÄÅÂÖ®„É°„É≥„Éê„Éº„ÅÆÂ£≤‰∏äÁõÆÊ®ô„ÇíÈõÜÁ¥Ñ„Åó„Å¶ÂÖ®„Å¶„ÅÆ„É¨„Ç§„É§„Éº„ÅÆÂõõÂçäÊúü„ÉªÊúàÊ¨°Â£≤‰∏äÁõÆÊ®ô„ÇíÂÆåÊàê„Åï„Åõ„Çã`}</p>
                </div>
              </li>
              {/* ------------- */}
            </div>
          </div>
          <div className={`${styles.right_container} bg-[green]/[0]`}>
            <div className={`${styles.step_header_wrapper} flex w-full ${isStickyHeader ? `sticky top-[8px]` : ``}`}>
              <div
                className={`${styles.step_header} ${
                  isStickyHeader ? (isStickySidebar ? `${styles.sticky_with_side}` : `${styles.sticky_header}`) : ``
                }`}
              >
                <div className={`flex w-full justify-between`}>
                  <div className={`${styles.left_wrapper} flex w-4/6 flex-col`}>
                    <div className={`flex flex-col`}>
                      <h4 className={`min-h-[30px] font-bold`}>
                        <span>ÁµÑÁπî„ÇíÊßãÊàê„Åô„Çã„É¨„Ç§„É§„Éº„ÇíËøΩÂä†</span>
                      </h4>
                      <div className={`mt-[6px] text-[12px]`}>
                        <p className={`whitespace-pre-wrap`}>
                          {`Â£≤‰∏äÁõÆÊ®ô„Å´Èñ¢„Çè„ÇãÁµÑÁπî„É¨„Ç§„É§„Éº„Çí„ÅäÂÆ¢Êßò„Åå‰ΩúÊàê„Åï„Çå„Åü„ÄåÂÖ®Á§æ„ÄÅ‰∫ãÊ•≠ÈÉ®„ÄÅË™≤„ÄÅ‰øÇ„ÄÅ„É°„É≥„Éê„Éº„Äç„Åã„ÇâËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\nÂßã„ÇÅ„Å´ÂÖ®Á§æ„É¨„Ç§„É§„Éº„ÇíËøΩÂä†„Åó„ÄÅÊúÄÂæå„ÅØ„É°„É≥„Éê„Éº„É¨„Ç§„É§„Éº„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`}
                          {/* 2„ÅßËøΩÂä†„Åó„Åü„ÄåÂÖ®Á§æ„Äú‰øÇ„Äç„Åæ„Åß„ÅØ„ÄåÂπ¥Â∫¶„ÉªÂçäÊúü„Äç„ÅÆÂ£≤‰∏äÁõÆÊ®ô„ÇíË®≠ÂÆö„Åó„ÄÅ
                          ÂêÑ„É°„É≥„Éê„Éº„ÅØ‰∏Ä„Å§‰∏ä„ÅÆ„É¨„Ç§„É§„Éº„ÅßÊ±∫„ÇÅ„ÅüÂ£≤‰∏äÁõÆÊ®ô„Å®ÂçäÊúü„ÅÆÂ£≤‰∏äÁõÆÊ®ô„Ç∑„Çß„Ç¢„ÇíÂâ≤„ÇäÊåØ„Çä„ÄÅÁèæÂú®„ÅÆ‰øùÊúâ„Åó„Å¶„ÅÑ„ÇãÊ°à‰ª∂„Å®Êù•Êúü„ÅÆÂ£≤‰∏äË¶ãËæº„Åø„ÇíÂü∫„Å´„ÄåÂçäÊúü„ÄúÊúàÊ¨°„Äç„ÅÆÂ£≤‰∏äÁõÆÊ®ô„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ */}
                        </p>
                      </div>
                      <div className={`mt-[20px] flex items-center`}>
                        {selectedEntityLevel !== "" && (
                          <select
                            className={`${styles.select_box} ${styles.both} mr-[20px] truncate`}
                            style={{ maxWidth: `150px` }}
                            value={selectedEntityLevel}
                            onChange={(e) => {
                              setSelectedEntityLevel(e.target.value);
                              // if (openPopupMenu) handleClosePopupMenu();
                            }}
                          >
                            {entityLevelList.map((obj) => (
                              <option key={obj.title} value={obj.title}>
                                {obj.name[language]}
                              </option>
                            ))}
                          </select>
                        )}
                        <button
                          className={`transition-bg01 flex-center max-w-max cursor-pointer rounded-[8px] bg-[var(--color-bg-brand-f)] px-[15px] py-[10px] text-[13px] font-bold text-[#fff] hover:bg-[var(--color-bg-brand-f-hover)]`}
                          // onClick={() => setIsOpenSettingInvitationModal(true)}
                        >
                          <span>„É¨„Ç§„É§„Éº„ÇíËøΩÂä†</span>
                        </button>
                      </div>
                    </div>
                  </div>

                  <div className={`${styles.right_wrapper} relative flex w-2/6 flex-col`}>
                    <div
                      className={`${styles.btn_area} absolute right-0 top-0 flex min-h-[30px] w-full items-center justify-end space-x-[12px]`}
                    >
                      <div
                        className={`${styles.btn} ${styles.basic} space-x-[4px]`}
                        onMouseEnter={(e) => {
                          handleOpenTooltip({
                            e: e,
                            display: "top",
                            content: isStickyHeader ? `Âõ∫ÂÆö„ÇíËß£Èô§` : `ÁîªÈù¢ÂÜÖ„Å´Âõ∫ÂÆö`,
                            marginTop: 9,
                          });
                        }}
                        onMouseLeave={handleCloseTooltip}
                        onClick={() => {
                          setIsStickyHeader(!isStickyHeader);
                          handleCloseTooltip();
                        }}
                      >
                        {isStickyHeader && <TbSnowflakeOff />}
                        {!isStickyHeader && <TbSnowflake />}
                        {isStickyHeader && <span>Ëß£Èô§</span>}
                        {!isStickyHeader && <span>Âõ∫ÂÆö</span>}
                      </div>
                    </div>
                    <div className={`flex w-full justify-end`}>
                      <div className="mr-[84px] mt-[-20px]">{dataIllustration}</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className={`${styles.contents_container_rb} flex h-full w-full`}>
              {/* <div className={`${styles.col}`}>
                <div className={`flex w-full justify-between`}>
                  <h4 className={`text-[19px] font-bold`}>‰ºöÁ§æ</h4>
                </div>
                <ul className={`w-full`}>
                  <li
                    className={`flex w-full items-center justify-between border-b border-solid border-[var(--color-border-light)] pb-[10px] pt-[16px]`}
                  >
                    <div className={`flex max-w-[270px] items-center`}>
                      <div className={`max-w-[270px] truncate text-[14px] font-bold`}>Ê†™Âºè‰ºöÁ§æTRUSTiFY</div>
                    </div>
                    <div className={`flex min-h-[30px] items-center`}>
                      <span className="text-[14px] text-[var(--color-text-brand-f)]">Êú™Ë®≠ÂÆö</span>
                    </div>
                  </li>
                </ul>
              </div> */}
              {!entityLevelsQueryData?.length && (
                <div
                  className={`flex-col-center h-[calc(100vh-56px-66px-168px-32px)] w-[calc(100vw-72px-260px-32px)]  p-[16px] text-[13px]`}
                >
                  <div className={`flex-col-center relative mt-[-56px]`}>
                    {addTaskIllustration()}
                    <div className={`flex-col-center absolute bottom-[0] z-10`}>
                      <p>„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ</p>
                      <p>„É¨„Ç§„É§„Éº„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
                    </div>
                  </div>
                </div>
              )}
              {!!entityLevelsQueryData?.length &&
                entityLevelsQueryData.map((obj) => {
                  return (
                    <div key={`column_${obj.id}`} className={`${styles.col}`}>
                      <div className={`flex w-full justify-between`}>
                        <h4 className={`text-[19px] font-bold`}>Ë™≤„Éª„Çª„ÇØ„Ç∑„Éß„É≥</h4>
                      </div>
                      <ul className={`flex w-full flex-col`}>
                        {Array(2)
                          .fill(null)
                          .map((_, index) => (
                            <li key={`section_${index}`} className="mb-[6px] mt-[16px] flex w-full flex-col">
                              <h3 className={`mb-[0px] flex min-h-[30px] items-center justify-between font-bold`}>
                                <div className="flex min-w-max flex-col space-y-[3px]">
                                  <div className="flex min-w-max items-center space-x-[6px] pr-[9px] text-[15px]">
                                    <NextImage
                                      width={21}
                                      height={21}
                                      src={`/assets/images/icons/business/icons8-process-94.png`}
                                      alt="setting"
                                      className={`${styles.title_icon} mb-[2px]`}
                                    />
                                    <span className="max-w-[270px] truncate">„Éû„Ç§„ÇØ„É≠„Çπ„Ç≥„Éº„Éó‰∫ãÊ•≠ÈÉ®</span>
                                    {/* <BsCheck2 className="pointer-events-none min-h-[20px] min-w-[20px] stroke-1 text-[20px] text-[#00d436]" /> */}
                                  </div>
                                  <div className="min-h-[1px] w-full bg-[var(--color-bg-brand-f)]" />
                                </div>
                                <div
                                  className={`${styles.btn} ${styles.brand} truncate font-normal`}
                                  onClick={() => {
                                    console.log("item.unit_price");
                                  }}
                                >
                                  {/* Á∑®ÈõÜ */}
                                  Ë®≠ÂÆö
                                </div>
                              </h3>
                              <ul className={`w-full`}>
                                {Array(3)
                                  .fill(null)
                                  .map((_, index) => (
                                    <li
                                      key={`list_${index}`}
                                      className={`flex w-full items-center justify-between border-b border-solid border-[var(--color-border-light)] pb-[10px] pt-[16px]`}
                                    >
                                      <div className={`flex max-w-[290px] items-center`}>
                                        {/* <div className={`mr-[6px] min-w-max`}>
                                    <MdOutlineDataSaverOff
                                      className={`${styles.list_icon} min-h-[18px] min-w-[18px] text-[18px]`}
                                    />
                                  </div> */}
                                        <div className={`max-w-[290px] truncate text-[14px] font-bold`}>
                                          „Éû„Ç§„ÇØ„É≠„Çπ„Ç≥„Éº„Éó‰∫ãÊ•≠ÈÉ®
                                        </div>
                                      </div>
                                      <div className={`flex min-h-[30px] items-center`}>
                                        <span className="text-[14px] text-[var(--color-text-sub)]">Êú™Ë®≠ÂÆö</span>
                                        {/* <div className={`flex items-center space-x-[6px]`}>
                                    <BsCheck2 className="pointer-events-none min-h-[22px] min-w-[22px] stroke-1 text-[22px] text-[#00d436]" />
                                    <span className="text-[14px] text-[var(--color-text-brand-f)]">Ë®≠ÂÆöÊ∏à„Åø</span>
                                  </div> */}
                                      </div>
                                    </li>
                                  ))}
                              </ul>
                            </li>
                          ))}
                      </ul>
                    </div>
                  );
                })}
              {/* <div className={`${styles.col}`}></div>
              <div className={`${styles.col}`}></div>
              <div className={`${styles.col}`}></div>
              <div className={`${styles.col}`}></div> */}
            </div>
          </div>
        </div>
      </div>
      {/* ===================== „Çπ„ÇØ„É≠„Éº„É´„Ç≥„É≥„ÉÜ„Éä „Åì„Åì„Åæ„Åß ===================== */}
    </>
  );
};

export const UpsertTargetEntity = memo(UpsertTargetEntityMemo);
