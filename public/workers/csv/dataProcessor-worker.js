// ----------------------------------- Web Workerスクリプト内で使用するヘルパー関数 -----------------------------------
//
// ----------------------------------- 🔸都道府県 => id Mapオブジェクト🔸 -----------------------------------
const optionRegionsJP = Array(47)
  .fill(null)
  .map((option, index) => index + 1);
const mappingRegionsJp = {
  1: { ja: "北海道", en: "Hokkaido" },
  2: { ja: "青森県", en: "Aomori" },
  3: { ja: "岩手県", en: "Iwate" },
  4: { ja: "宮城県", en: "Miyagi" },
  5: { ja: "秋田県", en: "Akita" },
  6: { ja: "山形県", en: "Yamagata" },
  7: { ja: "福島県", en: "Fukushima" },
  8: { ja: "茨城県", en: "Ibaraki" },
  9: { ja: "栃木県", en: "Tochigi" },
  10: { ja: "群馬県", en: "Gunma" },
  11: { ja: "埼玉県", en: "Saitama" },
  12: { ja: "千葉県", en: "Chiba" },
  13: { ja: "東京都", en: "Tokyo" },
  14: { ja: "神奈川県", en: "Kanagawa" },
  15: { ja: "新潟県", en: "Niigata" },
  16: { ja: "富山県", en: "Toyama" },
  17: { ja: "石川県", en: "Ishikawa" },
  18: { ja: "福井県", en: "Fukui" },
  19: { ja: "山梨県", en: "Yamanashi" },
  20: { ja: "長野県", en: "Nagano" },
  21: { ja: "岐阜県", en: "Gifu" },
  22: { ja: "静岡県", en: "Shizuoka" },
  23: { ja: "愛知県", en: "Aichi" },
  24: { ja: "三重県", en: "Mie" },
  25: { ja: "滋賀県", en: "Shiga" },
  26: { ja: "京都府", en: "Kyoto" },
  27: { ja: "大阪府", en: "Osaka" },
  28: { ja: "兵庫県", en: "Hyogo" },
  29: { ja: "奈良県", en: "Nara" },
  30: { ja: "和歌山県", en: "Wakayama" },
  31: { ja: "鳥取県", en: "Tottori" },
  32: { ja: "島根県", en: "Shimane" },
  33: { ja: "岡山県", en: "Okayama" },
  34: { ja: "広島県", en: "Hiroshima" },
  35: { ja: "山口県", en: "Yamaguchi" },
  36: { ja: "徳島県", en: "Tokushima" },
  37: { ja: "香川県", en: "Kagawa" },
  38: { ja: "愛媛県", en: "Ehime" },
  39: { ja: "高知県", en: "Kochi" },
  40: { ja: "福岡県", en: "Fukuoka" },
  41: { ja: "佐賀県", en: "Saga" },
  42: { ja: "長崎県", en: "Nagasaki" },
  43: { ja: "熊本県", en: "Kumamoto" },
  44: { ja: "大分県", en: "Oita" },
  45: { ja: "宮崎県", en: "Miyazaki" },
  46: { ja: "鹿児島県", en: "Kagoshima" },
  47: { ja: "沖縄県", en: "Okinawa" },
};
const regionsNameToIdMapJp = new Map(optionRegionsJP.map((id) => [mappingRegionsJp[id].ja, id]));

// ----------------------------------- 市区町村 -----------------------------------
// 🔸北海道 1 / 188件 1 ~ 188 -----------------------------------
// const optionCitiesHokkaido01 = Array(188)
//   .fill(null)
//   .map((option, index) => index + 1);
const optionCitiesHokkaido01 = [
  "札幌市中央区",
  "札幌市北区",
  "札幌市東区",
  "札幌市白石区",
  "札幌市豊平区",
  "札幌市南区",
  "札幌市西区",
  "札幌市厚別区",
  "札幌市手稲区",
  "札幌市清田区",
  "函館市",
  "小樽市",
  "旭川市",
  "室蘭市",
  "釧路市",
  "帯広市",
  "北見市",
  "夕張市",
  "岩見沢市",
  "網走市",
  "留萌市",
  "苫小牧市",
  "稚内市",
  "美唄市",
  "芦別市",
  "江別市",
  "赤平市",
  "紋別市",
  "士別市",
  "名寄市",
  "三笠市",
  "根室市",
  "千歳市",
  "滝川市",
  "砂川市",
  "歌志内市",
  "深川市",
  "富良野市",
  "登別市",
  "恵庭市",
  "伊達市",
  "北広島市",
  "石狩市",
  "北斗市",
  "石狩郡当別町",
  "石狩郡新篠津村",
  "松前郡松前町",
  "松前郡福島町",
  "上磯郡知内町",
  "上磯郡木古内町",
  "亀田郡七飯町",
  "茅部郡鹿部町",
  "茅部郡森町",
  "二海郡八雲町",
  "山越郡長万部町",
  "檜山郡江差町",
  "檜山郡上ノ国町",
  "檜山郡厚沢部町",
  "爾志郡乙部町",
  "奥尻郡奥尻町",
  "瀬棚郡今金町",
  "久遠郡せたな町",
  "島牧郡島牧村",
  "寿都郡寿都町",
  "寿都郡黒松内町",
  "磯谷郡蘭越町",
  "虻田郡ニセコ町",
  "虻田郡真狩村",
  "虻田郡留寿都村",
  "虻田郡喜茂別町",
  "虻田郡京極町",
  "虻田郡倶知安町",
  "岩内郡共和町",
  "岩内郡岩内町",
  "古宇郡泊村",
  "古宇郡神恵内村",
  "積丹郡積丹町",
  "古平郡古平町",
  "余市郡仁木町",
  "余市郡余市町",
  "余市郡赤井川村",
  "空知郡南幌町",
  "空知郡奈井江町",
  "空知郡上砂川町",
  "夕張郡由仁町",
  "夕張郡長沼町",
  "夕張郡栗山町",
  "樺戸郡月形町",
  "樺戸郡浦臼町",
  "樺戸郡新十津川町",
  "雨竜郡妹背牛町",
  "雨竜郡秩父別町",
  "雨竜郡雨竜町",
  "雨竜郡北竜町",
  "雨竜郡沼田町",
  "上川郡鷹栖町",
  "上川郡東神楽町",
  "上川郡当麻町",
  "上川郡比布町",
  "上川郡愛別町",
  "上川郡上川町",
  "上川郡東川町",
  "上川郡美瑛町",
  "空知郡上富良野町",
  "空知郡中富良野町",
  "空知郡南富良野町",
  "勇払郡占冠村",
  "上川郡和寒町",
  "上川郡剣淵町",
  "上川郡下川町",
  "中川郡美深町",
  "中川郡音威子府村",
  "中川郡中川町",
  "雨竜郡幌加内町",
  "増毛郡増毛町",
  "留萌郡小平町",
  "苫前郡苫前町",
  "苫前郡羽幌町",
  "苫前郡初山別村",
  "天塩郡遠別町",
  "天塩郡天塩町",
  "宗谷郡猿払村",
  "枝幸郡浜頓別町",
  "枝幸郡中頓別町",
  "枝幸郡枝幸町",
  "天塩郡豊富町",
  "礼文郡礼文町",
  "利尻郡利尻町",
  "利尻郡利尻富士町",
  "天塩郡幌延町",
  "網走郡美幌町",
  "網走郡津別町",
  "斜里郡斜里町",
  "斜里郡清里町",
  "斜里郡小清水町",
  "常呂郡訓子府町",
  "常呂郡置戸町",
  "常呂郡佐呂間町",
  "紋別郡遠軽町",
  "紋別郡湧別町",
  "紋別郡滝上町",
  "紋別郡興部町",
  "紋別郡西興部村",
  "紋別郡雄武町",
  "網走郡大空町",
  "虻田郡豊浦町",
  "有珠郡壮瞥町",
  "白老郡白老町",
  "勇払郡厚真町",
  "虻田郡洞爺湖町",
  "勇払郡安平町",
  "勇払郡むかわ町",
  "沙流郡日高町",
  "沙流郡平取町",
  "新冠郡新冠町",
  "浦河郡浦河町",
  "様似郡様似町",
  "幌泉郡えりも町",
  "日高郡新ひだか町",
  "河東郡音更町",
  "河東郡士幌町",
  "河東郡上士幌町",
  "河東郡鹿追町",
  "上川郡新得町",
  "上川郡清水町",
  "河西郡芽室町",
  "河西郡中札内村",
  "河西郡更別村",
  "広尾郡大樹町",
  "広尾郡広尾町",
  "中川郡幕別町",
  "中川郡池田町",
  "中川郡豊頃町",
  "中川郡本別町",
  "足寄郡足寄町",
  "足寄郡陸別町",
  "十勝郡浦幌町",
  "釧路郡釧路町",
  "厚岸郡厚岸町",
  "厚岸郡浜中町",
  "川上郡標茶町",
  "川上郡弟子屈町",
  "阿寒郡鶴居村",
  "白糠郡白糠町",
  "野付郡別海町",
  "標津郡中標津町",
  "標津郡標津町",
  "目梨郡羅臼町",
];

// const mappingCitiesHokkaido01: { [key: number]: { [key: string | "ja" | "en"]: string } } = optionCitiesHokkaido01Jp.forEach((id) => ())

// 都道府県名 => id のMapオブジェクト 1 ~ 188
const citiesNameToIdMapHokkaido01 = new Map(optionCitiesHokkaido01.map((cityName, index) => [cityName, index + 1]));

// 🔸青森県 2 / 40件 189 ~ 228 -----------------------------------

const optionCitiesAomori02 = [
  "青森市",
  "弘前市",
  "八戸市",
  "黒石市",
  "五所川原市",
  "十和田市",
  "三沢市",
  "むつ市",
  "つがる市",
  "平川市",
  "東津軽郡平内町",
  "東津軽郡今別町",
  "東津軽郡蓬田村",
  "東津軽郡外ヶ浜町",
  "西津軽郡鰺ヶ沢町",
  "西津軽郡深浦町",
  "中津軽郡西目屋村",
  "南津軽郡藤崎町",
  "南津軽郡大鰐町",
  "南津軽郡田舎館村",
  "北津軽郡板柳町",
  "北津軽郡鶴田町",
  "北津軽郡中泊町",
  "上北郡野辺地町",
  "上北郡七戸町",
  "上北郡六戸町",
  "上北郡横浜町",
  "上北郡東北町",
  "上北郡六ヶ所村",
  "上北郡おいらせ町",
  "下北郡大間町",
  "下北郡東通村",
  "下北郡風間浦村",
  "下北郡佐井村",
  "三戸郡三戸町",
  "三戸郡五戸町",
  "三戸郡田子町",
  "三戸郡南部町",
  "三戸郡階上町",
  "三戸郡新郷村",
];

// 都道府県名 => id のMapオブジェクト 189 ~ 228 = 39(228-189)
const citiesNameToIdMapAomori02 = new Map(optionCitiesAomori02.map((cityName, index) => [cityName, 189 + index]));

// 🔸岩手県 3 / 33件 229 ~ 261 -----------------------------------

const optionCitiesIwate03 = [
  "盛岡市",
  "宮古市",
  "大船渡市",
  "花巻市",
  "北上市",
  "久慈市",
  "遠野市",
  "一関市",
  "陸前高田市",
  "釜石市",
  "二戸市",
  "八幡平市",
  "奥州市",
  "滝沢市",
  "岩手郡雫石町",
  "岩手郡葛巻町",
  "岩手郡岩手町",
  "紫波郡紫波町",
  "紫波郡矢巾町",
  "和賀郡西和賀町",
  "胆沢郡金ケ崎町",
  "西磐井郡平泉町",
  "気仙郡住田町",
  "上閉伊郡大槌町",
  "下閉伊郡山田町",
  "下閉伊郡岩泉町",
  "下閉伊郡田野畑村",
  "下閉伊郡普代村",
  "九戸郡軽米町",
  "九戸郡野田村",
  "九戸郡九戸村",
  "九戸郡洋野町",
  "二戸郡一戸町",
];

// 都道府県名 => id のMapオブジェクト 229 ~ 261
const citiesNameToIdMapIwate03 = new Map(optionCitiesIwate03.map((cityName, index) => [cityName, 229 + index]));

// 🔸宮城県 4 / 25件 262 ~ 300 -----------------------------------

const optionCitiesMiyagi04 = [
  "仙台市青葉区",
  "仙台市宮城野区",
  "仙台市若林区",
  "仙台市太白区",
  "仙台市泉区",
  "石巻市",
  "塩竈市",
  "気仙沼市",
  "白石市",
  "名取市",
  "角田市",
  "多賀城市",
  "岩沼市",
  "登米市",
  "栗原市",
  "東松島市",
  "大崎市",
  "富谷市",
  "刈田郡蔵王町",
  "刈田郡七ヶ宿町",
  "柴田郡大河原町",
  "柴田郡村田町",
  "柴田郡柴田町",
  "柴田郡川崎町",
  "伊具郡丸森町",
  "亘理郡亘理町",
  "亘理郡山元町",
  "宮城郡松島町",
  "宮城郡七ヶ浜町",
  "宮城郡利府町",
  "黒川郡大和町",
  "黒川郡大郷町",
  "黒川郡大衡村",
  "加美郡色麻町",
  "加美郡加美町",
  "遠田郡涌谷町",
  "遠田郡美里町",
  "牡鹿郡女川町",
  "本吉郡南三陸町",
];

// 都道府県名 => id のMapオブジェクト 262 ~ 300
const citiesNameToIdMapMiyagi04 = new Map(optionCitiesMiyagi04.map((cityName, index) => [cityName, 262 + index]));

// 🔸秋田県 5 / 25件 301 ~ 325 -----------------------------------

const optionCitiesAkita05 = [
  "秋田市",
  "能代市",
  "横手市",
  "大館市",
  "男鹿市",
  "湯沢市",
  "鹿角市",
  "由利本荘市",
  "潟上市",
  "大仙市",
  "北秋田市",
  "にかほ市",
  "仙北市",
  "鹿角郡小坂町",
  "北秋田郡上小阿仁村",
  "山本郡藤里町",
  "山本郡三種町",
  "山本郡八峰町",
  "南秋田郡五城目町",
  "南秋田郡八郎潟町",
  "南秋田郡井川町",
  "南秋田郡大潟村",
  "仙北郡美郷町",
  "雄勝郡羽後町",
  "雄勝郡東成瀬村",
];

// 都道府県名 => id のMapオブジェクト 301 ~ 325
const citiesNameToIdMapAkita05 = new Map(optionCitiesAkita05.map((cityName, index) => [cityName, 301 + index]));

// 🔸山形県 6 / 25件 326 ~ 360 -----------------------------------

const optionCitiesYamagata06 = [
  "山形市",
  "米沢市",
  "鶴岡市",
  "酒田市",
  "新庄市",
  "寒河江市",
  "上山市",
  "村山市",
  "長井市",
  "天童市",
  "東根市",
  "尾花沢市",
  "南陽市",
  "東村山郡山辺町",
  "東村山郡中山町",
  "西村山郡河北町",
  "西村山郡西川町",
  "西村山郡朝日町",
  "西村山郡大江町",
  "北村山郡大石田町",
  "最上郡金山町",
  "最上郡最上町",
  "最上郡舟形町",
  "最上郡真室川町",
  "最上郡大蔵村",
  "最上郡鮭川村",
  "最上郡戸沢村",
  "東置賜郡高畠町",
  "東置賜郡川西町",
  "西置賜郡小国町",
  "西置賜郡白鷹町",
  "西置賜郡飯豊町",
  "東田川郡三川町",
  "東田川郡庄内町",
  "飽海郡遊佐町",
];

// 都道府県名 => id のMapオブジェクト 326 ~ 360
const citiesNameToIdMapYamagata06 = new Map(optionCitiesYamagata06.map((cityName, index) => [cityName, 326 + index]));

// 🔸福島県 7 / 59件 361 ~ 419 -----------------------------------

const optionCitiesFukushima07 = [
  "福島市",
  "会津若松市",
  "郡山市",
  "いわき市",
  "白河市",
  "須賀川市",
  "喜多方市",
  "相馬市",
  "二本松市",
  "田村市",
  "南相馬市",
  "伊達市",
  "本宮市",
  "伊達郡桑折町",
  "伊達郡国見町",
  "伊達郡川俣町",
  "安達郡大玉村",
  "岩瀬郡鏡石町",
  "岩瀬郡天栄村",
  "南会津郡下郷町",
  "南会津郡檜枝岐村",
  "南会津郡只見町",
  "南会津郡南会津町",
  "耶麻郡北塩原村",
  "耶麻郡西会津町",
  "耶麻郡磐梯町",
  "耶麻郡猪苗代町",
  "河沼郡会津坂下町",
  "河沼郡湯川村",
  "河沼郡柳津町",
  "大沼郡三島町",
  "大沼郡金山町",
  "大沼郡昭和村",
  "大沼郡会津美里町",
  "西白河郡西郷村",
  "西白河郡泉崎村",
  "西白河郡中島村",
  "西白河郡矢吹町",
  "東白川郡棚倉町",
  "東白川郡矢祭町",
  "東白川郡塙町",
  "東白川郡鮫川村",
  "石川郡石川町",
  "石川郡玉川村",
  "石川郡平田村",
  "石川郡浅川町",
  "石川郡古殿町",
  "田村郡三春町",
  "田村郡小野町",
  "双葉郡広野町",
  "双葉郡楢葉町",
  "双葉郡富岡町",
  "双葉郡川内村",
  "双葉郡大熊町",
  "双葉郡双葉町",
  "双葉郡浪江町",
  "双葉郡葛尾村",
  "相馬郡新地町",
  "相馬郡飯舘村",
];

// 都道府県名 => id のMapオブジェクト 361 ~ 419
const citiesNameToIdMapFukushima07 = new Map(optionCitiesFukushima07.map((cityName, index) => [cityName, 361 + index]));

// 🔸茨城県 8 / 44件 420 ~ 463 -----------------------------------

const optionCitiesIbaraki08 = [
  "水戸市",
  "日立市",
  "土浦市",
  "古河市",
  "石岡市",
  "結城市",
  "龍ケ崎市",
  "下妻市",
  "常総市",
  "常陸太田市",
  "高萩市",
  "北茨城市",
  "笠間市",
  "取手市",
  "牛久市",
  "つくば市",
  "ひたちなか市",
  "鹿嶋市",
  "潮来市",
  "守谷市",
  "常陸大宮市",
  "那珂市",
  "筑西市",
  "坂東市",
  "稲敷市",
  "かすみがうら市",
  "桜川市",
  "神栖市",
  "行方市",
  "鉾田市",
  "つくばみらい市",
  "小美玉市",
  "東茨城郡茨城町",
  "東茨城郡大洗町",
  "東茨城郡城里町",
  "那珂郡東海村",
  "久慈郡大子町",
  "稲敷郡美浦村",
  "稲敷郡阿見町",
  "稲敷郡河内町",
  "結城郡八千代町",
  "猿島郡五霞町",
  "猿島郡境町",
  "北相馬郡利根町",
];

// 都道府県名 => id のMapオブジェクト 44件 420 ~ 463
const citiesNameToIdMapIbaraki08 = new Map(optionCitiesIbaraki08.map((cityName, index) => [cityName, 420 + index]));

// 🔸栃木県 9 / 25件 464 ~ 488 -----------------------------------

const optionCitiesTochigi09 = [
  "宇都宮市",
  "足利市",
  "栃木市",
  "佐野市",
  "鹿沼市",
  "日光市",
  "小山市",
  "真岡市",
  "大田原市",
  "矢板市",
  "那須塩原市",
  "さくら市",
  "那須烏山市",
  "下野市",
  "河内郡上三川町",
  "芳賀郡益子町",
  "芳賀郡茂木町",
  "芳賀郡市貝町",
  "芳賀郡芳賀町",
  "下都賀郡壬生町",
  "下都賀郡野木町",
  "塩谷郡塩谷町",
  "塩谷郡高根沢町",
  "那須郡那須町",
  "那須郡那珂川町",
];

// 都道府県名 => id のMapオブジェクト 25件 464 ~ 488
const citiesNameToIdMapTochigi09 = new Map(optionCitiesTochigi09.map((cityName, index) => [cityName, 464 + index]));

// 🔸群馬県 10 / 35件 489 ~ 523 -----------------------------------

const optionCitiesGunma10 = [
  "前橋市",
  "高崎市",
  "桐生市",
  "伊勢崎市",
  "太田市",
  "沼田市",
  "館林市",
  "渋川市",
  "藤岡市",
  "富岡市",
  "安中市",
  "みどり市",
  "北群馬郡榛東村",
  "北群馬郡吉岡町",
  "多野郡上野村",
  "多野郡神流町",
  "甘楽郡下仁田町",
  "甘楽郡南牧村",
  "甘楽郡甘楽町",
  "吾妻郡中之条町",
  "吾妻郡長野原町",
  "吾妻郡嬬恋村",
  "吾妻郡草津町",
  "吾妻郡高山村",
  "吾妻郡東吾妻町",
  "利根郡片品村",
  "利根郡川場村",
  "利根郡昭和村",
  "利根郡みなかみ町",
  "佐波郡玉村町",
  "邑楽郡板倉町",
  "邑楽郡明和町",
  "邑楽郡千代田町",
  "邑楽郡大泉町",
  "邑楽郡邑楽町",
];

// 都道府県名 => id のMapオブジェクト 35件 489 ~ 523
const citiesNameToIdMapGunma10 = new Map(optionCitiesGunma10.map((cityName, index) => [cityName, 489 + index]));

// 🔸埼玉県 11 / 72件 524 ~ 595 -----------------------------------

const optionCitiesSaitama11 = [
  "さいたま市西区",
  "さいたま市北区",
  "さいたま市大宮区",
  "さいたま市見沼区",
  "さいたま市中央区",
  "さいたま市桜区",
  "さいたま市浦和区",
  "さいたま市南区",
  "さいたま市緑区",
  "さいたま市岩槻区",
  "川越市",
  "熊谷市",
  "川口市",
  "行田市",
  "秩父市",
  "所沢市",
  "飯能市",
  "加須市",
  "本庄市",
  "東松山市",
  "春日部市",
  "狭山市",
  "羽生市",
  "鴻巣市",
  "深谷市",
  "上尾市",
  "草加市",
  "越谷市",
  "蕨市",
  "戸田市",
  "入間市",
  "朝霞市",
  "志木市",
  "和光市",
  "新座市",
  "桶川市",
  "久喜市",
  "北本市",
  "八潮市",
  "富士見市",
  "三郷市",
  "蓮田市",
  "坂戸市",
  "幸手市",
  "鶴ヶ島市",
  "日高市",
  "吉川市",
  "ふじみ野市",
  "白岡市",
  "北足立郡伊奈町",
  "入間郡三芳町",
  "入間郡毛呂山町",
  "入間郡越生町",
  "比企郡滑川町",
  "比企郡嵐山町",
  "比企郡小川町",
  "比企郡川島町",
  "比企郡吉見町",
  "比企郡鳩山町",
  "比企郡ときがわ町",
  "秩父郡横瀬町",
  "秩父郡皆野町",
  "秩父郡長瀞町",
  "秩父郡小鹿野町",
  "秩父郡東秩父村",
  "児玉郡美里町",
  "児玉郡神川町",
  "児玉郡上里町",
  "大里郡寄居町",
  "南埼玉郡宮代町",
  "北葛飾郡杉戸町",
  "北葛飾郡松伏町",
];

// 都道府県名 => id のMapオブジェクト 72件 524 ~ 595
const citiesNameToIdMapSaitama11 = new Map(optionCitiesSaitama11.map((cityName, index) => [cityName, 524 + index]));

// 🔸千葉県 12 / 59件 596 ~ 654 -----------------------------------

const optionCitiesChiba12 = [
  "千葉市中央区",
  "千葉市花見川区",
  "千葉市稲毛区",
  "千葉市若葉区",
  "千葉市緑区",
  "千葉市美浜区",
  "銚子市",
  "市川市",
  "船橋市",
  "館山市",
  "木更津市",
  "松戸市",
  "野田市",
  "茂原市",
  "成田市",
  "佐倉市",
  "東金市",
  "旭市",
  "習志野市",
  "柏市",
  "勝浦市",
  "市原市",
  "流山市",
  "八千代市",
  "我孫子市",
  "鴨川市",
  "鎌ケ谷市",
  "君津市",
  "富津市",
  "浦安市",
  "四街道市",
  "袖ケ浦市",
  "八街市",
  "印西市",
  "白井市",
  "富里市",
  "南房総市",
  "匝瑳市",
  "香取市",
  "山武市",
  "いすみ市",
  "大網白里市",
  "印旛郡酒々井町",
  "印旛郡栄町",
  "香取郡神崎町",
  "香取郡多古町",
  "香取郡東庄町",
  "山武郡九十九里町",
  "山武郡芝山町",
  "山武郡横芝光町",
  "長生郡一宮町",
  "長生郡睦沢町",
  "長生郡長生村",
  "長生郡白子町",
  "長生郡長柄町",
  "長生郡長南町",
  "夷隅郡大多喜町",
  "夷隅郡御宿町",
  "安房郡鋸南町",
];

// 都道府県名 => id のMapオブジェクト 59件 596 ~ 654
const citiesNameToIdMapChiba12 = new Map(optionCitiesChiba12.map((cityName, index) => [cityName, 596 + index]));

// 🔸東京都 13 / 52件 655 ~ 716 -----------------------------------

const optionCitiesTokyo13 = [
  "千代田区",
  "中央区",
  "港区",
  "新宿区",
  "文京区",
  "台東区",
  "墨田区",
  "江東区",
  "品川区",
  "目黒区",
  "大田区",
  "世田谷区",
  "渋谷区",
  "中野区",
  "杉並区",
  "豊島区",
  "北区",
  "荒川区",
  "板橋区",
  "練馬区",
  "足立区",
  "葛飾区",
  "江戸川区",
  "八王子市",
  "立川市",
  "武蔵野市",
  "三鷹市",
  "青梅市",
  "府中市",
  "昭島市",
  "調布市",
  "町田市",
  "小金井市",
  "小平市",
  "日野市",
  "東村山市",
  "国分寺市",
  "国立市",
  "福生市",
  "狛江市",
  "東大和市",
  "清瀬市",
  "東久留米市",
  "武蔵村山市",
  "多摩市",
  "稲城市",
  "羽村市",
  "あきる野市",
  "西東京市",
  "西多摩郡瑞穂町",
  "西多摩郡日の出町",
  "西多摩郡檜原村",
  "西多摩郡奥多摩町",
  "大島町",
  "利島村",
  "新島村",
  "神津島村",
  "三宅島三宅村",
  "御蔵島村",
  "八丈島八丈町",
  "青ヶ島村",
  "小笠原村",
];

// 都道府県名 => id のMapオブジェクト 52件 655 ~ 716
const citiesNameToIdMapTokyo13 = new Map(optionCitiesTokyo13.map((cityName, index) => [cityName, 655 + index]));

// 🔸神奈川県 14 / 58件 717 ~ 774 -----------------------------------

const optionCitiesKanagawa14 = [
  "横浜市鶴見区",
  "横浜市神奈川区",
  "横浜市西区",
  "横浜市中区",
  "横浜市南区",
  "横浜市保土ケ谷区",
  "横浜市磯子区",
  "横浜市金沢区",
  "横浜市港北区",
  "横浜市戸塚区",
  "横浜市港南区",
  "横浜市旭区",
  "横浜市緑区",
  "横浜市瀬谷区",
  "横浜市栄区",
  "横浜市泉区",
  "横浜市青葉区",
  "横浜市都筑区",
  "川崎市川崎区",
  "川崎市幸区",
  "川崎市中原区",
  "川崎市高津区",
  "川崎市多摩区",
  "川崎市宮前区",
  "川崎市麻生区",
  "相模原市緑区",
  "相模原市中央区",
  "相模原市南区",
  "横須賀市",
  "平塚市",
  "鎌倉市",
  "藤沢市",
  "小田原市",
  "茅ヶ崎市",
  "逗子市",
  "三浦市",
  "秦野市",
  "厚木市",
  "大和市",
  "伊勢原市",
  "海老名市",
  "座間市",
  "南足柄市",
  "綾瀬市",
  "三浦郡葉山町",
  "高座郡寒川町",
  "中郡大磯町",
  "中郡二宮町",
  "足柄上郡中井町",
  "足柄上郡大井町",
  "足柄上郡松田町",
  "足柄上郡山北町",
  "足柄上郡開成町",
  "足柄下郡箱根町",
  "足柄下郡真鶴町",
  "足柄下郡湯河原町",
  "愛甲郡愛川町",
  "愛甲郡清川村",
];

// 都道府県名 => id のMapオブジェクト 58件 717 ~ 774
const citiesNameToIdMapKanagawa14 = new Map(optionCitiesKanagawa14.map((cityName, index) => [cityName, 717 + index]));

// 🔸新潟県 15 / 37件 775 ~ 811 -----------------------------------

const optionCitiesNiigata15 = [
  "新潟市北区",
  "新潟市東区",
  "新潟市中央区",
  "新潟市江南区",
  "新潟市秋葉区",
  "新潟市南区",
  "新潟市西区",
  "新潟市西蒲区",
  "長岡市",
  "三条市",
  "柏崎市",
  "新発田市",
  "小千谷市",
  "加茂市",
  "十日町市",
  "見附市",
  "村上市",
  "燕市",
  "糸魚川市",
  "妙高市",
  "五泉市",
  "上越市",
  "阿賀野市",
  "佐渡市",
  "魚沼市",
  "南魚沼市",
  "胎内市",
  "北蒲原郡聖籠町",
  "西蒲原郡弥彦村",
  "南蒲原郡田上町",
  "東蒲原郡阿賀町",
  "三島郡出雲崎町",
  "南魚沼郡湯沢町",
  "中魚沼郡津南町",
  "刈羽郡刈羽村",
  "岩船郡関川村",
  "岩船郡粟島浦村",
];

// 都道府県名 => id のMapオブジェクト 37件 775 ~ 811
const citiesNameToIdMapNiigata15 = new Map(optionCitiesNiigata15.map((cityName, index) => [cityName, 775 + index]));

// 🔸富山県 16 / 15件 812 ~ 826 -----------------------------------

const optionCitiesToyama16 = [
  "富山市",
  "高岡市",
  "魚津市",
  "氷見市",
  "滑川市",
  "黒部市",
  "砺波市",
  "小矢部市",
  "南砺市",
  "射水市",
  "中新川郡舟橋村",
  "中新川郡上市町",
  "中新川郡立山町",
  "下新川郡入善町",
  "下新川郡朝日町",
];

// 都道府県名 => id のMapオブジェクト 15件 812 ~ 826
const citiesNameToIdMapToyama16 = new Map(optionCitiesToyama16.map((cityName, index) => [cityName, 812 + index]));

// 🔸石川県 17 / 19件 827 ~ 845 -----------------------------------

const optionCitiesIshikawa17 = [
  "金沢市",
  "七尾市",
  "小松市",
  "輪島市",
  "珠洲市",
  "加賀市",
  "羽咋市",
  "かほく市",
  "白山市",
  "能美市",
  "野々市市",
  "能美郡川北町",
  "河北郡津幡町",
  "河北郡内灘町",
  "羽咋郡志賀町",
  "羽咋郡宝達志水町",
  "鹿島郡中能登町",
  "鳳珠郡穴水町",
  "鳳珠郡能登町",
];

// 都道府県名 => id のMapオブジェクト 19件 827 ~ 845
const citiesNameToIdMapIshikawa17 = new Map(optionCitiesIshikawa17.map((cityName, index) => [cityName, 827 + index]));

// 🔸福井県 18 / 17件 846 ~ 862 -----------------------------------

const optionCitiesFukui18 = [
  "福井市",
  "敦賀市",
  "小浜市",
  "大野市",
  "勝山市",
  "鯖江市",
  "あわら市",
  "越前市",
  "坂井市",
  "吉田郡永平寺町",
  "今立郡池田町",
  "南条郡南越前町",
  "丹生郡越前町",
  "三方郡美浜町",
  "大飯郡高浜町",
  "大飯郡おおい町",
  "三方上中郡若狭町",
];

// 都道府県名 => id のMapオブジェクト 17件 846 ~ 862
const citiesNameToIdMapFukui18 = new Map(optionCitiesFukui18.map((cityName, index) => [cityName, 846 + index]));

// 🔸山梨県 19 / 27件 863 ~ 889 -----------------------------------

const optionCitiesYamanashi19 = [
  "甲府市",
  "富士吉田市",
  "都留市",
  "山梨市",
  "大月市",
  "韮崎市",
  "南アルプス市",
  "北杜市",
  "甲斐市",
  "笛吹市",
  "上野原市",
  "甲州市",
  "中央市",
  "西八代郡市川三郷町",
  "南巨摩郡早川町",
  "南巨摩郡身延町",
  "南巨摩郡南部町",
  "南巨摩郡富士川町",
  "中巨摩郡昭和町",
  "南都留郡道志村",
  "南都留郡西桂町",
  "南都留郡忍野村",
  "南都留郡山中湖村",
  "南都留郡鳴沢村",
  "南都留郡富士河口湖町",
  "北都留郡小菅村",
  "北都留郡丹波山村",
];

// 都道府県名 => id のMapオブジェクト 27件 863 ~ 889
const citiesNameToIdMapYamanashi19 = new Map(optionCitiesYamanashi19.map((cityName, index) => [cityName, 863 + index]));

// 🔸長野県 20 / 77件 890 ~ 966 -----------------------------------

const optionCitiesNagano20 = [
  "長野市",
  "松本市",
  "上田市",
  "岡谷市",
  "飯田市",
  "諏訪市",
  "須坂市",
  "小諸市",
  "伊那市",
  "駒ヶ根市",
  "中野市",
  "大町市",
  "飯山市",
  "茅野市",
  "塩尻市",
  "佐久市",
  "千曲市",
  "東御市",
  "安曇野市",
  "南佐久郡小海町",
  "南佐久郡川上村",
  "南佐久郡南牧村",
  "南佐久郡南相木村",
  "南佐久郡北相木村",
  "南佐久郡佐久穂町",
  "北佐久郡軽井沢町",
  "北佐久郡御代田町",
  "北佐久郡立科町",
  "小県郡青木村",
  "小県郡長和町",
  "諏訪郡下諏訪町",
  "諏訪郡富士見町",
  "諏訪郡原村",
  "上伊那郡辰野町",
  "上伊那郡箕輪町",
  "上伊那郡飯島町",
  "上伊那郡南箕輪村",
  "上伊那郡中川村",
  "上伊那郡宮田村",
  "下伊那郡松川町",
  "下伊那郡高森町",
  "下伊那郡阿南町",
  "下伊那郡阿智村",
  "下伊那郡平谷村",
  "下伊那郡根羽村",
  "下伊那郡下條村",
  "下伊那郡売木村",
  "下伊那郡天龍村",
  "下伊那郡泰阜村",
  "下伊那郡喬木村",
  "下伊那郡豊丘村",
  "下伊那郡大鹿村",
  "木曽郡上松町",
  "木曽郡南木曽町",
  "木曽郡木祖村",
  "木曽郡王滝村",
  "木曽郡大桑村",
  "木曽郡木曽町",
  "東筑摩郡麻績村",
  "東筑摩郡生坂村",
  "東筑摩郡山形村",
  "東筑摩郡朝日村",
  "東筑摩郡筑北村",
  "北安曇郡池田町",
  "北安曇郡松川村",
  "北安曇郡白馬村",
  "北安曇郡小谷村",
  "埴科郡坂城町",
  "上高井郡小布施町",
  "上高井郡高山村",
  "下高井郡山ノ内町",
  "下高井郡木島平村",
  "下高井郡野沢温泉村",
  "上水内郡信濃町",
  "上水内郡小川村",
  "上水内郡飯綱町",
  "下水内郡栄村",
];

// 都道府県名 => id のMapオブジェクト 77件 890 ~ 966
const citiesNameToIdMapNagano20 = new Map(optionCitiesNagano20.map((cityName, index) => [cityName, 890 + index]));

// 🔸岐阜県 21 / 42件 967 ~ 1008 -----------------------------------

const optionCitiesGifu21 = [
  "岐阜市",
  "大垣市",
  "高山市",
  "多治見市",
  "関市",
  "中津川市",
  "美濃市",
  "瑞浪市",
  "羽島市",
  "恵那市",
  "美濃加茂市",
  "土岐市",
  "各務原市",
  "可児市",
  "山県市",
  "瑞穂市",
  "飛騨市",
  "本巣市",
  "郡上市",
  "下呂市",
  "海津市",
  "羽島郡岐南町",
  "羽島郡笠松町",
  "養老郡養老町",
  "不破郡垂井町",
  "不破郡関ケ原町",
  "安八郡神戸町",
  "安八郡輪之内町",
  "安八郡安八町",
  "揖斐郡揖斐川町",
  "揖斐郡大野町",
  "揖斐郡池田町",
  "本巣郡北方町",
  "加茂郡坂祝町",
  "加茂郡富加町",
  "加茂郡川辺町",
  "加茂郡七宗町",
  "加茂郡八百津町",
  "加茂郡白川町",
  "加茂郡東白川村",
  "可児郡御嵩町",
  "大野郡白川村",
];

// 都道府県名 => id のMapオブジェクト 42件 967 ~ 1008
const citiesNameToIdMapGifu21 = new Map(optionCitiesGifu21.map((cityName, index) => [cityName, 967 + index]));

// 🔸静岡県 22 / 39件 1009 ~ 1047 -----------------------------------

const optionCitiesShizuoka22 = [
  "静岡市葵区",
  "静岡市駿河区",
  "静岡市清水区",
  "浜松市中央区",
  "浜松市浜名区",
  "浜松市天竜区",
  "沼津市",
  "熱海市",
  "三島市",
  "富士宮市",
  "伊東市",
  "島田市",
  "富士市",
  "磐田市",
  "焼津市",
  "掛川市",
  "藤枝市",
  "御殿場市",
  "袋井市",
  "下田市",
  "裾野市",
  "湖西市",
  "伊豆市",
  "御前崎市",
  "菊川市",
  "伊豆の国市",
  "牧之原市",
  "賀茂郡東伊豆町",
  "賀茂郡河津町",
  "賀茂郡南伊豆町",
  "賀茂郡松崎町",
  "賀茂郡西伊豆町",
  "田方郡函南町",
  "駿東郡清水町",
  "駿東郡長泉町",
  "駿東郡小山町",
  "榛原郡吉田町",
  "榛原郡川根本町",
  "周智郡森町",
];

// 都道府県名 => id のMapオブジェクト 39件 1009 ~ 1047
const citiesNameToIdMapShizuoka22 = new Map(optionCitiesShizuoka22.map((cityName, index) => [cityName, 1009 + index]));

// 🔸愛知県 23 / 69件 1048 ~ 1116 -----------------------------------

const optionCitiesAichi23 = [
  "名古屋市千種区",
  "名古屋市東区",
  "名古屋市北区",
  "名古屋市西区",
  "名古屋市中村区",
  "名古屋市中区",
  "名古屋市昭和区",
  "名古屋市瑞穂区",
  "名古屋市熱田区",
  "名古屋市中川区",
  "名古屋市港区",
  "名古屋市南区",
  "名古屋市守山区",
  "名古屋市緑区",
  "名古屋市名東区",
  "名古屋市天白区",
  "豊橋市",
  "岡崎市",
  "一宮市",
  "瀬戸市",
  "半田市",
  "春日井市",
  "豊川市",
  "津島市",
  "碧南市",
  "刈谷市",
  "豊田市",
  "安城市",
  "西尾市",
  "蒲郡市",
  "犬山市",
  "常滑市",
  "江南市",
  "小牧市",
  "稲沢市",
  "新城市",
  "東海市",
  "大府市",
  "知多市",
  "知立市",
  "尾張旭市",
  "高浜市",
  "岩倉市",
  "豊明市",
  "日進市",
  "田原市",
  "愛西市",
  "清須市",
  "北名古屋市",
  "弥富市",
  "みよし市",
  "あま市",
  "長久手市",
  "愛知郡東郷町",
  "西春日井郡豊山町",
  "丹羽郡大口町",
  "丹羽郡扶桑町",
  "海部郡大治町",
  "海部郡蟹江町",
  "海部郡飛島村",
  "知多郡阿久比町",
  "知多郡東浦町",
  "知多郡南知多町",
  "知多郡美浜町",
  "知多郡武豊町",
  "額田郡幸田町",
  "北設楽郡設楽町",
  "北設楽郡東栄町",
  "北設楽郡豊根村",
];

// 都道府県名 => id のMapオブジェクト 69件 1048 ~ 1116
const citiesNameToIdMapAichi23 = new Map(optionCitiesAichi23.map((cityName, index) => [cityName, 1048 + index]));

// 🔸三重県 24 / 29件 1117 ~ 1145 -----------------------------------

const optionCitiesMie24 = [
  "津市",
  "四日市市",
  "伊勢市",
  "松阪市",
  "桑名市",
  "鈴鹿市",
  "名張市",
  "尾鷲市",
  "亀山市",
  "鳥羽市",
  "熊野市",
  "いなべ市",
  "志摩市",
  "伊賀市",
  "桑名郡木曽岬町",
  "員弁郡東員町",
  "三重郡菰野町",
  "三重郡朝日町",
  "三重郡川越町",
  "多気郡多気町",
  "多気郡明和町",
  "多気郡大台町",
  "度会郡玉城町",
  "度会郡度会町",
  "度会郡大紀町",
  "度会郡南伊勢町",
  "北牟婁郡紀北町",
  "南牟婁郡御浜町",
  "南牟婁郡紀宝町",
];

// 都道府県名 => id のMapオブジェクト 29件 1117 ~ 1145
const citiesNameToIdMapMie24 = new Map(optionCitiesMie24.map((cityName, index) => [cityName, 1117 + index]));

// 🔸滋賀県 25 / 19件 1146 ~ 1164 -----------------------------------

const optionCitiesShiga25 = [
  "大津市",
  "彦根市",
  "長浜市",
  "近江八幡市",
  "草津市",
  "守山市",
  "栗東市",
  "甲賀市",
  "野洲市",
  "湖南市",
  "高島市",
  "東近江市",
  "米原市",
  "蒲生郡日野町",
  "蒲生郡竜王町",
  "愛知郡愛荘町",
  "犬上郡豊郷町",
  "犬上郡甲良町",
  "犬上郡多賀町",
];

// 都道府県名 => id のMapオブジェクト 19件 1146 ~ 1164
const citiesNameToIdMapShiga25 = new Map(optionCitiesShiga25.map((cityName, index) => [cityName, 1146 + index]));

// 🔸京都府 26 / 36件 1165 ~ 1200 -----------------------------------

const optionCitiesKyoto26 = [
  "京都市北区",
  "京都市上京区",
  "京都市左京区",
  "京都市中京区",
  "京都市東山区",
  "京都市下京区",
  "京都市南区",
  "京都市右京区",
  "京都市伏見区",
  "京都市山科区",
  "京都市西京区",
  "福知山市",
  "舞鶴市",
  "綾部市",
  "宇治市",
  "宮津市",
  "亀岡市",
  "城陽市",
  "向日市",
  "長岡京市",
  "八幡市",
  "京田辺市",
  "京丹後市",
  "南丹市",
  "木津川市",
  "乙訓郡大山崎町",
  "久世郡久御山町",
  "綴喜郡井手町",
  "綴喜郡宇治田原町",
  "相楽郡笠置町",
  "相楽郡和束町",
  "相楽郡精華町",
  "相楽郡南山城村",
  "船井郡京丹波町",
  "与謝郡伊根町",
  "与謝郡与謝野町",
];

// 都道府県名 => id のMapオブジェクト 36件 1165 ~ 1200
const citiesNameToIdMapKyoto26 = new Map(optionCitiesKyoto26.map((cityName, index) => [cityName, 1165 + index]));

// 🔸大阪府 27 / 72件 1201 ~ 1272 -----------------------------------

const optionCitiesOsaka27 = [
  "大阪市都島区",
  "大阪市福島区",
  "大阪市此花区",
  "大阪市西区",
  "大阪市港区",
  "大阪市大正区",
  "大阪市天王寺区",
  "大阪市浪速区",
  "大阪市西淀川区",
  "大阪市東淀川区",
  "大阪市東成区",
  "大阪市生野区",
  "大阪市旭区",
  "大阪市城東区",
  "大阪市阿倍野区",
  "大阪市住吉区",
  "大阪市東住吉区",
  "大阪市西成区",
  "大阪市淀川区",
  "大阪市鶴見区",
  "大阪市住之江区",
  "大阪市平野区",
  "大阪市北区",
  "大阪市中央区",
  "堺市堺区",
  "堺市中区",
  "堺市東区",
  "堺市西区",
  "堺市南区",
  "堺市北区",
  "堺市美原区",
  "岸和田市",
  "豊中市",
  "池田市",
  "吹田市",
  "泉大津市",
  "高槻市",
  "貝塚市",
  "守口市",
  "枚方市",
  "茨木市",
  "八尾市",
  "泉佐野市",
  "富田林市",
  "寝屋川市",
  "河内長野市",
  "松原市",
  "大東市",
  "和泉市",
  "箕面市",
  "柏原市",
  "羽曳野市",
  "門真市",
  "摂津市",
  "高石市",
  "藤井寺市",
  "東大阪市",
  "泉南市",
  "四條畷市",
  "交野市",
  "大阪狭山市",
  "阪南市",
  "三島郡島本町",
  "豊能郡豊能町",
  "豊能郡能勢町",
  "泉北郡忠岡町",
  "泉南郡熊取町",
  "泉南郡田尻町",
  "泉南郡岬町",
  "南河内郡太子町",
  "南河内郡河南町",
  "南河内郡千早赤阪村",
];

// 都道府県名 => id のMapオブジェクト 72件 1201 ~ 1272
const citiesNameToIdMapOsaka27 = new Map(optionCitiesOsaka27.map((cityName, index) => [cityName, 1201 + index]));

// 🔸兵庫県 28 / 49件 1273 ~ 1321 -----------------------------------

const optionCitiesHyogo28 = [
  "神戸市東灘区",
  "神戸市灘区",
  "神戸市兵庫区",
  "神戸市長田区",
  "神戸市須磨区",
  "神戸市垂水区",
  "神戸市北区",
  "神戸市中央区",
  "神戸市西区",
  "姫路市",
  "尼崎市",
  "明石市",
  "西宮市",
  "洲本市",
  "芦屋市",
  "伊丹市",
  "相生市",
  "豊岡市",
  "加古川市",
  "赤穂市",
  "西脇市",
  "宝塚市",
  "三木市",
  "高砂市",
  "川西市",
  "小野市",
  "三田市",
  "加西市",
  "丹波篠山市",
  "養父市",
  "丹波市",
  "南あわじ市",
  "朝来市",
  "淡路市",
  "宍粟市",
  "加東市",
  "たつの市",
  "川辺郡猪名川町",
  "多可郡多可町",
  "加古郡稲美町",
  "加古郡播磨町",
  "神崎郡市川町",
  "神崎郡福崎町",
  "神崎郡神河町",
  "揖保郡太子町",
  "赤穂郡上郡町",
  "佐用郡佐用町",
  "美方郡香美町",
  "美方郡新温泉町",
];

// 都道府県名 => id のMapオブジェクト 49件 1273 ~ 1321
const citiesNameToIdMapHyogo28 = new Map(optionCitiesHyogo28.map((cityName, index) => [cityName, 1273 + index]));

// 🔸奈良県 29 / 39件 1322 ~ 1360 -----------------------------------

const optionCitiesNara29 = [
  "奈良市",
  "大和高田市",
  "大和郡山市",
  "天理市",
  "橿原市",
  "桜井市",
  "五條市",
  "御所市",
  "生駒市",
  "香芝市",
  "葛城市",
  "宇陀市",
  "山辺郡山添村",
  "生駒郡平群町",
  "生駒郡三郷町",
  "生駒郡斑鳩町",
  "生駒郡安堵町",
  "磯城郡川西町",
  "磯城郡三宅町",
  "磯城郡田原本町",
  "宇陀郡曽爾村",
  "宇陀郡御杖村",
  "高市郡高取町",
  "高市郡明日香村",
  "北葛城郡上牧町",
  "北葛城郡王寺町",
  "北葛城郡広陵町",
  "北葛城郡河合町",
  "吉野郡吉野町",
  "吉野郡大淀町",
  "吉野郡下市町",
  "吉野郡黒滝村",
  "吉野郡天川村",
  "吉野郡野迫川村",
  "吉野郡十津川村",
  "吉野郡下北山村",
  "吉野郡上北山村",
  "吉野郡川上村",
  "吉野郡東吉野村",
];

// 都道府県名 => id のMapオブジェクト 39件 1322 ~ 1360
const citiesNameToIdMapNara29 = new Map(optionCitiesNara29.map((cityName, index) => [cityName, 1322 + index]));

// 🔸和歌山県 30 / 30件 1361 ~ 1390 -----------------------------------

const optionCitiesWakayama30 = [
  "和歌山市",
  "海南市",
  "橋本市",
  "有田市",
  "御坊市",
  "田辺市",
  "新宮市",
  "紀の川市",
  "岩出市",
  "海草郡紀美野町",
  "伊都郡かつらぎ町",
  "伊都郡九度山町",
  "伊都郡高野町",
  "有田郡湯浅町",
  "有田郡広川町",
  "有田郡有田川町",
  "日高郡美浜町",
  "日高郡日高町",
  "日高郡由良町",
  "日高郡印南町",
  "日高郡みなべ町",
  "日高郡日高川町",
  "西牟婁郡白浜町",
  "西牟婁郡上富田町",
  "西牟婁郡すさみ町",
  "東牟婁郡那智勝浦町",
  "東牟婁郡太地町",
  "東牟婁郡古座川町",
  "東牟婁郡北山村",
  "東牟婁郡串本町",
];

// 都道府県名 => id のMapオブジェクト 30件 1361 ~ 1390
const citiesNameToIdMapWakayama30 = new Map(optionCitiesWakayama30.map((cityName, index) => [cityName, 1361 + index]));

// 🔸鳥取県 31 / 19件 1391 ~ 1409 -----------------------------------

const optionCitiesTottori31 = [
  "鳥取市",
  "米子市",
  "倉吉市",
  "境港市",
  "岩美郡岩美町",
  "八頭郡若桜町",
  "八頭郡智頭町",
  "八頭郡八頭町",
  "東伯郡三朝町",
  "東伯郡湯梨浜町",
  "東伯郡琴浦町",
  "東伯郡北栄町",
  "西伯郡日吉津村",
  "西伯郡大山町",
  "西伯郡南部町",
  "西伯郡伯耆町",
  "日野郡日南町",
  "日野郡日野町",
  "日野郡江府町",
];

// 都道府県名 => id のMapオブジェクト 19件 1391 ~ 1409
const citiesNameToIdMapTottori31 = new Map(optionCitiesTottori31.map((cityName, index) => [cityName, 1391 + index]));

// 🔸島根県 32 / 19件 1410 ~ 1428 -----------------------------------

const optionCitiesShimane32 = [
  "松江市",
  "浜田市",
  "出雲市",
  "益田市",
  "大田市",
  "安来市",
  "江津市",
  "雲南市",
  "仁多郡奥出雲町",
  "飯石郡飯南町",
  "邑智郡川本町",
  "邑智郡美郷町",
  "邑智郡邑南町",
  "鹿足郡津和野町",
  "鹿足郡吉賀町",
  "隠岐郡海士町",
  "隠岐郡西ノ島町",
  "隠岐郡知夫村",
  "隠岐郡隠岐の島町",
];

// 都道府県名 => id のMapオブジェクト 19件 1410 ~ 1428
const citiesNameToIdMapShimane32 = new Map(optionCitiesShimane32.map((cityName, index) => [cityName, 1410 + index]));

// 🔸岡山県 33 / 30件 1429 ~ 1458 -----------------------------------

const optionCitiesOkayama33 = [
  "岡山市北区",
  "岡山市中区",
  "岡山市東区",
  "岡山市南区",
  "倉敷市",
  "津山市",
  "玉野市",
  "笠岡市",
  "井原市",
  "総社市",
  "高梁市",
  "新見市",
  "備前市",
  "瀬戸内市",
  "赤磐市",
  "真庭市",
  "美作市",
  "浅口市",
  "和気郡和気町",
  "都窪郡早島町",
  "浅口郡里庄町",
  "小田郡矢掛町",
  "真庭郡新庄村",
  "苫田郡鏡野町",
  "勝田郡勝央町",
  "勝田郡奈義町",
  "英田郡西粟倉村",
  "久米郡久米南町",
  "久米郡美咲町",
  "加賀郡吉備中央町",
];

// 都道府県名 => id のMapオブジェクト 30件 1429 ~ 1458
const citiesNameToIdMapOkayama33 = new Map(optionCitiesOkayama33.map((cityName, index) => [cityName, 1429 + index]));

// 🔸広島県 34 / 30件 1459 ~ 1488 -----------------------------------

const optionCitiesHiroshima34 = [
  "広島市中区",
  "広島市東区",
  "広島市南区",
  "広島市西区",
  "広島市安佐南区",
  "広島市安佐北区",
  "広島市安芸区",
  "広島市佐伯区",
  "呉市",
  "竹原市",
  "三原市",
  "尾道市",
  "福山市",
  "府中市",
  "三次市",
  "庄原市",
  "大竹市",
  "東広島市",
  "廿日市市",
  "安芸高田市",
  "江田島市",
  "安芸郡府中町",
  "安芸郡海田町",
  "安芸郡熊野町",
  "安芸郡坂町",
  "山県郡安芸太田町",
  "山県郡北広島町",
  "豊田郡大崎上島町",
  "世羅郡世羅町",
  "神石郡神石高原町",
];

// 都道府県名 => id のMapオブジェクト 30件 1459 ~ 1488
const citiesNameToIdMapHiroshima34 = new Map(
  optionCitiesHiroshima34.map((cityName, index) => [cityName, 1459 + index])
);

// 🔸山口県 35 / 19件 1489 ~ 1507 -----------------------------------

const optionCitiesYamaguchi35 = [
  "下関市",
  "宇部市",
  "山口市",
  "萩市",
  "防府市",
  "下松市",
  "岩国市",
  "光市",
  "長門市",
  "柳井市",
  "美祢市",
  "周南市",
  "山陽小野田市",
  "大島郡周防大島町",
  "玖珂郡和木町",
  "熊毛郡上関町",
  "熊毛郡田布施町",
  "熊毛郡平生町",
  "阿武郡阿武町",
];

// 都道府県名 => id のMapオブジェクト 19件 1489 ~ 1507
const citiesNameToIdMapYamaguchi35 = new Map(
  optionCitiesYamaguchi35.map((cityName, index) => [cityName, 1489 + index])
);

// 🔸徳島県 36 / 24件 1508 ~ 1531 -----------------------------------

const optionCitiesTokushima36 = [
  "徳島市",
  "鳴門市",
  "小松島市",
  "阿南市",
  "吉野川市",
  "阿波市",
  "美馬市",
  "三好市",
  "勝浦郡勝浦町",
  "勝浦郡上勝町",
  "名東郡佐那河内村",
  "名西郡石井町",
  "名西郡神山町",
  "那賀郡那賀町",
  "海部郡牟岐町",
  "海部郡美波町",
  "海部郡海陽町",
  "板野郡松茂町",
  "板野郡北島町",
  "板野郡藍住町",
  "板野郡板野町",
  "板野郡上板町",
  "美馬郡つるぎ町",
  "三好郡東みよし町",
];

// 都道府県名 => id のMapオブジェクト 24件 1508 ~ 1531
const citiesNameToIdMapTokushima36 = new Map(
  optionCitiesTokushima36.map((cityName, index) => [cityName, 1508 + index])
);

// 🔸香川県 37 / 17件 1532 ~ 1548 -----------------------------------

const optionCitiesKagawa37 = [
  "高松市",
  "丸亀市",
  "坂出市",
  "善通寺市",
  "観音寺市",
  "さぬき市",
  "東かがわ市",
  "三豊市",
  "小豆郡土庄町",
  "小豆郡小豆島町",
  "木田郡三木町",
  "香川郡直島町",
  "綾歌郡宇多津町",
  "綾歌郡綾川町",
  "仲多度郡琴平町",
  "仲多度郡多度津町",
  "仲多度郡まんのう町",
];

// 都道府県名 => id のMapオブジェクト 17件 1532 ~ 1548
const citiesNameToIdMapKagawa37 = new Map(optionCitiesKagawa37.map((cityName, index) => [cityName, 1532 + index]));

// 🔸愛媛県 38 / 20件 1549 ~ 1568 -----------------------------------

const optionCitiesEhime38 = [
  "松山市",
  "今治市",
  "宇和島市",
  "八幡浜市",
  "新居浜市",
  "西条市",
  "大洲市",
  "伊予市",
  "四国中央市",
  "西予市",
  "東温市",
  "越智郡上島町",
  "上浮穴郡久万高原町",
  "伊予郡松前町",
  "伊予郡砥部町",
  "喜多郡内子町",
  "西宇和郡伊方町",
  "北宇和郡松野町",
  "北宇和郡鬼北町",
  "南宇和郡愛南町",
];

// 都道府県名 => id のMapオブジェクト 20件 1549 ~ 1568
const citiesNameToIdMapEhime38 = new Map(optionCitiesEhime38.map((cityName, index) => [cityName, 1549 + index]));

// 🔸高知県 39 / 34件 1569 ~ 1602 -----------------------------------

const optionCitiesKochi39 = [
  "高知市",
  "室戸市",
  "安芸市",
  "南国市",
  "土佐市",
  "須崎市",
  "宿毛市",
  "土佐清水市",
  "四万十市",
  "香南市",
  "香美市",
  "安芸郡東洋町",
  "安芸郡奈半利町",
  "安芸郡田野町",
  "安芸郡安田町",
  "安芸郡北川村",
  "安芸郡馬路村",
  "安芸郡芸西村",
  "長岡郡本山町",
  "長岡郡大豊町",
  "土佐郡土佐町",
  "土佐郡大川村",
  "吾川郡いの町",
  "吾川郡仁淀川町",
  "高岡郡中土佐町",
  "高岡郡佐川町",
  "高岡郡越知町",
  "高岡郡檮原町",
  "高岡郡日高村",
  "高岡郡津野町",
  "高岡郡四万十町",
  "幡多郡大月町",
  "幡多郡三原村",
  "幡多郡黒潮町",
];

// 都道府県名 => id のMapオブジェクト 34件 1569 ~ 1602
const citiesNameToIdMapKochi39 = new Map(optionCitiesKochi39.map((cityName, index) => [cityName, 1569 + index]));

// 🔸福岡県 40 / 72件 1603 ~ 1674 -----------------------------------

const optionCitiesFukuoka40 = [
  "北九州市門司区",
  "北九州市若松区",
  "北九州市戸畑区",
  "北九州市小倉北区",
  "北九州市小倉南区",
  "北九州市八幡東区",
  "北九州市八幡西区",
  "福岡市東区",
  "福岡市博多区",
  "福岡市中央区",
  "福岡市南区",
  "福岡市西区",
  "福岡市城南区",
  "福岡市早良区",
  "大牟田市",
  "久留米市",
  "直方市",
  "飯塚市",
  "田川市",
  "柳川市",
  "八女市",
  "筑後市",
  "大川市",
  "行橋市",
  "豊前市",
  "中間市",
  "小郡市",
  "筑紫野市",
  "春日市",
  "大野城市",
  "宗像市",
  "太宰府市",
  "古賀市",
  "福津市",
  "うきは市",
  "宮若市",
  "嘉麻市",
  "朝倉市",
  "みやま市",
  "糸島市",
  "那珂川市",
  "糟屋郡宇美町",
  "糟屋郡篠栗町",
  "糟屋郡志免町",
  "糟屋郡須惠町",
  "糟屋郡新宮町",
  "糟屋郡久山町",
  "糟屋郡粕屋町",
  "遠賀郡芦屋町",
  "遠賀郡水巻町",
  "遠賀郡岡垣町",
  "遠賀郡遠賀町",
  "鞍手郡小竹町",
  "鞍手郡鞍手町",
  "嘉穂郡桂川町",
  "朝倉郡筑前町",
  "朝倉郡東峰村",
  "三井郡大刀洗町",
  "三潴郡大木町",
  "八女郡広川町",
  "田川郡香春町",
  "田川郡添田町",
  "田川郡糸田町",
  "田川郡川崎町",
  "田川郡大任町",
  "田川郡赤村",
  "田川郡福智町",
  "京都郡苅田町",
  "京都郡みやこ町",
  "築上郡吉富町",
  "築上郡上毛町",
  "築上郡築上町",
];

// 都道府県名 => id のMapオブジェクト 72件 1603 ~ 1674
const citiesNameToIdMapFukuoka40 = new Map(optionCitiesFukuoka40.map((cityName, index) => [cityName, 1603 + index]));

// 🔸佐賀県 41 / 20件 1675 ~ 1694 -----------------------------------

const optionCitiesSaga41 = [
  "佐賀市",
  "唐津市",
  "鳥栖市",
  "多久市",
  "伊万里市",
  "武雄市",
  "鹿島市",
  "小城市",
  "嬉野市",
  "神埼市",
  "神埼郡吉野ヶ里町",
  "三養基郡基山町",
  "三養基郡上峰町",
  "三養基郡みやき町",
  "東松浦郡玄海町",
  "西松浦郡有田町",
  "杵島郡大町町",
  "杵島郡江北町",
  "杵島郡白石町",
  "藤津郡太良町",
];

// 都道府県名 => id のMapオブジェクト 20件 1675 ~ 1694
const citiesNameToIdMapSaga41 = new Map(optionCitiesSaga41.map((cityName, index) => [cityName, 1675 + index]));

// 🔸長崎県 42 / 21件 1695 ~ 1715 -----------------------------------

const optionCitiesNagasaki42 = [
  "長崎市",
  "佐世保市",
  "島原市",
  "諫早市",
  "大村市",
  "平戸市",
  "松浦市",
  "対馬市",
  "壱岐市",
  "五島市",
  "西海市",
  "雲仙市",
  "南島原市",
  "西彼杵郡長与町",
  "西彼杵郡時津町",
  "東彼杵郡東彼杵町",
  "東彼杵郡川棚町",
  "東彼杵郡波佐見町",
  "北松浦郡小値賀町",
  "北松浦郡佐々町",
  "南松浦郡新上五島町",
];

// 都道府県名 => id のMapオブジェクト 21件 1695 ~ 1715
const citiesNameToIdMapNagasaki42 = new Map(optionCitiesNagasaki42.map((cityName, index) => [cityName, 1695 + index]));

// 🔸熊本県 43 / 49件 1716 ~ 1764 -----------------------------------

const optionCitiesKumamoto43 = [
  "熊本市中央区",
  "熊本市東区",
  "熊本市西区",
  "熊本市南区",
  "熊本市北区",
  "八代市",
  "人吉市",
  "荒尾市",
  "水俣市",
  "玉名市",
  "山鹿市",
  "菊池市",
  "宇土市",
  "上天草市",
  "宇城市",
  "阿蘇市",
  "天草市",
  "合志市",
  "下益城郡美里町",
  "玉名郡玉東町",
  "玉名郡南関町",
  "玉名郡長洲町",
  "玉名郡和水町",
  "菊池郡大津町",
  "菊池郡菊陽町",
  "阿蘇郡南小国町",
  "阿蘇郡小国町",
  "阿蘇郡産山村",
  "阿蘇郡高森町",
  "阿蘇郡西原村",
  "阿蘇郡南阿蘇村",
  "上益城郡御船町",
  "上益城郡嘉島町",
  "上益城郡益城町",
  "上益城郡甲佐町",
  "上益城郡山都町",
  "八代郡氷川町",
  "葦北郡芦北町",
  "葦北郡津奈木町",
  "球磨郡錦町",
  "球磨郡多良木町",
  "球磨郡湯前町",
  "球磨郡水上村",
  "球磨郡相良村",
  "球磨郡五木村",
  "球磨郡山江村",
  "球磨郡球磨村",
  "球磨郡あさぎり町",
  "天草郡苓北町",
];

// 都道府県名 => id のMapオブジェクト 49件 1716 ~ 1764
const citiesNameToIdMapKumamoto43 = new Map(optionCitiesKumamoto43.map((cityName, index) => [cityName, 1716 + index]));

// 🔸大分県 44 / 18件 1765 ~ 1782 -----------------------------------

const optionCitiesOita44 = [
  "大分市",
  "別府市",
  "中津市",
  "日田市",
  "佐伯市",
  "臼杵市",
  "津久見市",
  "竹田市",
  "豊後高田市",
  "杵築市",
  "宇佐市",
  "豊後大野市",
  "由布市",
  "国東市",
  "東国東郡姫島村",
  "速見郡日出町",
  "玖珠郡九重町",
  "玖珠郡玖珠町",
];

// 都道府県名 => id のMapオブジェクト 18件 1765 ~ 1782
const citiesNameToIdMapOita44 = new Map(optionCitiesOita44.map((cityName, index) => [cityName, 1765 + index]));

// 🔸宮崎県 45 / 26件 1783 ~ 1808 -----------------------------------

const optionCitiesMiyazaki45 = [
  "宮崎市",
  "都城市",
  "延岡市",
  "日南市",
  "小林市",
  "日向市",
  "串間市",
  "西都市",
  "えびの市",
  "北諸県郡三股町",
  "西諸県郡高原町",
  "東諸県郡国富町",
  "東諸県郡綾町",
  "児湯郡高鍋町",
  "児湯郡新富町",
  "児湯郡西米良村",
  "児湯郡木城町",
  "児湯郡川南町",
  "児湯郡都農町",
  "東臼杵郡門川町",
  "東臼杵郡諸塚村",
  "東臼杵郡椎葉村",
  "東臼杵郡美郷町",
  "西臼杵郡高千穂町",
  "西臼杵郡日之影町",
  "西臼杵郡五ヶ瀬町",
];

// 都道府県名 => id のMapオブジェクト 26件 1783 ~ 1808
const citiesNameToIdMapMiyazaki45 = new Map(optionCitiesMiyazaki45.map((cityName, index) => [cityName, 1783 + index]));

// 🔸鹿児島県 46 / 43件 1809 ~ 1851 -----------------------------------

const optionCitiesKagoshima46 = [
  "鹿児島市",
  "鹿屋市",
  "枕崎市",
  "阿久根市",
  "出水市",
  "指宿市",
  "西之表市",
  "垂水市",
  "薩摩川内市",
  "日置市",
  "曽於市",
  "霧島市",
  "いちき串木野市",
  "南さつま市",
  "志布志市",
  "奄美市",
  "南九州市",
  "伊佐市",
  "姶良市",
  "鹿児島郡三島村",
  "鹿児島郡十島村",
  "薩摩郡さつま町",
  "出水郡長島町",
  "姶良郡湧水町",
  "曽於郡大崎町",
  "肝属郡東串良町",
  "肝属郡錦江町",
  "肝属郡南大隅町",
  "肝属郡肝付町",
  "熊毛郡中種子町",
  "熊毛郡南種子町",
  "熊毛郡屋久島町",
  "大島郡大和村",
  "大島郡宇検村",
  "大島郡瀬戸内町",
  "大島郡龍郷町",
  "大島郡喜界町",
  "大島郡徳之島町",
  "大島郡天城町",
  "大島郡伊仙町",
  "大島郡和泊町",
  "大島郡知名町",
  "大島郡与論町",
];

// 都道府県名 => id のMapオブジェクト 43件 1809 ~ 1851
const citiesNameToIdMapKagoshima46 = new Map(
  optionCitiesKagoshima46.map((cityName, index) => [cityName, 1809 + index])
);

// 🔸沖縄県 47 / 41件 1852 ~ 1892 -----------------------------------

const optionCitiesOkinawa47 = [
  "那覇市",
  "宜野湾市",
  "石垣市",
  "浦添市",
  "名護市",
  "糸満市",
  "沖縄市",
  "豊見城市",
  "うるま市",
  "宮古島市",
  "南城市",
  "国頭郡国頭村",
  "国頭郡大宜味村",
  "国頭郡東村",
  "国頭郡今帰仁村",
  "国頭郡本部町",
  "国頭郡恩納村",
  "国頭郡宜野座村",
  "国頭郡金武町",
  "国頭郡伊江村",
  "中頭郡読谷村",
  "中頭郡嘉手納町",
  "中頭郡北谷町",
  "中頭郡北中城村",
  "中頭郡中城村",
  "中頭郡西原町",
  "島尻郡与那原町",
  "島尻郡南風原町",
  "島尻郡渡嘉敷村",
  "島尻郡座間味村",
  "島尻郡粟国村",
  "島尻郡渡名喜村",
  "島尻郡南大東村",
  "島尻郡北大東村",
  "島尻郡伊平屋村",
  "島尻郡伊是名村",
  "島尻郡久米島町",
  "島尻郡八重瀬町",
  "宮古郡多良間村",
  "八重山郡竹富町",
  "八重山郡与那国町",
];

// 都道府県名 => id のMapオブジェクト 41件 1852 ~ 1892
const citiesNameToIdMapOkinawa47 = new Map(optionCitiesOkinawa47.map((cityName, index) => [cityName, 1852 + index]));

const regionNameToIdMapCitiesJp = {
  北海道: citiesNameToIdMapHokkaido01,
  青森県: citiesNameToIdMapAomori02,
  岩手県: citiesNameToIdMapIwate03,
  宮城県: citiesNameToIdMapMiyagi04,
  秋田県: citiesNameToIdMapAkita05,
  山形県: citiesNameToIdMapYamagata06,
  福島県: citiesNameToIdMapFukushima07,
  茨城県: citiesNameToIdMapIbaraki08,
  栃木県: citiesNameToIdMapTochigi09,
  群馬県: citiesNameToIdMapGunma10,
  埼玉県: citiesNameToIdMapSaitama11,
  千葉県: citiesNameToIdMapChiba12,
  東京都: citiesNameToIdMapTokyo13,
  神奈川県: citiesNameToIdMapKanagawa14,
  新潟県: citiesNameToIdMapNiigata15,
  富山県: citiesNameToIdMapToyama16,
  石川県: citiesNameToIdMapIshikawa17,
  福井県: citiesNameToIdMapFukui18,
  山梨県: citiesNameToIdMapYamanashi19,
  長野県: citiesNameToIdMapNagano20,
  岐阜県: citiesNameToIdMapGifu21,
  静岡県: citiesNameToIdMapShizuoka22,
  愛知県: citiesNameToIdMapAichi23,
  三重県: citiesNameToIdMapMie24,
  滋賀県: citiesNameToIdMapShiga25,
  京都府: citiesNameToIdMapKyoto26,
  大阪府: citiesNameToIdMapOsaka27,
  兵庫県: citiesNameToIdMapHyogo28,
  奈良県: citiesNameToIdMapNara29,
  和歌山県: citiesNameToIdMapWakayama30,
  鳥取県: citiesNameToIdMapTottori31,
  島根県: citiesNameToIdMapShimane32,
  岡山県: citiesNameToIdMapOkayama33,
  広島県: citiesNameToIdMapHiroshima34,
  山口県: citiesNameToIdMapYamaguchi35,
  徳島県: citiesNameToIdMapTokushima36,
  香川県: citiesNameToIdMapKagawa37,
  愛媛県: citiesNameToIdMapEhime38,
  高知県: citiesNameToIdMapKochi39,
  福岡県: citiesNameToIdMapFukuoka40,
  佐賀県: citiesNameToIdMapSaga41,
  長崎県: citiesNameToIdMapNagasaki42,
  熊本県: citiesNameToIdMapKumamoto43,
  大分県: citiesNameToIdMapOita44,
  宮崎県: citiesNameToIdMapMiyazaki45,
  鹿児島県: citiesNameToIdMapKagoshima46,
  沖縄県: citiesNameToIdMapOkinawa47,
};

// ----------------------------------- 🔸都道府県・市区町村Regex関連🔸 -----------------------------------
// ----------------------------------- 都道府県 -----------------------------------
const regExpPrefecture =
  /(北海道|青森県|岩手県|宮城県|秋田県|山形県|福島県|茨城県|栃木県|群馬県|埼玉県|千葉県|東京都|神奈川県|新潟県|富山県|石川県|福井県|山梨県|長野県|岐阜県|静岡県|愛知県|三重県|滋賀県|京都府|大阪府|兵庫県|奈良県|和歌山県|鳥取県|島根県|岡山県|広島県|山口県|徳島県|香川県|愛媛県|高知県|福岡県|佐賀県|長崎県|熊本県|大分県|宮崎県|鹿児島県|沖縄県)/;

// ----------------------------------- 市区町村 -----------------------------------

// 🔸北海道 1 / 188件 -----------------------------------
const regExpCitiesHokkaido01 =
  /(札幌市中央区|札幌市北区|札幌市東区|札幌市白石区|札幌市豊平区|札幌市南区|札幌市西区|札幌市厚別区|札幌市手稲区|札幌市清田区|函館市|小樽市|旭川市|室蘭市|釧路市|帯広市|北見市|夕張市|岩見沢市|網走市|留萌市|苫小牧市|稚内市|美唄市|芦別市|江別市|赤平市|紋別市|士別市|名寄市|三笠市|根室市|千歳市|滝川市|砂川市|歌志内市|深川市|富良野市|登別市|恵庭市|伊達市|北広島市|石狩市|北斗市|石狩郡当別町|石狩郡新篠津村|松前郡松前町|松前郡福島町|上磯郡知内町|上磯郡木古内町|亀田郡七飯町|茅部郡鹿部町|茅部郡森町|二海郡八雲町|山越郡長万部町|檜山郡江差町|檜山郡上ノ国町|檜山郡厚沢部町|爾志郡乙部町|奥尻郡奥尻町|瀬棚郡今金町|久遠郡せたな町|島牧郡島牧村|寿都郡寿都町|寿都郡黒松内町|磯谷郡蘭越町|虻田郡ニセコ町|虻田郡真狩村|虻田郡留寿都村|虻田郡喜茂別町|虻田郡京極町|虻田郡倶知安町|岩内郡共和町|岩内郡岩内町|古宇郡泊村|古宇郡神恵内村|積丹郡積丹町|古平郡古平町|余市郡仁木町|余市郡余市町|余市郡赤井川村|空知郡南幌町|空知郡奈井江町|空知郡上砂川町|夕張郡由仁町|夕張郡長沼町|夕張郡栗山町|樺戸郡月形町|樺戸郡浦臼町|樺戸郡新十津川町|雨竜郡妹背牛町|雨竜郡秩父別町|雨竜郡雨竜町|雨竜郡北竜町|雨竜郡沼田町|上川郡鷹栖町|上川郡東神楽町|上川郡当麻町|上川郡比布町|上川郡愛別町|上川郡上川町|上川郡東川町|上川郡美瑛町|空知郡上富良野町|空知郡中富良野町|空知郡南富良野町|勇払郡占冠村|上川郡和寒町|上川郡剣淵町|上川郡下川町|中川郡美深町|中川郡音威子府村|中川郡中川町|雨竜郡幌加内町|増毛郡増毛町|留萌郡小平町|苫前郡苫前町|苫前郡羽幌町|苫前郡初山別村|天塩郡遠別町|天塩郡天塩町|宗谷郡猿払村|枝幸郡浜頓別町|枝幸郡中頓別町|枝幸郡枝幸町|天塩郡豊富町|礼文郡礼文町|利尻郡利尻町|利尻郡利尻富士町|天塩郡幌延町|網走郡美幌町|網走郡津別町|斜里郡斜里町|斜里郡清里町|斜里郡小清水町|常呂郡訓子府町|常呂郡置戸町|常呂郡佐呂間町|紋別郡遠軽町|紋別郡湧別町|紋別郡滝上町|紋別郡興部町|紋別郡西興部村|紋別郡雄武町|網走郡大空町|虻田郡豊浦町|有珠郡壮瞥町|白老郡白老町|勇払郡厚真町|虻田郡洞爺湖町|勇払郡安平町|勇払郡むかわ町|沙流郡日高町|沙流郡平取町|新冠郡新冠町|浦河郡浦河町|様似郡様似町|幌泉郡えりも町|日高郡新ひだか町|河東郡音更町|河東郡士幌町|河東郡上士幌町|河東郡鹿追町|上川郡新得町|上川郡清水町|河西郡芽室町|河西郡中札内村|河西郡更別村|広尾郡大樹町|広尾郡広尾町|中川郡幕別町|中川郡池田町|中川郡豊頃町|中川郡本別町|足寄郡足寄町|足寄郡陸別町|十勝郡浦幌町|釧路郡釧路町|厚岸郡厚岸町|厚岸郡浜中町|川上郡標茶町|川上郡弟子屈町|阿寒郡鶴居村|白糠郡白糠町|野付郡別海町|標津郡中標津町|標津郡標津町|目梨郡羅臼町)/;

// 🔸青森県 2 / 40件 189 ~ 228 -----------------------------------

const regExpCitiesAomori02 =
  /(青森市|弘前市|八戸市|黒石市|五所川原市|十和田市|三沢市|むつ市|つがる市|平川市|東津軽郡平内町|東津軽郡今別町|東津軽郡蓬田村|東津軽郡外ヶ浜町|西津軽郡鰺ヶ沢町|西津軽郡深浦町|中津軽郡西目屋村|南津軽郡藤崎町|南津軽郡大鰐町|南津軽郡田舎館村|北津軽郡板柳町|北津軽郡鶴田町|北津軽郡中泊町|上北郡野辺地町|上北郡七戸町|上北郡六戸町|上北郡横浜町|上北郡東北町|上北郡六ヶ所村|上北郡おいらせ町|下北郡大間町|下北郡東通村|下北郡風間浦村|下北郡佐井村|三戸郡三戸町|三戸郡五戸町|三戸郡田子町|三戸郡南部町|三戸郡階上町|三戸郡新郷村)/;

// 🔸岩手県 3 / 33件 229 ~ 261 -----------------------------------

const regExpCitiesIwate03 =
  /(盛岡市|宮古市|大船渡市|花巻市|北上市|久慈市|遠野市|一関市|陸前高田市|釜石市|二戸市|八幡平市|奥州市|滝沢市|岩手郡雫石町|岩手郡葛巻町|岩手郡岩手町|紫波郡紫波町|紫波郡矢巾町|和賀郡西和賀町|胆沢郡金ケ崎町|西磐井郡平泉町|気仙郡住田町|上閉伊郡大槌町|下閉伊郡山田町|下閉伊郡岩泉町|下閉伊郡田野畑村|下閉伊郡普代村|九戸郡軽米町|九戸郡野田村|九戸郡九戸村|九戸郡洋野町|二戸郡一戸町)/;

// 🔸宮城県 4 / 25件 262 ~ 300 -----------------------------------

const regExpCitiesMiyagi04 =
  /(仙台市青葉区|仙台市宮城野区|仙台市若林区|仙台市太白区|仙台市泉区|石巻市|塩竈市|気仙沼市|白石市|名取市|角田市|多賀城市|岩沼市|登米市|栗原市|東松島市|大崎市|富谷市|刈田郡蔵王町|刈田郡七ヶ宿町|柴田郡大河原町|柴田郡村田町|柴田郡柴田町|柴田郡川崎町|伊具郡丸森町|亘理郡亘理町|亘理郡山元町|宮城郡松島町|宮城郡七ヶ浜町|宮城郡利府町|黒川郡大和町|黒川郡大郷町|黒川郡大衡村|加美郡色麻町|加美郡加美町|遠田郡涌谷町|遠田郡美里町|牡鹿郡女川町|本吉郡南三陸町)/;

// 🔸秋田県 5 / 25件 301 ~ 325 -----------------------------------

const regExpCitiesAkita05 =
  /(秋田市|能代市|横手市|大館市|男鹿市|湯沢市|鹿角市|由利本荘市|潟上市|大仙市|北秋田市|にかほ市|仙北市|鹿角郡小坂町|北秋田郡上小阿仁村|山本郡藤里町|山本郡三種町|山本郡八峰町|南秋田郡五城目町|南秋田郡八郎潟町|南秋田郡井川町|南秋田郡大潟村|仙北郡美郷町|雄勝郡羽後町|雄勝郡東成瀬村)/;

// 🔸山形県 6 / 25件 326 ~ 360 -----------------------------------

const regExpCitiesYamagata06 =
  /(山形市|米沢市|鶴岡市|酒田市|新庄市|寒河江市|上山市|村山市|長井市|天童市|東根市|尾花沢市|南陽市|東村山郡山辺町|東村山郡中山町|西村山郡河北町|西村山郡西川町|西村山郡朝日町|西村山郡大江町|北村山郡大石田町|最上郡金山町|最上郡最上町|最上郡舟形町|最上郡真室川町|最上郡大蔵村|最上郡鮭川村|最上郡戸沢村|東置賜郡高畠町|東置賜郡川西町|西置賜郡小国町|西置賜郡白鷹町|西置賜郡飯豊町|東田川郡三川町|東田川郡庄内町|飽海郡遊佐町)/;

// 🔸福島県 7 / 59件 361 ~ 419 -----------------------------------

const regExpCitiesFukushima07 =
  /(福島市|会津若松市|郡山市|いわき市|白河市|須賀川市|喜多方市|相馬市|二本松市|田村市|南相馬市|伊達市|本宮市|伊達郡桑折町|伊達郡国見町|伊達郡川俣町|安達郡大玉村|岩瀬郡鏡石町|岩瀬郡天栄村|南会津郡下郷町|南会津郡檜枝岐村|南会津郡只見町|南会津郡南会津町|耶麻郡北塩原村|耶麻郡西会津町|耶麻郡磐梯町|耶麻郡猪苗代町|河沼郡会津坂下町|河沼郡湯川村|河沼郡柳津町|大沼郡三島町|大沼郡金山町|大沼郡昭和村|大沼郡会津美里町|西白河郡西郷村|西白河郡泉崎村|西白河郡中島村|西白河郡矢吹町|東白川郡棚倉町|東白川郡矢祭町|東白川郡塙町|東白川郡鮫川村|石川郡石川町|石川郡玉川村|石川郡平田村|石川郡浅川町|石川郡古殿町|田村郡三春町|田村郡小野町|双葉郡広野町|双葉郡楢葉町|双葉郡富岡町|双葉郡川内村|双葉郡大熊町|双葉郡双葉町|双葉郡浪江町|双葉郡葛尾村|相馬郡新地町|相馬郡飯舘村)/;

// 🔸茨城県 8 / 44件 420 ~ 463 -----------------------------------

const regExpCitiesIbaraki08 =
  /(水戸市|日立市|土浦市|古河市|石岡市|結城市|龍ケ崎市|下妻市|常総市|常陸太田市|高萩市|北茨城市|笠間市|取手市|牛久市|つくば市|ひたちなか市|鹿嶋市|潮来市|守谷市|常陸大宮市|那珂市|筑西市|坂東市|稲敷市|かすみがうら市|桜川市|神栖市|行方市|鉾田市|つくばみらい市|小美玉市|東茨城郡茨城町|東茨城郡大洗町|東茨城郡城里町|那珂郡東海村|久慈郡大子町|稲敷郡美浦村|稲敷郡阿見町|稲敷郡河内町|結城郡八千代町|猿島郡五霞町|猿島郡境町|北相馬郡利根町)/;

// 🔸栃木県 9 / 25件 464 ~ 488 -----------------------------------

const regExpCitiesIbaraki09 =
  /(宇都宮市|足利市|栃木市|佐野市|鹿沼市|日光市|小山市|真岡市|大田原市|矢板市|那須塩原市|さくら市|那須烏山市|下野市|河内郡上三川町|芳賀郡益子町|芳賀郡茂木町|芳賀郡市貝町|芳賀郡芳賀町|下都賀郡壬生町|下都賀郡野木町|塩谷郡塩谷町|塩谷郡高根沢町|那須郡那須町|那須郡那珂川町)/;

// 🔸群馬県 10 / 35件 489 ~ 523 -----------------------------------

const regExpCitiesGunma10 =
  /(前橋市|高崎市|桐生市|伊勢崎市|太田市|沼田市|館林市|渋川市|藤岡市|富岡市|安中市|みどり市|北群馬郡榛東村|北群馬郡吉岡町|多野郡上野村|多野郡神流町|甘楽郡下仁田町|甘楽郡南牧村|甘楽郡甘楽町|吾妻郡中之条町|吾妻郡長野原町|吾妻郡嬬恋村|吾妻郡草津町|吾妻郡高山村|吾妻郡東吾妻町|利根郡片品村|利根郡川場村|利根郡昭和村|利根郡みなかみ町|佐波郡玉村町|邑楽郡板倉町|邑楽郡明和町|邑楽郡千代田町|邑楽郡大泉町|邑楽郡邑楽町)/;

// 🔸埼玉県 11 / 72件 524 ~ 595 -----------------------------------

const regExpCitiesSaitama11 =
  /(さいたま市西区|さいたま市北区|さいたま市大宮区|さいたま市見沼区|さいたま市中央区|さいたま市桜区|さいたま市浦和区|さいたま市南区|さいたま市緑区|さいたま市岩槻区|川越市|熊谷市|川口市|行田市|秩父市|所沢市|飯能市|加須市|本庄市|東松山市|春日部市|狭山市|羽生市|鴻巣市|深谷市|上尾市|草加市|越谷市|蕨市|戸田市|入間市|朝霞市|志木市|和光市|新座市|桶川市|久喜市|北本市|八潮市|富士見市|三郷市|蓮田市|坂戸市|幸手市|鶴ヶ島市|日高市|吉川市|ふじみ野市|白岡市|北足立郡伊奈町|入間郡三芳町|入間郡毛呂山町|入間郡越生町|比企郡滑川町|比企郡嵐山町|比企郡小川町|比企郡川島町|比企郡吉見町|比企郡鳩山町|比企郡ときがわ町|秩父郡横瀬町|秩父郡皆野町|秩父郡長瀞町|秩父郡小鹿野町|秩父郡東秩父村|児玉郡美里町|児玉郡神川町|児玉郡上里町|大里郡寄居町|南埼玉郡宮代町|北葛飾郡杉戸町|北葛飾郡松伏町)/;

// 🔸千葉県 12 / 59件 596 ~ 654 -----------------------------------

const regExpCitiesChiba12 =
  /(千葉市中央区|千葉市花見川区|千葉市稲毛区|千葉市若葉区|千葉市緑区|千葉市美浜区|銚子市|市川市|船橋市|館山市|木更津市|松戸市|野田市|茂原市|成田市|佐倉市|東金市|旭市|習志野市|柏市|勝浦市|市原市|流山市|八千代市|我孫子市|鴨川市|鎌ケ谷市|君津市|富津市|浦安市|四街道市|袖ケ浦市|八街市|印西市|白井市|富里市|南房総市|匝瑳市|香取市|山武市|いすみ市|大網白里市|印旛郡酒々井町|印旛郡栄町|香取郡神崎町|香取郡多古町|香取郡東庄町|山武郡九十九里町|山武郡芝山町|山武郡横芝光町|長生郡一宮町|長生郡睦沢町|長生郡長生村|長生郡白子町|長生郡長柄町|長生郡長南町|夷隅郡大多喜町|夷隅郡御宿町|安房郡鋸南町)/;

// 🔸東京都 13 / 52件 655 ~ 716 -----------------------------------

const regExpCitiesTokyo13 =
  /(千代田区|中央区|港区|新宿区|文京区|台東区|墨田区|江東区|品川区|目黒区|大田区|世田谷区|渋谷区|中野区|杉並区|豊島区|北区|荒川区|板橋区|練馬区|足立区|葛飾区|江戸川区|八王子市|立川市|武蔵野市|三鷹市|青梅市|府中市|昭島市|調布市|町田市|小金井市|小平市|日野市|東村山市|国分寺市|国立市|福生市|狛江市|東大和市|清瀬市|東久留米市|武蔵村山市|多摩市|稲城市|羽村市|あきる野市|西東京市|西多摩郡瑞穂町|西多摩郡日の出町|西多摩郡檜原村|西多摩郡奥多摩町|大島町|利島村|新島村|神津島村|三宅島三宅村|御蔵島村|八丈島八丈町|青ヶ島村|小笠原村)/;

// 🔸神奈川県 14 / 58件 717 ~ 774 -----------------------------------

const regExpCitiesKanagawa14 =
  /(横浜市鶴見区|横浜市神奈川区|横浜市西区|横浜市中区|横浜市南区|横浜市保土ケ谷区|横浜市磯子区|横浜市金沢区|横浜市港北区|横浜市戸塚区|横浜市港南区|横浜市旭区|横浜市緑区|横浜市瀬谷区|横浜市栄区|横浜市泉区|横浜市青葉区|横浜市都筑区|川崎市川崎区|川崎市幸区|川崎市中原区|川崎市高津区|川崎市多摩区|川崎市宮前区|川崎市麻生区|相模原市緑区|相模原市中央区|相模原市南区|横須賀市|平塚市|鎌倉市|藤沢市|小田原市|茅ヶ崎市|逗子市|三浦市|秦野市|厚木市|大和市|伊勢原市|海老名市|座間市|南足柄市|綾瀬市|三浦郡葉山町|高座郡寒川町|中郡大磯町|中郡二宮町|足柄上郡中井町|足柄上郡大井町|足柄上郡松田町|足柄上郡山北町|足柄上郡開成町|足柄下郡箱根町|足柄下郡真鶴町|足柄下郡湯河原町|愛甲郡愛川町|愛甲郡清川村)/;

// 🔸新潟県 15 / 37件 775 ~ 811 -----------------------------------

const regExpCitiesNiigata15 =
  /(新潟市北区|新潟市東区|新潟市中央区|新潟市江南区|新潟市秋葉区|新潟市南区|新潟市西区|新潟市西蒲区|長岡市|三条市|柏崎市|新発田市|小千谷市|加茂市|十日町市|見附市|村上市|燕市|糸魚川市|妙高市|五泉市|上越市|阿賀野市|佐渡市|魚沼市|南魚沼市|胎内市|北蒲原郡聖籠町|西蒲原郡弥彦村|南蒲原郡田上町|東蒲原郡阿賀町|三島郡出雲崎町|南魚沼郡湯沢町|中魚沼郡津南町|刈羽郡刈羽村|岩船郡関川村|岩船郡粟島浦村)/;

// 🔸富山県 16 / 15件 812 ~ 826 -----------------------------------

const regExpCitiesToyama16 =
  /(富山市|高岡市|魚津市|氷見市|滑川市|黒部市|砺波市|小矢部市|南砺市|射水市|中新川郡舟橋村|中新川郡上市町|中新川郡立山町|下新川郡入善町|下新川郡朝日町)/;

// 🔸石川県 17 / 19件 827 ~ 845 -----------------------------------

const regExpCitiesIshikawa17 =
  /(金沢市|七尾市|小松市|輪島市|珠洲市|加賀市|羽咋市|かほく市|白山市|能美市|野々市市|能美郡川北町|河北郡津幡町|河北郡内灘町|羽咋郡志賀町|羽咋郡宝達志水町|鹿島郡中能登町|鳳珠郡穴水町|鳳珠郡能登町)/;

// 🔸福井県 18 / 17件 846 ~ 862 -----------------------------------

const regExpCitiesIshikawa18 =
  /(福井市|敦賀市|小浜市|大野市|勝山市|鯖江市|あわら市|越前市|坂井市|吉田郡永平寺町|今立郡池田町|南条郡南越前町|丹生郡越前町|三方郡美浜町|大飯郡高浜町|大飯郡おおい町|三方上中郡若狭町)/;

// 🔸山梨県 19 / 27件 863 ~ 889 -----------------------------------

const regExpCitiesIshikawa19 =
  /(甲府市|富士吉田市|都留市|山梨市|大月市|韮崎市|南アルプス市|北杜市|甲斐市|笛吹市|上野原市|甲州市|中央市|西八代郡市川三郷町|南巨摩郡早川町|南巨摩郡身延町|南巨摩郡南部町|南巨摩郡富士川町|中巨摩郡昭和町|南都留郡道志村|南都留郡西桂町|南都留郡忍野村|南都留郡山中湖村|南都留郡鳴沢村|南都留郡富士河口湖町|北都留郡小菅村|北都留郡丹波山村)/;

// 🔸長野県 20 / 77件 890 ~ 966 -----------------------------------

const regExpCitiesNagano20 =
  /(長野市|松本市|上田市|岡谷市|飯田市|諏訪市|須坂市|小諸市|伊那市|駒ヶ根市|中野市|大町市|飯山市|茅野市|塩尻市|佐久市|千曲市|東御市|安曇野市|南佐久郡小海町|南佐久郡川上村|南佐久郡南牧村|南佐久郡南相木村|南佐久郡北相木村|南佐久郡佐久穂町|北佐久郡軽井沢町|北佐久郡御代田町|北佐久郡立科町|小県郡青木村|小県郡長和町|諏訪郡下諏訪町|諏訪郡富士見町|諏訪郡原村|上伊那郡辰野町|上伊那郡箕輪町|上伊那郡飯島町|上伊那郡南箕輪村|上伊那郡中川村|上伊那郡宮田村|下伊那郡松川町|下伊那郡高森町|下伊那郡阿南町|下伊那郡阿智村|下伊那郡平谷村|下伊那郡根羽村|下伊那郡下條村|下伊那郡売木村|下伊那郡天龍村|下伊那郡泰阜村|下伊那郡喬木村|下伊那郡豊丘村|下伊那郡大鹿村|木曽郡上松町|木曽郡南木曽町|木曽郡木祖村|木曽郡王滝村|木曽郡大桑村|木曽郡木曽町|東筑摩郡麻績村|東筑摩郡生坂村|東筑摩郡山形村|東筑摩郡朝日村|東筑摩郡筑北村|北安曇郡池田町|北安曇郡松川村|北安曇郡白馬村|北安曇郡小谷村|埴科郡坂城町|上高井郡小布施町|上高井郡高山村|下高井郡山ノ内町|下高井郡木島平村|下高井郡野沢温泉村|上水内郡信濃町|上水内郡小川村|上水内郡飯綱町|下水内郡栄村)/;

// 🔸岐阜県 21 / 42件 967 ~ 1008 -----------------------------------

const regExpCitiesGifu21 =
  /(岐阜市|大垣市|高山市|多治見市|関市|中津川市|美濃市|瑞浪市|羽島市|恵那市|美濃加茂市|土岐市|各務原市|可児市|山県市|瑞穂市|飛騨市|本巣市|郡上市|下呂市|海津市|羽島郡岐南町|羽島郡笠松町|養老郡養老町|不破郡垂井町|不破郡関ケ原町|安八郡神戸町|安八郡輪之内町|安八郡安八町|揖斐郡揖斐川町|揖斐郡大野町|揖斐郡池田町|本巣郡北方町|加茂郡坂祝町|加茂郡富加町|加茂郡川辺町|加茂郡七宗町|加茂郡八百津町|加茂郡白川町|加茂郡東白川村|可児郡御嵩町|大野郡白川村)/;

// 🔸静岡県 22 / 39件 1009 ~ 1047 -----------------------------------

const regExpCitiesShizuoka22 =
  /(静岡市葵区|静岡市駿河区|静岡市清水区|浜松市中央区|浜松市浜名区|浜松市天竜区|沼津市|熱海市|三島市|富士宮市|伊東市|島田市|富士市|磐田市|焼津市|掛川市|藤枝市|御殿場市|袋井市|下田市|裾野市|湖西市|伊豆市|御前崎市|菊川市|伊豆の国市|牧之原市|賀茂郡東伊豆町|賀茂郡河津町|賀茂郡南伊豆町|賀茂郡松崎町|賀茂郡西伊豆町|田方郡函南町|駿東郡清水町|駿東郡長泉町|駿東郡小山町|榛原郡吉田町|榛原郡川根本町|周智郡森町)/;

// 🔸愛知県 23 / 69件 1048 ~ 1116 -----------------------------------

const regExpCitiesAichi23 =
  /(名古屋市千種区|名古屋市東区|名古屋市北区|名古屋市西区|名古屋市中村区|名古屋市中区|名古屋市昭和区|名古屋市瑞穂区|名古屋市熱田区|名古屋市中川区|名古屋市港区|名古屋市南区|名古屋市守山区|名古屋市緑区|名古屋市名東区|名古屋市天白区|豊橋市|岡崎市|一宮市|瀬戸市|半田市|春日井市|豊川市|津島市|碧南市|刈谷市|豊田市|安城市|西尾市|蒲郡市|犬山市|常滑市|江南市|小牧市|稲沢市|新城市|東海市|大府市|知多市|知立市|尾張旭市|高浜市|岩倉市|豊明市|日進市|田原市|愛西市|清須市|北名古屋市|弥富市|みよし市|あま市|長久手市|愛知郡東郷町|西春日井郡豊山町|丹羽郡大口町|丹羽郡扶桑町|海部郡大治町|海部郡蟹江町|海部郡飛島村|知多郡阿久比町|知多郡東浦町|知多郡南知多町|知多郡美浜町|知多郡武豊町|額田郡幸田町|北設楽郡設楽町|北設楽郡東栄町|北設楽郡豊根村)/;

// 🔸三重県 24 / 29件 1117 ~ 1145 -----------------------------------

const regExpCitiesMie24 =
  /(津市|四日市市|伊勢市|松阪市|桑名市|鈴鹿市|名張市|尾鷲市|亀山市|鳥羽市|熊野市|いなべ市|志摩市|伊賀市|桑名郡木曽岬町|員弁郡東員町|三重郡菰野町|三重郡朝日町|三重郡川越町|多気郡多気町|多気郡明和町|多気郡大台町|度会郡玉城町|度会郡度会町|度会郡大紀町|度会郡南伊勢町|北牟婁郡紀北町|南牟婁郡御浜町|南牟婁郡紀宝町)/;

// 🔸滋賀県 25 / 19件 1146 ~ 1164 -----------------------------------

const regExpCitiesShiga25 =
  /(大津市|彦根市|長浜市|近江八幡市|草津市|守山市|栗東市|甲賀市|野洲市|湖南市|高島市|東近江市|米原市|蒲生郡日野町|蒲生郡竜王町|愛知郡愛荘町|犬上郡豊郷町|犬上郡甲良町|犬上郡多賀町)/;

// 🔸京都府 26 / 36件 1165 ~ 1200 -----------------------------------

const regExpCitiesKyoto26 =
  /(京都市北区|京都市上京区|京都市左京区|京都市中京区|京都市東山区|京都市下京区|京都市南区|京都市右京区|京都市伏見区|京都市山科区|京都市西京区|福知山市|舞鶴市|綾部市|宇治市|宮津市|亀岡市|城陽市|向日市|長岡京市|八幡市|京田辺市|京丹後市|南丹市|木津川市|乙訓郡大山崎町|久世郡久御山町|綴喜郡井手町|綴喜郡宇治田原町|相楽郡笠置町|相楽郡和束町|相楽郡精華町|相楽郡南山城村|船井郡京丹波町|与謝郡伊根町|与謝郡与謝野町)/;

// 🔸大阪府 27 / 72件 1201 ~ 1272 -----------------------------------

const regExpCitiesOsaka27 =
  /(大阪市都島区|大阪市福島区|大阪市此花区|大阪市西区|大阪市港区|大阪市大正区|大阪市天王寺区|大阪市浪速区|大阪市西淀川区|大阪市東淀川区|大阪市東成区|大阪市生野区|大阪市旭区|大阪市城東区|大阪市阿倍野区|大阪市住吉区|大阪市東住吉区|大阪市西成区|大阪市淀川区|大阪市鶴見区|大阪市住之江区|大阪市平野区|大阪市北区|大阪市中央区|堺市堺区|堺市中区|堺市東区|堺市西区|堺市南区|堺市北区|堺市美原区|岸和田市|豊中市|池田市|吹田市|泉大津市|高槻市|貝塚市|守口市|枚方市|茨木市|八尾市|泉佐野市|富田林市|寝屋川市|河内長野市|松原市|大東市|和泉市|箕面市|柏原市|羽曳野市|門真市|摂津市|高石市|藤井寺市|東大阪市|泉南市|四條畷市|交野市|大阪狭山市|阪南市|三島郡島本町|豊能郡豊能町|豊能郡能勢町|泉北郡忠岡町|泉南郡熊取町|泉南郡田尻町|泉南郡岬町|南河内郡太子町|南河内郡河南町|南河内郡千早赤阪村)/;

// 🔸兵庫県 28 / 49件 1273 ~ 1321 -----------------------------------

const regExpCitiesHyogo28 =
  /(神戸市東灘区|神戸市灘区|神戸市兵庫区|神戸市長田区|神戸市須磨区|神戸市垂水区|神戸市北区|神戸市中央区|神戸市西区|姫路市|尼崎市|明石市|西宮市|洲本市|芦屋市|伊丹市|相生市|豊岡市|加古川市|赤穂市|西脇市|宝塚市|三木市|高砂市|川西市|小野市|三田市|加西市|丹波篠山市|養父市|丹波市|南あわじ市|朝来市|淡路市|宍粟市|加東市|たつの市|川辺郡猪名川町|多可郡多可町|加古郡稲美町|加古郡播磨町|神崎郡市川町|神崎郡福崎町|神崎郡神河町|揖保郡太子町|赤穂郡上郡町|佐用郡佐用町|美方郡香美町|美方郡新温泉町)/;

// 🔸奈良県 29 / 39件 1322 ~ 1360 -----------------------------------

const regExpCitiesNara29 =
  /(奈良市|大和高田市|大和郡山市|天理市|橿原市|桜井市|五條市|御所市|生駒市|香芝市|葛城市|宇陀市|山辺郡山添村|生駒郡平群町|生駒郡三郷町|生駒郡斑鳩町|生駒郡安堵町|磯城郡川西町|磯城郡三宅町|磯城郡田原本町|宇陀郡曽爾村|宇陀郡御杖村|高市郡高取町|高市郡明日香村|北葛城郡上牧町|北葛城郡王寺町|北葛城郡広陵町|北葛城郡河合町|吉野郡吉野町|吉野郡大淀町|吉野郡下市町|吉野郡黒滝村|吉野郡天川村|吉野郡野迫川村|吉野郡十津川村|吉野郡下北山村|吉野郡上北山村|吉野郡川上村|吉野郡東吉野村)/;

// 🔸和歌山県 30 / 30件 1361 ~ 1390 -----------------------------------

const regExpCitiesWakayama30 =
  /(歌山市|海南市|橋本市|有田市|御坊市|田辺市|新宮市|紀の川市|岩出市|海草郡紀美野町|伊都郡かつらぎ町|伊都郡九度山町|伊都郡高野町|有田郡湯浅町|有田郡広川町|有田郡有田川町|日高郡美浜町|日高郡日高町|日高郡由良町|日高郡印南町|日高郡みなべ町|日高郡日高川町|西牟婁郡白浜町|西牟婁郡上富田町|西牟婁郡すさみ町|東牟婁郡那智勝浦町|東牟婁郡太地町|東牟婁郡古座川町|東牟婁郡北山村|東牟婁郡串本町)/;

// 🔸鳥取県 31 / 19件 1391 ~ 1409 -----------------------------------

const regExpCitiesTottori31 =
  /(鳥取市|米子市|倉吉市|境港市|岩美郡岩美町|八頭郡若桜町|八頭郡智頭町|八頭郡八頭町|東伯郡三朝町|東伯郡湯梨浜町|東伯郡琴浦町|東伯郡北栄町|西伯郡日吉津村|西伯郡大山町|西伯郡南部町|西伯郡伯耆町|日野郡日南町|日野郡日野町|日野郡江府町)/;

// 🔸島根県 32 / 19件 1410 ~ 1428 -----------------------------------

const regExpCitiesShimane32 =
  /(江市|浜田市|出雲市|益田市|大田市|安来市|江津市|雲南市|仁多郡奥出雲町|飯石郡飯南町|邑智郡川本町|邑智郡美郷町|邑智郡邑南町|鹿足郡津和野町|鹿足郡吉賀町|隠岐郡海士町|隠岐郡西ノ島町|隠岐郡知夫村|隠岐郡隠岐の島町)/;

// 🔸岡山県 33 / 30件 1429 ~ 1458 -----------------------------------

const regExpCitiesOkayama33 =
  /(岡山市北区|岡山市中区|岡山市東区|岡山市南区|倉敷市|津山市|玉野市|笠岡市|井原市|総社市|高梁市|新見市|備前市|瀬戸内市|赤磐市|真庭市|美作市|浅口市|和気郡和気町|都窪郡早島町|浅口郡里庄町|小田郡矢掛町|真庭郡新庄村|苫田郡鏡野町|勝田郡勝央町|勝田郡奈義町|英田郡西粟倉村|久米郡久米南町|久米郡美咲町|加賀郡吉備中央町)/;

// 🔸広島県 34 / 30件 1459 ~ 1488 -----------------------------------

const regExpCitiesHiroshima34 =
  /(広島市中区|広島市東区|広島市南区|広島市西区|広島市安佐南区|広島市安佐北区|広島市安芸区|広島市佐伯区|呉市|竹原市|三原市|尾道市|福山市|府中市|三次市|庄原市|大竹市|東広島市|廿日市市|安芸高田市|江田島市|安芸郡府中町|安芸郡海田町|安芸郡熊野町|安芸郡坂町|山県郡安芸太田町|山県郡北広島町|豊田郡大崎上島町|世羅郡世羅町|神石郡神石高原町)/;

// 🔸山口県 35 / 19件 1489 ~ 1507 -----------------------------------

const regExpCitiesYamaguchi35 =
  /(下関市|宇部市|山口市|萩市|防府市|下松市|岩国市|光市|長門市|柳井市|美祢市|周南市|山陽小野田市|大島郡周防大島町|玖珂郡和木町|熊毛郡上関町|熊毛郡田布施町|熊毛郡平生町|阿武郡阿武町)/;

// 🔸徳島県 36 / 24件 1508 ~ 1531 -----------------------------------

const regExpCitiesTokushima36 =
  /(徳島市|鳴門市|小松島市|阿南市|吉野川市|阿波市|美馬市|三好市|勝浦郡勝浦町|勝浦郡上勝町|名東郡佐那河内村|名西郡石井町|名西郡神山町|那賀郡那賀町|海部郡牟岐町|海部郡美波町|海部郡海陽町|板野郡松茂町|板野郡北島町|板野郡藍住町|板野郡板野町|板野郡上板町|美馬郡つるぎ町|三好郡東みよし町)/;

// 🔸香川県 37 / 17件 1532 ~ 1548 -----------------------------------

const regExpCitiesKagawa37 =
  /(高松市|丸亀市|坂出市|善通寺市|観音寺市|さぬき市|東かがわ市|三豊市|小豆郡土庄町|小豆郡小豆島町|木田郡三木町|香川郡直島町|綾歌郡宇多津町|綾歌郡綾川町|仲多度郡琴平町|仲多度郡多度津町|仲多度郡まんのう町)/;

// 🔸愛媛県 38 / 20件 1549 ~ 1568 -----------------------------------

const regExpCitiesEhime38 =
  /(松山市|今治市|宇和島市|八幡浜市|新居浜市|西条市|大洲市|伊予市|四国中央市|西予市|東温市|越智郡上島町|上浮穴郡久万高原町|伊予郡松前町|伊予郡砥部町|喜多郡内子町|西宇和郡伊方町|北宇和郡松野町|北宇和郡鬼北町|南宇和郡愛南町)/;

// 🔸高知県 39 / 34件 1569 ~ 1602 -----------------------------------

const regExpCitiesKochi39 =
  /(高知市|室戸市|安芸市|南国市|土佐市|須崎市|宿毛市|土佐清水市|四万十市|香南市|香美市|安芸郡東洋町|安芸郡奈半利町|安芸郡田野町|安芸郡安田町|安芸郡北川村|安芸郡馬路村|安芸郡芸西村|長岡郡本山町|長岡郡大豊町|土佐郡土佐町|土佐郡大川村|吾川郡いの町|吾川郡仁淀川町|高岡郡中土佐町|高岡郡佐川町|高岡郡越知町|高岡郡檮原町|高岡郡日高村|高岡郡津野町|高岡郡四万十町|幡多郡大月町|幡多郡三原村|幡多郡黒潮町)/;

// 🔸福岡県 40 / 72件 1603 ~ 1674 -----------------------------------

const regExpCitiesFukuoka40 =
  /(北九州市門司区|北九州市若松区|北九州市戸畑区|北九州市小倉北区|北九州市小倉南区|北九州市八幡東区|北九州市八幡西区|福岡市東区|福岡市博多区|福岡市中央区|福岡市南区|福岡市西区|福岡市城南区|福岡市早良区|大牟田市|久留米市|直方市|飯塚市|田川市|柳川市|八女市|筑後市|大川市|行橋市|豊前市|中間市|小郡市|筑紫野市|春日市|大野城市|宗像市|太宰府市|古賀市|福津市|うきは市|宮若市|嘉麻市|朝倉市|みやま市|糸島市|那珂川市|糟屋郡宇美町|糟屋郡篠栗町|糟屋郡志免町|糟屋郡須惠町|糟屋郡新宮町|糟屋郡久山町|糟屋郡粕屋町|遠賀郡芦屋町|遠賀郡水巻町|遠賀郡岡垣町|遠賀郡遠賀町|鞍手郡小竹町|鞍手郡鞍手町|嘉穂郡桂川町|朝倉郡筑前町|朝倉郡東峰村|三井郡大刀洗町|三潴郡大木町|八女郡広川町|田川郡香春町|田川郡添田町|田川郡糸田町|田川郡川崎町|田川郡大任町|田川郡赤村|田川郡福智町|京都郡苅田町|京都郡みやこ町|築上郡吉富町|築上郡上毛町|築上郡築上町)/;

// 🔸佐賀県 41 / 20件 1675 ~ 1694 -----------------------------------

const regExpCitiesSaga41 =
  /(佐賀市|唐津市|鳥栖市|多久市|伊万里市|武雄市|鹿島市|小城市|嬉野市|神埼市|神埼郡吉野ヶ里町|三養基郡基山町|三養基郡上峰町|三養基郡みやき町|東松浦郡玄海町|西松浦郡有田町|杵島郡大町町|杵島郡江北町|杵島郡白石町|藤津郡太良町)/;

// 🔸長崎県 42 / 21件 1695 ~ 1715 -----------------------------------

const regExpCitiesNagasaki42 =
  /(長崎市|佐世保市|島原市|諫早市|大村市|平戸市|松浦市|対馬市|壱岐市|五島市|西海市|雲仙市|南島原市|西彼杵郡長与町|西彼杵郡時津町|東彼杵郡東彼杵町|東彼杵郡川棚町|東彼杵郡波佐見町|北松浦郡小値賀町|北松浦郡佐々町|南松浦郡新上五島町)/;

// 🔸熊本県 43 / 49件 1716 ~ 1764 -----------------------------------

const regExpCitiesKumamoto43 =
  /(熊本市中央区|熊本市東区|熊本市西区|熊本市南区|熊本市北区|八代市|人吉市|荒尾市|水俣市|玉名市|山鹿市|菊池市|宇土市|上天草市|宇城市|阿蘇市|天草市|合志市|下益城郡美里町|玉名郡玉東町|玉名郡南関町|玉名郡長洲町|玉名郡和水町|菊池郡大津町|菊池郡菊陽町|阿蘇郡南小国町|阿蘇郡小国町|阿蘇郡産山村|阿蘇郡高森町|阿蘇郡西原村|阿蘇郡南阿蘇村|上益城郡御船町|上益城郡嘉島町|上益城郡益城町|上益城郡甲佐町|上益城郡山都町|八代郡氷川町|葦北郡芦北町|葦北郡津奈木町|球磨郡錦町|球磨郡多良木町|球磨郡湯前町|球磨郡水上村|球磨郡相良村|球磨郡五木村|球磨郡山江村|球磨郡球磨村|球磨郡あさぎり町|天草郡苓北町)/;

// 🔸大分県 44 / 18件 1765 ~ 1782 -----------------------------------

const regExpCitiesOita44 =
  /(大分市|別府市|中津市|日田市|佐伯市|臼杵市|津久見市|竹田市|豊後高田市|杵築市|宇佐市|豊後大野市|由布市|国東市|東国東郡姫島村|速見郡日出町|玖珠郡九重町|玖珠郡玖珠町)/;

// 🔸宮崎県 45 / 26件 1783 ~ 1808 -----------------------------------

const regExpCitiesMiyazaki45 =
  /(宮崎市|都城市|延岡市|日南市|小林市|日向市|串間市|西都市|えびの市|北諸県郡三股町|西諸県郡高原町|東諸県郡国富町|東諸県郡綾町|児湯郡高鍋町|児湯郡新富町|児湯郡西米良村|児湯郡木城町|児湯郡川南町|児湯郡都農町|東臼杵郡門川町|東臼杵郡諸塚村|東臼杵郡椎葉村|東臼杵郡美郷町|西臼杵郡高千穂町|西臼杵郡日之影町|西臼杵郡五ヶ瀬町)/;

// 🔸鹿児島県 46 / 43件 1809 ~ 1851 -----------------------------------

const regExpCitiesKagoshima46 =
  /(鹿児島市|鹿屋市|枕崎市|阿久根市|出水市|指宿市|西之表市|垂水市|薩摩川内市|日置市|曽於市|霧島市|いちき串木野市|南さつま市|志布志市|奄美市|南九州市|伊佐市|姶良市|鹿児島郡三島村|鹿児島郡十島村|薩摩郡さつま町|出水郡長島町|姶良郡湧水町|曽於郡大崎町|肝属郡東串良町|肝属郡錦江町|肝属郡南大隅町|肝属郡肝付町|熊毛郡中種子町|熊毛郡南種子町|熊毛郡屋久島町|大島郡大和村|大島郡宇検村|大島郡瀬戸内町|大島郡龍郷町|大島郡喜界町|大島郡徳之島町|大島郡天城町|大島郡伊仙町|大島郡和泊町|大島郡知名町|大島郡与論町)/;

// 🔸沖縄県 47 / 41件 1852 ~ 1892 -----------------------------------

const regExpCitiesOkinawa47 =
  /(那覇市|宜野湾市|石垣市|浦添市|名護市|糸満市|沖縄市|豊見城市|うるま市|宮古島市|南城市|国頭郡国頭村|国頭郡大宜味村|国頭郡東村|国頭郡今帰仁村|国頭郡本部町|国頭郡恩納村|国頭郡宜野座村|国頭郡金武町|国頭郡伊江村|中頭郡読谷村|中頭郡嘉手納町|中頭郡北谷町|中頭郡北中城村|中頭郡中城村|中頭郡西原町|島尻郡与那原町|島尻郡南風原町|島尻郡渡嘉敷村|島尻郡座間味村|島尻郡粟国村|島尻郡渡名喜村|島尻郡南大東村|島尻郡北大東村|島尻郡伊平屋村|島尻郡伊是名村|島尻郡久米島町|島尻郡八重瀬町|宮古郡多良間村|八重山郡竹富町|八重山郡与那国町)/;

const regionNameToRegExpCitiesJp = {
  北海道: regExpCitiesHokkaido01,
  青森県: regExpCitiesAomori02,
  岩手県: regExpCitiesIwate03,
  宮城県: regExpCitiesMiyagi04,
  秋田県: regExpCitiesAkita05,
  山形県: regExpCitiesYamagata06,
  福島県: regExpCitiesFukushima07,
  茨城県: regExpCitiesIbaraki08,
  栃木県: regExpCitiesIbaraki09,
  群馬県: regExpCitiesGunma10,
  埼玉県: regExpCitiesSaitama11,
  千葉県: regExpCitiesChiba12,
  東京都: regExpCitiesTokyo13,
  神奈川県: regExpCitiesKanagawa14,
  新潟県: regExpCitiesNiigata15,
  富山県: regExpCitiesToyama16,
  石川県: regExpCitiesIshikawa17,
  福井県: regExpCitiesIshikawa18,
  山梨県: regExpCitiesIshikawa19,
  長野県: regExpCitiesNagano20,
  岐阜県: regExpCitiesGifu21,
  静岡県: regExpCitiesShizuoka22,
  愛知県: regExpCitiesAichi23,
  三重県: regExpCitiesMie24,
  滋賀県: regExpCitiesShiga25,
  京都府: regExpCitiesKyoto26,
  大阪府: regExpCitiesOsaka27,
  兵庫県: regExpCitiesHyogo28,
  奈良県: regExpCitiesNara29,
  和歌山県: regExpCitiesWakayama30,
  鳥取県: regExpCitiesTottori31,
  島根県: regExpCitiesShimane32,
  岡山県: regExpCitiesOkayama33,
  広島県: regExpCitiesHiroshima34,
  山口県: regExpCitiesYamaguchi35,
  徳島県: regExpCitiesTokushima36,
  香川県: regExpCitiesKagawa37,
  愛媛県: regExpCitiesEhime38,
  高知県: regExpCitiesKochi39,
  福岡県: regExpCitiesFukuoka40,
  佐賀県: regExpCitiesSaga41,
  長崎県: regExpCitiesNagasaki42,
  熊本県: regExpCitiesKumamoto43,
  大分県: regExpCitiesOita44,
  宮崎県: regExpCitiesMiyazaki45,
  鹿児島県: regExpCitiesKagoshima46,
  沖縄県: regExpCitiesOkinawa47,
};

// ----------------------------------- 🔸半角カタカナ => 半角カタカナ🔸 -----------------------------------
function convertKanaHalfWidthToFullWidth(kanaText) {
  const kanaMap = {
    ｶﾞ: "ガ",
    ｷﾞ: "ギ",
    ｸﾞ: "グ",
    ｹﾞ: "ゲ",
    ｺﾞ: "ゴ",
    ｻﾞ: "ザ",
    ｼﾞ: "ジ",
    ｽﾞ: "ズ",
    ｾﾞ: "ゼ",
    ｿﾞ: "ゾ",
    ﾀﾞ: "ダ",
    ﾁﾞ: "ヂ",
    ﾂﾞ: "ヅ",
    ﾃﾞ: "デ",
    ﾄﾞ: "ド",
    ﾊﾞ: "バ",
    ﾋﾞ: "ビ",
    ﾌﾞ: "ブ",
    ﾍﾞ: "ベ",
    ﾎﾞ: "ボ",
    ﾊﾟ: "パ",
    ﾋﾟ: "ピ",
    ﾌﾟ: "プ",
    ﾍﾟ: "ペ",
    ﾎﾟ: "ポ",
    ｳﾞ: "ヴ",
    ﾜﾞ: "ヷ",
    ｦﾞ: "ヺ",
    ｱ: "ア",
    ｲ: "イ",
    ｳ: "ウ",
    ｴ: "エ",
    ｵ: "オ",
    ｶ: "カ",
    ｷ: "キ",
    ｸ: "ク",
    ｹ: "ケ",
    ｺ: "コ",
    ｻ: "サ",
    ｼ: "シ",
    ｽ: "ス",
    ｾ: "セ",
    ｿ: "ソ",
    ﾀ: "タ",
    ﾁ: "チ",
    ﾂ: "ツ",
    ﾃ: "テ",
    ﾄ: "ト",
    ﾅ: "ナ",
    ﾆ: "ニ",
    ﾇ: "ヌ",
    ﾈ: "ネ",
    ﾉ: "ノ",
    ﾊ: "ハ",
    ﾋ: "ヒ",
    ﾌ: "フ",
    ﾍ: "ヘ",
    ﾎ: "ホ",
    ﾏ: "マ",
    ﾐ: "ミ",
    ﾑ: "ム",
    ﾒ: "メ",
    ﾓ: "モ",
    ﾔ: "ヤ",
    ﾕ: "ユ",
    ﾖ: "ヨ",
    ﾗ: "ラ",
    ﾘ: "リ",
    ﾙ: "ル",
    ﾚ: "レ",
    ﾛ: "ロ",
    ﾜ: "ワ",
    ｦ: "ヲ",
    ﾝ: "ン",
    ｧ: "ァ",
    ｨ: "ィ",
    ｩ: "ゥ",
    ｪ: "ェ",
    ｫ: "ォ",
    ｯ: "ッ",
    ｬ: "ャ",
    ｭ: "ュ",
    ｮ: "ョ",
    "｡": "。",
    "､": "、",
    ｰ: "ー",
    "｢": "「",
    "｣": "」",
    "･": "・",
  };

  return kanaText
    .split("")
    .map((char) => (Object.hasOwn(kanaMap, char) ? kanaMap[char] : char))
    .join("");
}

// 🔹文字数制限関数
function limitStringLength(input, maxLength) {
  if (input.length > maxLength) {
    return input.substring(0, maxLength);
  }
  return input;
}

// 🔹「兆」「億」「万」「円」を万円単位の数字に変換する関数
function convertToMillions({ inputString, isDecimalPoint = false, assumeMillionByDefault = false }) {
  // 小数点なし
  if (!isDecimalPoint) {
    // 入力文字列が空の場合にはnullを返す
    if (inputString.trim() === "") return null;

    // function zenkakuToHankaku(str) {
    //   const zen = ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"];
    //   const han = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];

    //   for (let i = 0; i < zen.length; i++) {
    //     const regex = new RegExp(zen[i], "g");
    //     str = str.replace(regex, han[i]);
    //   }

    //   return str;
    // }

    // // 全角数字を半角に変換
    // inputString = zenkakuToHankaku(inputString);
    // 全角数字を半角に変換
    inputString = inputString.replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0));

    // 「兆」「億」「万」「円」の単位が含まれていなければ変換をスキップ
    // assumeMillionByDefaultがfalse: 12500000 => 1250万円
    // assumeMillionByDefaultがtrue: 1250 => 1250万円
    if (
      !inputString.includes("兆") &&
      !inputString.includes("億") &&
      !inputString.includes("万") &&
      !inputString.includes("円")
      // !inputString.includes(",")
    ) {
      let amount = parseInt(inputString.replace(/,/g, ""), 10);
      if (isNaN(amount)) return null;
      // 単位が指定されていないときの扱い 小数点の切り上げを行う 9000 => 0.9 => 1
      return assumeMillionByDefault ? amount : Math.ceil(amount / 10000); // assumeMillionByDefaultがtrueの場合はそのまま、falseの場合は万円単位に変換
    }

    // 兆、億、万、円で分割して数値を計算
    let total = 0;
    const trillionMatch = inputString.match(/(\d+(,\d+)*)兆/); // 数字一つ以上とカンマ数字一つ以上か、カンマ無し数字
    const billionMatch = inputString.match(/(\d+(,\d+)*)億/);
    const millionMatch = inputString.match(/(\d+(,\d+)*)万/);

    // 1,000や1,000,000のように単位無しで区切り文字のみ存在する場合は区切り文字を取り除いてそのまま返す
    if (!trillionMatch && !billionMatch && !millionMatch && inputString.includes(","))
      return parseInt(inputString.replace(/,/g, "").replace(/[^\d]/g, ""), 10);

    // trillionMatch[1]はキャプチャグループによって抽出された値 => 今回は\dで任意の数値、+で\dが一回以上の連続した数字
    if (trillionMatch) total += parseInt(trillionMatch[1].replace(/,/g, ""), 10) * 100000000; // 兆の計算
    if (billionMatch) total += parseInt(billionMatch[1].replace(/,/g, ""), 10) * 10000; // 億の計算
    if (millionMatch) total += parseInt(millionMatch[1].replace(/,/g, ""), 10); // 万の計算

    return total;
  } else {
    // 入力文字列が空の場合にはnullを返す
    if (inputString.trim() === "") return null;

    // 全角数字を半角に変換
    inputString = zenkakuToHankaku(inputString);

    // 「兆」「億」「万」「円」が含まれていなければ変換をスキップ 1250 => 1250万円
    if (
      !inputString.includes("兆") &&
      !inputString.includes("億") &&
      !inputString.includes("万") &&
      !inputString.includes("円") &&
      !inputString.includes(",")
    ) {
      return parseFloat(inputString);
    }

    // 兆、億、万、円で分割して数値を計算
    let total = 0;
    const trillionMatch = inputString.match(/(\d+(,\d+)*)兆/); // 数字一つ以上とカンマ数字一つ以上か、カンマ無し数字
    const billionMatch = inputString.match(/(\d+(,\d+)*)億/);
    const millionMatch = inputString.match(/(\d+(,\d+)*)万/);

    // 1,000や1,000,000のように単位無しで区切り文字のみ存在する場合は区切り文字を取り除いてそのまま返す
    if (!trillionMatch && !billionMatch && !millionMatch && inputString.includes(","))
      return parseFloat(inputString.replace(/,/g, "").replace(/[^\d]/g, ""));

    // trillionMatch[1]はキャプチャグループによって抽出された値 => 今回は\dで任意の数値、+で\dが一回以上の連続した数字
    if (trillionMatch) total += parseFloat(trillionMatch[1].replace(/,/g, "")) * 100000000; // 兆の計算
    if (billionMatch) total += parseFloat(billionMatch[1].replace(/,/g, "")) * 10000; // 億の計算
    if (millionMatch) total += parseFloat(millionMatch[1].replace(/,/g, "")); // 万の計算

    return total;
  }
}

// ----------------------------------- Web Workerスクリプト内で使用するヘルパー関数 -----------------------------------ここまで

// Next.jsのコンポーネントのビジネスロジックから
// new Worker('/workers/worker.js')
// new Worker()に「'/workers/worker.js'」のエンドポイントを渡すことで専用ワーカーのインスタンスを作成できる

// new Worker()に渡す引数について:
// new Worker() の引数には、ワーカーが実行するJavaScriptのスクリプトファイルのパスを渡します。ワーカー用のスクリプトファイル（例：worker.js）内に onmessage イベントハンドラを定義し、そこでメッセージを受信して処理を行います。

// Next.js と TypeScript を使用している場合のファイル形式:
// Web Worker はブラウザで直接実行されるJavaScriptのコードが必要です。TypeScriptを使用している場合でも、ワーカー用のスクリプトは純粋なJavaScript（.js）ファイルである必要があります。TypeScriptで書かれたコードはトランスパイルされた後のJavaScriptコードをワーカーに渡す必要があります。

// Next.js プロジェクトでのWeb Workerファイルの置き場所:
// Next.js プロジェクトでは、静的ファイルは通常 public ディレクトリに置かれます。Web Workerのスクリプトも public ディレクトリに配置することが推奨されます。そうすることで、new Worker('/worker.js') のようにパスを指定して簡単にアクセスできます。

// -----------------------------------🔸主なデータ前処理ステップ🔸-----------------------------------
/*
🔴
supabase.jsライブラリのrpcメソッドを使用する場合、基本的にはSupabaseが自動的にSQLインジェクション防止のためのパラメータバインディングを行います。これにより、直接的なSQLインジェクション攻撃から保護されます。しかし、データ前処理を行う際には、以下のような操作が引き続き有効です：

🔹1. データのトリミングと標準化：

・文字列の前後から不要な空白を削除する。
・必要に応じて、全角文字を半角文字に変換するなど、一貫したデータフォーマットを保証する。

🔹2. 文字列の安全なクリーニング：

・不適切な文字や特殊記号の除去（例：制御文字や非表示文字）。
・不必要な特殊文字が入力された場合のサニタイズ処理を行う。

🔹3. 文字数の制限：

・データベースのフィールドサイズに基づいて、適切な文字数制限を設定する。
・これにより、データの整合性を保ちながら、過度に長い文字列による問題を防ぐことができます。

🔹4. エスケープ処理の回避：

・rpcメソッドを使用する場合、サーバーサイドで適切にパラメータがバインドされるため、クライアントサイドでのSQLキーワードのエスケープ処理（シングルクォートを二重にするなど）は必要ありません。
・ただし、サーバーサイドのセキュリティが確実であると信じている場合でも、アプリケーションレベルでの最低限のサニタイズは推奨されます。

🔹5. 入力バリデーション：

・ユーザーからの入力が予期したフォーマットやデータ型であるかを確認する。
・例えば、数値が期待されるフィールドに文字列が入力されていないか等をチェックします。

これらの前処理は、主にデータの整合性を保ち、予期せぬエラーやデータの不整合を防ぐために重要です。Supabaseが多くの安全対策を提供しているとはいえ、アプリケーションレベルで適切なデータ処理を行うことが最良です。


🔴
🔹2. 文字列の安全なクリーニングの実装例
・不適切な文字や特殊記号の除去
特にWebアプリケーションにおいては、制御文字や非表示文字が混入することは珍しくありません。これらは表示上は見えないものの、データベースやアプリケーションの挙動に悪影響を及ぼすことがあります。JavaScriptでの実装例は以下の通りです：

function sanitizeString(input) {
  // 制御文字と非表示文字の除去
  const sanitized = input.replace(/[\x00-\x1F\x7F-\x9F]/g, "");
  return sanitized;
}

・不必要な特殊文字の除去
SQLインジェクションやXSS（クロスサイトスクリプティング）を防ぐために、特定の記号を削除することも考えられます。
例として、
;, --, /* ... */
/*
を削除する方法を示しますが、これらは通常SQLインジェクション攻撃に使われる記号です。

function cleanUpSymbols(input) {
  // SQLインジェクション攻撃に使われる記号の除去
  const cleanInput = input.replace(/;|--|\/\*|\*\//g, "");
  return cleanInput;
}

・SQL危険な文字のエスケープ シングルクォートとダブルクォート
Web Workerで事前にいくつかのエスケープ処理を行う場合は、例えばシングルクォートをエスケープする基本的な方法

processedValue = processedValue.replace(/'/g, "''"); // シングルクォートを二重にする

シングルクォートを二重にする意味
SQLにおいてシングルクォート（'）は、文字列リテラルの開始と終了を示すために使用されます。もしユーザー入力の文字列がシングルクォートを含んでいる場合、そのままSQL文に挿入されるとクエリが意図しない方法で終了してしまい、SQLインジェクションの原因となる可能性があります。例えば、ユーザーが 'Robert'; DROP TABLE students; -- といった入力を行った場合、これが処理されないと危険です。

シングルクォートを二重にする（''）ことにより、SQLインタープリタはこれを文字列内のシングルクォートとして解釈し、文字列の一部として適切に扱います。これにより、SQLインジェクションのリスクを軽減します。

ダブルクォート
PostgreSQLでは、ダブルクォート(")は主に識別子（テーブル名、カラム名など）を囲むのに使用されます。特に、識別子がPostgreSQLのキーワードや、大文字・小文字を区別する必要がある場合、またはスペースなどの特殊文字を含む場合にダブルクォートが必要になります。

ダブルクォートのエスケープ処理
SQLインジェクションを防ぐためにユーザー入力から来る識別子やSQLの一部としてダブルクォートをエスケープする必要がある場合、ダブルクォートは通常、それ自体を重ねることでエスケープされます。つまり、ダブルクォート内でダブルクォートを使用するには、それを二重にします。

let input = 'some "risky" string';
input = input.replace(/"/g, '""'); // ダブルクォートを二重にする



🔹3. 文字数の制限の実装例
データベースの各カラムに設定されている最大文字数に基づいて、入力されるデータの文字数を制限することが重要です。これはデータベースへの挿入前に行うべき処理で、例えば以下のように実装することができます：
この関数を使用して、ユーザー入力をデータベースのカラムサイズに合わせて制限します。例えば、部署名が最大50文字の場合は以下のように呼び出します：
これにより、データの整合性を保ちながら、データベースエラーの発生を防ぐことができます。また、セキュリティの観点からも、過度に長い入力を制限することで、潜在的な攻撃のリスクを軽減することができます。

function limitStringLength(input, maxLength) {
  return input.substring(0, maxLength);
}
const departmentName = limitStringLength(userInput, 50);

🔹4. エスケープ処理の回避の実装例
アプリケーションレベルでのサニタイズは、セキュリティを向上させるための重要な手段です。以下は、アプリケーションレベルで行うべきサニタイズのベストプラクティスです：

1. ユーザー入力の検証
入力検証（Validation）：データが期待される形式であることを確認します。例えば、電話番号や郵便番号は数字のみで構成されるべきですし、Eメールアドレスには特定の形式が求められます。
型検証：入力されたデータが適切なデータ型であるかを検証します（例：文字列、数値、日付）。

2. 文字列の正規化とクリーニング
トリミング：余分な空白を削除します。
エンコーディングの正規化：文字列を適切なエンコーディング形式（例：UTF-8）に正規化します。
制御文字の削除：非表示文字や制御文字を削除することで、SQLインジェクションやXSS攻撃のリスクを低減します。

3. SQLインジェクションの防止
パラメータ化クエリの使用：ユーザー入力を直接SQL文に組み込むのではなく、パラメータとして渡すことでSQLインジェクション攻撃を防ぎます。
エスケープ処理の回避：可能な限りエスケープ処理に頼らず、パラメータ化クエリを使用します。

4. XSS攻撃（クロスサイトスクリプティング）の防止
HTMLエスケープ：ユーザーからの入力をHTMLとしてレンダリングする前に、HTML特殊文字（例：<, >, &）をエスケープします。
コンテンツセキュリティポリシー（CSP）の設定：ブラウザに対し、どのスクリプトが実行されるべきかを指示するポリシーを設定します。

5. APIレベルでのセキュリティ
APIリクエストのレート制限：DDoS攻撃やブルートフォース攻撃を防ぐため、APIエンドポイントに対するリクエスト数を制限します。
APIキーの使用：APIキーを使用して、APIの利用を認証し、未承認アクセスを防ぎます。

これらの手法を適切に組み合わせて使用することで、アプリケーションのセキュリティを向上させることができます。各アプリケーションの具体的なニーズに応じて、これらのプラクティスをカスタマイズすることが重要です。

*/
// -----------------------------------🔸主なデータ前処理ステップ🔸-----------------------------------ここまで

// -----------------------------------🔸カラムごとの前処理関数🔸-----------------------------------
// 🔸法人名(corporate_name)の正規化・標準化 -----------------------------------
// 会社名は「法人名 拠点名」で最終的に結合してセット
// 【正規表現の構成要素】
// 半角に変換 「\uFF01-\uFF5D」 => 「\u0021-\u007D
// 「ａ-ｚＡ-Ｚ０-９」 全角英数字(ａ-ｚＡ-Ｚ０-９) 記号(（）＋％＆など)はそのまま
// 「\uFF01-\uFF5D」 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など) 全角チルダ（\uFF5E）を除外

// 【下記の指定した文字のみ会社名として許可 それ以外は空文字にリプレイス [^...]】

// ・a-zA-Z0-9: 半角英数字
// ・ （半角スペース）
// ・\u3000-\u303F：全角の記号と句読点(\u3000：全角スペース)
// ・\u3040-\u309F: ひらがな   (\p{Hiragana})
// ・\u30A0-\u30FF: 全角カタカナ  (\p{Katakana})
// ・\uFF65-\uFF9F: 半角ｶﾀｶﾅ
// ・\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005: 漢字 \u3005: 「々」（繰り返し記号）  (\p{Han})
// ・\u30FC: 全角の長音符(カタカナの長音符)
// ・\u002D: 半角ハイフン（-）
// ・\u002E: 半角ピリオド（.）
// ・\u0027: 半角アポストロフィ（'） - 企業名における所有格や略語でよく使用されます（例: O'Reilly, Ben's）
// ・\u005F: アンダースコア（_） - 特に技術関連の企業や製品名に使われることがあります
// ・\uFF08\uFF09\u0028\u0029: 全角半角括弧
//   ・\uFF08: （ 全角括弧
//   ・\uFF09: ） 全角括弧
//   ・「(」（左半角括弧）: \u0028
//   ・「)」（右半角括弧）: \u0029
// ・「・」（全角中点）: \u30FB
// ・「･」（半角中点）: 通常、この文字は特定のUnicode値を持たず、一般的なJISやシフトJISの文字セットに存在するため、そのままセット
// ・\u301C\uFF5F: 「〜」(全角チルダ) Windowsでは\uFF5F
// ・\u300C-\u3011: 鉤括弧
//    ・\u300C: 「
//    ・\u300D: 」
//    ・\u300E: 『
//    ・\u300F: 』
//    ・\u3010: 【
//    ・\u3011: 】

// 許容しない
// ・ａ-ｚＡ-Ｚ０-９: 全角英数字
// ・\u3000-\u303D：全角の記号と句読点(\u3000：全角スペース)
// ・\uFF65-\uFF9F: 半角ｶﾀｶﾅ

function normalizeCompanyName(name, csvHeader, isNullable = true) {
  if (!isNullable) {
    // if (!name) throw new Error(`❌会社名が存在しないため無効な行としてスルー`);
    if (!name) throw new Error(`[ERROR]|${csvHeader}|無効な法人名`);
  }
  // 全角英数字と全角スペースを半角に変換 「\uFF01-\uFF5D」 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など)「〜」は除く
  let halfName = name
    .replace(/[\uFF01-\uFF5D]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0))
    .replace(/[\s　]+/g, " ")
    .trim();

  // 半角ｶﾀｶﾅを全角に変換
  let formattedName = convertKanaHalfWidthToFullWidth(halfName);

  // limitStringLength
  let normalizedCompanyName = formattedName.replace(
    /[^a-zA-Z0-9 \u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF65-\uFF9F\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005\u30FC\u002D\u002E\u0027\u005F\uFF08\uFF09\u0028\u0029\u30FB･\u301C\uFF5F\u300C-\u3011]+/gu,
    ""
  );

  // 60 文字以上の場合は文字数を 60 文字までに制限
  return limitStringLength(normalizedCompanyName, 60);
}

// 🔸拠点名(branch_name)の正規化・標準化 -----------------------------------
function normalizeBranchName(branchName) {
  // 【正規表現の構成要素】
  // => 会社名と同じ

  // 空文字の場合はnullをセット
  return branchName ? normalizeCompanyName(branchName) : null;
}

// 🔸部署名(department_name)の正規化・標準化 -----------------------------------
function normalizeDepartmentName(department) {
  // 【正規表現の構成要素】
  // => 会社名と同じ

  // 部署名が空文字の場合はピリオドをセット
  return department ? normalizeCompanyName(department) : ".";
}

// 🔸代表TEL・電話番号(main_phone_number)の正規化・標準化 -----------------------------------
function normalizePhoneNumber(phoneNum) {
  if (!phoneNum) return null;
  // 全角数字、ハイフン、プラス、括弧を半角に変換
  const halfWidthTel = phoneNum
    .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0))
    .replace(/[\-−ー－]/g, "-") // ハイフンの種類を統一
    .replace(/＋/g, "+")
    .replace(/（/g, "(")
    .replace(/）/g, ")")
    .replace(/[\s　]+/g, ""); // 全角・半角スペースを削除

  // 不適切な文字の削除（数字、ハイフン、プラス、括弧以外を削除）
  const formattedNumber = halfWidthTel.replace(/[^\d\-\+\(\)]/g, "");

  // バリデーションチェック
  const regexPhone = /^[\d\-\+\(\)]+$/;
  const isValid = regexPhone.test(formattedNumber);
  return isValid ? limitStringLength(formattedNumber, 15) : null;
}

// 🔸代表Fax(main_fax)の正規化・標準化 -----------------------------------
function normalizeFax(fax) {
  // => 代表TELと同じ
  return normalizePhoneNumber(fax);
}

// 🔸郵便番号(zipcode)の正規化・標準化 -----------------------------------
function normalizePostalCode(postalCode, useJapanPostalFormat = true) {
  if (!postalCode) return null;
  /*
日本の郵便番号の形式: 123-4567 または 1234567

英語圏（例：アメリカ、イギリス）
アメリカ（ZIP Code）: 基本形式は5桁の数字（例: 12345）、拡張形式では4桁の数字をハイフンで区切って追加（例: 12345-6789）。
イギリス: 英字と数字の組み合わせで構成される複雑な形式（例: SW1A 1AA）。
中国
中国: 一般的に6桁の数字で構成される（例: 100000）。
インド
インド: 6桁の数字で構成されることが多い（例: 110001）。

イギリス: 英字と数字を組み合わせ、スペースで区切る形式（例: SW1A 1AA）。
アメリカ合衆国: 数字のみ、または数字にハイフンを含む形式（例: 12345、12345-6789）。
カナダ: 英字と数字の組み合わせ、スペースまたはハイフンで区切る形式（例: K1A 0B1）。
ヨーロッパの多くの国: 数字のみ、または数字と英字の組み合わせ（例: 1010、75008）。
オーストラリア、インド、中国など: 主に数字のみの形式。
*/
  let formattedPostalCode = postalCode.trim(); // 基本的なトリミング;

  // 日本の郵便番号フォーマット 7桁の数字のみ許可
  if (useJapanPostalFormat) {
    // フォーマット
    const halfWidth = postalCode
      .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0)) // 全角数字を半角に変換
      .replace(/[^0-9]/g, ""); // 半角数字のみ除去

    formattedPostalCode = halfWidth;

    // 半角数字7桁を許容
    const regex = /^[0-9]{7}$/; // 半角数字7桁のみかチェック
    const isValid = regex.test(formattedPostalCode);

    return isValid ? formattedPostalCode : null;
    // return { isValid, formattedPostalCode };
  }
  // 国際郵便番号フォーマット 半角英数字 ハイフンスペース
  else {
    const halfWidth = formattedPostalCode
      .replace(/[Ａ-Ｚａ-ｚ]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0)) //
      .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0))
      .replace(/[\s　]+/g, " ") // 全角スペースを半角スペースに変換
      .replace(/ー/g, "-") // 「ソニー」の「ー」長音符を半角ハイフンに変換
      .replace(/－/g, "-") // 全角ハイフンを半角に変換
      .replace(/−/g, "-"); // 全角ハイフンを半角に変換 // カタカナの長音記号も半角ハイフンに変換

    // 郵便番号は7桁でハイフンなしにフォーマット (郵便局の町域データの郵便番号もハイフンなしのため)
    formattedPostalCode = halfWidth.replace("-", "");

    // 数字、英字、ハイフン、スペースを許容
    const regex = /^[0-9A-Za-z\s\-]+$/;
    const isValid = regex.test(formattedPostalCode);

    return isValid ? formattedPostalCode : null;
  }
}

// 🔸住所の正規化・標準化 データクレンジング -----------------------------------

// 【日本と英語圏の住所標準化】
/*
 1. 正規化：
    ・全角文字を半角に変換
    ・不要なスペース、記号の削除 ・日本住所では、全角数字と全角ハイフンを半角に変換
 2. 型式の統一(住所要素を一定の順序で配置)
    ・日本：国名・郵便番号・都道府県・市区町村・番地・建物名
    ・英語圏：通りの名前・番地・市名・襲名・郵便番号
 3. 不要な情報の削除
    ・住所以外の「角の薬局まで来てください」などの指示などを削除
 4. データ検証
    ・可能であれば、郵便番号の正確性を検証し、存在しない住所や誤った郵便番号を修正

// ・\uFF01-\uFF5E: 全角の英数字や記号の範囲
// ・ch.charCodeAt(0) - 0xFEE0: 各文字のUnicodeコードポイントから 0xFEE0 を引くことで、対応する半角文字のコードポイントに変換します。
*/

// -----------------------------------🔸address🔸-----------------------------------
function normalizeAddress(address, csvHeader, groupedTownsByRegionCity) {
  // if (!address) throw new Error("住所がfalsyのため無効な行としてスルー");
  if (!address) throw new Error(`[ERROR]|${csvHeader}|無効な住所`);
  address = address.trim(); // 基本的なトリミング
  // 🔹1. 正規化
  // 全角英数字と全角記号の両方を半角に変換 「\uFF01-\uFF5E」\uFF5E(全角チルダ)含める 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など)
  address = address.replace(/[\uFF01-\uFF5E]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0));

  // 全角ハイフンと全角スペースを半角に変換(長音「ー」はそのまま残す) *3
  address = address.replace(/ー/g, "-").replace(/\u3000/g, " ");

  // 連続するスペースを1つに正規化
  address = address.replace(/[\s+]/g, " "); // 全角スペースを半角に変換後、連続するスペースを１つの半角スペースに正規化 (\s: すべての空白文字（半角スペース、タブ、改行など(全角スペースは含まない))

  // 🔹2. 形式の統一
  // 2-1. 各住所の要素を取り出しやすくするため住所の全ての空白を除去した変数を作成
  // 2-2. 日本か英語圏かの識別 都道府県Setオブジェクトにマッチすれば日本の住所 / 番地から始まっていれば英語圏の住所
  // 【日本の住所の形式統一】
  // 2-3. 都道府県Setオブジェクトにマッチした場合は変数から都道府県を取り出す
  // 2-4. 取り出した都道府県に対応する市区町村Setオブジェクトにマッチするかチェックし、マッチしたら市区町村を取り出す
  // 2-5. 「町域名・丁目・番地・号・建物名」はstreet_addressに格納
  // 2-6. 取り出した住所の各要素を結合して、番地と建物名の間に半角スペースをセットする

  // 日本の住所 形式統一

  // 各住所のセクションごとに格納
  // townは一致する町域名が抽出できた時にそのtown_idをtown_idカラムにセットする
  const addressElements = {
    prefecture: null,
    city: null,
    street_address: null,
  };

  // region_id, city_id, town_id
  const responseElements = {
    address: null, // addressElementsを結合した値
    prefecture: null,
    city: null,
    street_address: null,
    country_id: 153,
    region_id: null,
    city_id: null,
    normalized_town_name: null,
    grouped_towns_by_cities: null, // 都道府県名・市区町村名に対応する町域リストとzipcodeの値を使用して、町域データを取得するため
  };

  try {
    // 🔸都道府県の抽出
    const prefectureMatch = address.match(regExpPrefecture);
    // 適切な住所が入力されていなければ、この行データ自体をnullで返し、最後に削除
    // if (!prefectureMatch) throw new Error("都道府県が見つかりませんでした。");
    if (!prefectureMatch) throw new Error(`[ERROR]|${csvHeader}|無効な都道府県名`);
    addressElements.prefecture = prefectureMatch[1];
    responseElements.prefecture = prefectureMatch[1];
    // region_idセット
    responseElements.region_id = regionsNameToIdMapJp.get(prefectureMatch[1]) ?? null;

    // 🔸市区町村の抽出
    const regExpCity = regionNameToRegExpCitiesJp[addressElements.prefecture];
    const cityMatch = address.match(regExpCity);
    // if (!cityMatch) throw new Error("市区町村が見つかりませんでした。");
    if (!cityMatch) throw new Error(`[ERROR]|${csvHeader}|無効な市区町村名`);
    addressElements.city = cityMatch[1]; // 0はマッチ全体の文字列で 1はキャプチャグループでマッチした１つ目の文字
    responseElements.city = cityMatch[1]; // 0はマッチ全体の文字列で 1はキャプチャグループでマッチした１つ目の文字
    // city_idセット
    const cityNameToIdMap = regionNameToIdMapCitiesJp[addressElements.prefecture];
    responseElements.city_id = cityNameToIdMap.get(cityMatch[1]) ?? null;

    // 🔸正規化された町域名の取得
    // 抽出した都道府県名と市区町村名に一致する町域リストを取得
    let townsList = [];
    if (Object.hasOwn(groupedTownsByRegionCity, addressElements.prefecture)) {
      const prefectureObj = groupedTownsByRegionCity[addressElements.prefecture];
      if (Object.hasOwn(prefectureObj, addressElements.city)) {
        townsList = prefectureObj[addressElements.city];
      }
    }

    // 都道府県名と市区町村名を除く住所を変数に格納
    const addressWithoutCity = address.replace(addressElements.prefecture, "").replace(addressElements.city, "").trim();

    // 町域リストが取得できなかった場合は、都道府県名と市区町村名を除く残りの値をstreet_addressにセットしてリターン
    if (0 < townsList.length) {
      // 町域リストを格納
      responseElements.grouped_towns_by_cities = townsList;

      // 正規化した町域名のみ配列にまとめて、重複があるので、Setオブジェクトに変換して一意にする
      const townNamesSet = new Set(townsList.map((obj) => obj.normalized_name));

      // 文字列の長さで降順にソート
      /* 
      並び替えをせずにそのまま正規表現を実装すると「笹久保新田」の町域名でも
      「/(笹久保|笹久保新田)/」の正規表現で「笹久保」まで同じ文字列が重複している値がある場合先にセットした「笹久保」にマッチしてしまうため
      並び替えが必要
      const address = '埼玉県さいたま市岩槻区大字笹久保新田550番地'
      const regex = /(笹久保|笹久保新田)/
      const matchTown = address.match(regexTowns);
      結果: ['笹久保', '笹久保', index: 13, input: '埼玉県さいたま市岩槻区大字笹久保新田550番地', groups: undefined]
      */
      const sortedTownNames = Array.from(townNamesSet).sort((a, b) => b.length - a.length);

      // 一意な町域名の一覧を使用して正規表現を作成(キャプチャグループ)
      // const regexTowns = new RegExp("(" + Array.from(townNamesSet).join("|") + ")", "g");
      const regexTowns = new RegExp(`(${Array.from(sortedTownNames).join("|")})`);
      // const regexTowns = new RegExp("(" + Array.from(sortedTownNames).join("|") + ")");

      // 町域名をチェック マッチしたならtown_idをセット 町域名は完全でないので、そのままstreet_addressに残りをセット
      const matchTown = addressWithoutCity.match(regexTowns);
      // console.log(
      //   "address処理",
      //   `townNamesSet: `,
      //   townNamesSet,
      //   "sortedTownNames: ",
      //   sortedTownNames,
      //   `regexTowns: `,
      //   regexTowns,
      //   "matchTown: ",
      //   matchTown
      // );

      if (matchTown) {
        // responseElements.normalized_town_name = matchTown[1];
        responseElements.normalized_town_name = matchTown[0];
      }
    }

    // 🔸市区町村以下の情報を一括して扱う; 結城市大字七五三場六百四十五番地七 建物名 のように
    // 「丁目・番地(番)・号」が漢数字の場合、「町名(地名)」と「丁目・番地(番)・号」や
    // 「六百四十五番地七」と「一二三ビル」のように両者の末尾と先頭が漢数字場合の境界を正確に特定するのが困難のため
    addressElements.street_address = addressWithoutCity;
    responseElements.street_address = addressWithoutCity;

    // 🔸prefecture, city, street_addressを全て結合して標準化したaddressを返す
    const { prefecture, city, street_address } = addressElements;
    responseElements.address = prefecture + city + street_address ?? "";

    // console.log(
    //   "🔥🔥🔥address前処理",
    //   `townsList: `,
    //   townsList,
    //   `groupedTownsByRegionCity: `,
    //   groupedTownsByRegionCity,
    //   `addressElements:`,
    //   addressElements,
    //   `addressWithoutCity: `,
    //   addressWithoutCity,
    //   "responseElements: ",
    //   responseElements,
    //   "responseElements.normalized_town_name: ",
    //   responseElements.normalized_town_name
    // );

    return responseElements;
  } catch (error) {
    // console.log("❌addressカラムの標準化に失敗しました エラー：", error);
    // return null;
    throw new Error(error.message);
  }
}
// -----------------------------------🔸address🔸-----------------------------------ここまで

// 🔸代表者名(representative_name)の正規化・標準化 -----------------------------------
// 会長(chairperson)・副社長(senior_vice_president)・専務取締役(senior_managing_director)・常務取締役(managing_director)・取締役(director)・役員(board_member)・監査役(auditor)・部長(manager)・担当者(member)でも使用
// 【正規表現の構成要素】
// 半角に変換
// 「\uFF01-\uFF5E」 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など)

// 許容
// ・a-zA-Z: 半角英字
// ・0-9: 半角数字  (衛宮士郎(~部第2課)なども許容するため)
// ・` `（半角スペース）
// ・\u3040-\u309F: ひらがな   (\p{Hiragana})
// ・\u30A0-\u30FF: 全角カタカナ  (\p{Katakana})
// ・\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005: 漢字 \u3005: 「々」（繰り返し記号）  (\p{Han})
// ・\u30FC: 全角の長音符(カタカナの長音符)
// ・\uFF08\uFF09\u0028\u0029: 全角半角括弧
//    \uFF08: （ 全角括弧
//    \uFF09: ） 全角括弧
//    「(」（左半角括弧）: \u0028
//    「)」（右半角括弧）: \u0029
// ・
// ・\u002D: 半角ハイフン（-）
// ・\u005F: アンダースコア（_） - 特に技術関連の企業や製品名に使われることがあります
// ・「・」（全角中点）: \u30FB
// ・「･」（半角中点）: 通常、この文字は特定のUnicode値を持たず、一般的なJISやシフトJISの文字セットに存在するため、そのままセット
// ・\u002E: 半角ピリオド（.）
// ・\u0027: 半角アポストロフィ（'） - 企業名における所有格や略語でよく使用されます（例: O'Reilly, Ben's）
// ・\u301C\uFF5F: 「〜」(全角チルダ) Windowsでは\uFF5F

// 許容しない
// ・０-９: 全角数字
// ・ａ-ｚＡ-Ｚ: 全角英数字
// ・\u3000-\u303F：全角の記号と句読点(\u3000：全角スペース)
// ・\uFF65-\uFF9F: 半角ｶﾀｶﾅ

function normalizeRepresentativeName(name) {
  if (!name) return null;
  // 「\uFF01-\uFF5E」 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など)
  let halfName = name
    .replace(/[ａ-ｚＡ-Ｚ０-９]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0)) // 全角英字を半角に変換
    .replace(/[\s　]+/g, " ") // 全角スペースを半角スペースに変換
    .trim();

  // 半角ｶﾀｶﾅを全角に変換
  let formattedName = convertKanaHalfWidthToFullWidth(halfName);

  // 【下記の指定した文字のみ許可 それ以外は空文字にリプレイス [^...]】 結果が空文字ならnullをセット
  formattedName =
    formattedName.replace(
      /[^a-zA-Z0-9 \u3040-\u309F\u30A0-\u30FF\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005\u30FC\uFF08\uFF09\u0028\u0029\u002D\u005F\u30FB･\u002E\u0027\u301C\uFF5F]+/gu,
      ""
    ) || null;

  if (!!formattedName) {
    // 50文字まで
    return limitStringLength(formattedName, 50);
  } else {
    return null;
  }
}

// 🔸会長(chairperson)の正規化・標準化 -----------------------------------
// "chairperson": // 会長
// "senior_vice_president": // 副社長
// "senior_managing_director": // 専務取締役
// "managing_director": // 常務取締役
// "director": // 取締役
// "board_member": // 役員
// "auditor": // 監査役
// "manager": // 部長
// "member": // 担当者

// 半角に変換 「\uFF01-\uFF5D」 => 「\u0021-\u007D」
// 「\uFF01-\uFF5D」 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など)「〜」除く

// 許容
// ・「\u0021-\u007E」: 半角英数字~記号(全角から変換後) 半角の「/」（\u002F）含む 全角の「／」（\uFF0F）から「0xFEE0」を引いたもの
// ・「\uFF01-\uFF5E」: 全角英数字~記号
// ・\uFF5F\u301C: 「〜」(全角チルダ) Windowsでは\uFF5F
// ・a-zA-Z: 半角英字
// ・0-9: 半角数字  (衛宮士郎(~部第2課)なども許容するため)
// ・\uFF65-\uFF9F: 半角ｶﾀｶﾅ
// ・` `（半角スペース）
// ・\u3040-\u309F: ひらがな   (\p{Hiragana})
// ・\u30A0-\u30FF: 全角カタカナ  (\p{Katakana})
// ・\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005: 漢字 \u3005: 「々」（繰り返し記号）  (\p{Han})
// ・\u30FC: 全角の長音符(カタカナの長音符)
// ・\u002D: 半角ハイフン（-）
// ・\u002E: 半角ピリオド（.）
// ・\u0027: 半角アポストロフィ（'） - 企業名における所有格や略語でよく使用されます（例: O'Reilly, Ben's）
// ・\u005F: アンダースコア（_） - 特に技術関連の企業や製品名に使われることがあります
// ・\uFF08\uFF09\u0028\u0029: 全角半角括弧
//    ・\uFF08: （ 全角括弧
//    ・\uFF09: ） 全角括弧
//    ・「(」（左半角括弧）: \u0028
//    ・「)」（右半角括弧）: \u0029
// ・\u30FB: 「・」（全角中点）
// ・「･」（半角中点）: 通常、この文字は特定のUnicode値を持たず、一般的なJISやシフトJISの文字セットに存在するため、そのままセット
// ・\u300C-\u3011: 鉤括弧
//    ・\u300C: 「
//    ・\u300D: 」
//    ・\u300E: 『
//    ・\u300F: 』
//    ・\u3010: 【
//    ・\u3011: 】
// ・\u3012: 「〒」
// ・\u3001: 「、」
// ・\n: 改行

// 許容しない
// ・ａ-ｚＡ-Ｚ０-９: 全角英数字
// ・\u3000-\u303D：全角の記号と句読点(\u3000：全角スペース)

// 複数名を許可: 下記が例
// 【常務執行役員】阿黒  大輔、【執行役員】高橋  正行　　辻井  幸弘　　友澤  俊一　関澤  正人　　高橋  敬　　　小泉  修司
// 常務取締役 ／ 塩貝 哲也
function normalizeContactNames(name) {
  if (!name) return null;
  // 全角英数字と全角スペースを半角に変換 記号はそのままにしておく 「\uFF01-\uFF5D」 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など)「〜」は除く
  let halfName = name
    .replace(/[ａ-ｚＡ-Ｚ０-９]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0))
    .replace(/[\s　]+/g, " ")
    .trim();

  // 「a-zA-Z0-9」 => 「\uFF01-\uFF5D\u0021-\u007D」
  let normalizedCompanyName = halfName.replace(
    /[^\u0021-\u007E\uFF01-\uFF5E\u301C \u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF65-\uFF9F\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005\u30FC\u002D\u002E\u0027\u005F\uFF08\uFF09\u0028\u0029\u30FB･\u300C-\u3011\u3012\u3001\n]+/gu,
    ""
  );

  // 300 文字以上の場合は文字数を 300 文字までに制限
  return limitStringLength(normalizedCompanyName, 300);
}

// 🔸ホームページURL・Webサイト URL(website_url)の正規化・標準化 -----------------------------------

// 「https://www.example.com/dashboard」のURLの構成 => DBにはオリジン部分を保存する
// protocol(scheme): https:
// host: www.example.com
// pathname: /dashboard
// origin: https://www.example.com
// href: https://www.example.com/dashboard

function normalizeWebSiteURL(url) {
  if (!url) return null;
  // トリミングとプロトコルの確認と追加
  let normalizedUrl = url.trim();

  if (!normalizedUrl.startsWith("http://") && !normalizedUrl.startsWith("https://")) {
    normalizedUrl = "https://" + normalizedUrl;
  }

  // new URL() を使用して、URLが有効かどうかを確認し、さらに正規化することも可能です。不完全または相対URLが渡された場合、new URL() はエラーを投げるので、これをトライ・キャッチブロックで捕捉できます。

  try {
    // new URL() を使用して、URLが有効かどうかチェック 無効なURLの場合はエラーを投げるためcatchブロックで補足
    const urlObj = new URL(normalizedUrl);

    // ドメイン名のみ小文字に変換
    urlObj.hostname = urlObj.hostname.toLowerCase();

    // urlObj.origin プロパティはスキーマ(プロトコル)、ホスト名（小文字に変換された後のもの）、およびポート（存在する場合）を含む完全なオリジンを返します。これにより、ウェブサイトの基本アドレスのみを保存し、余分なパスやクエリパラメータは除外されます。
    return urlObj.origin; // オリジン部分だけを返す(プロトコル、ドメイン名、必要に応じてポート番号)
  } catch (error) {
    // 無効なURLのためnullを返す
    return null;
  }
}
// 🔸Email(email)の正規化・標準化 -----------------------------------
// RFC5322はInternet Message Format(IMF)となっており、電子メールの形式を定義
/*
🔹メールアドレスの構成

  local@domain

・local: 最大64文字まで
・domain: 最大255文字
・@ の直前(local部分)に . を置くことや連続して . を置くことは禁止
・メールアドレスのlocal部分の文字列にはdot-atom形式とquoted-string形式が許可されていて
・domain部分には、dot-atom形式の文字が許可されている

🔹dot-atom形式
・RFC 5322によると、atextで定義される一連の文字に基づく形式。
atext には英数字（A-Z, a-z, 0-9）や特定の記号（!#$%&'*+-/=?^_`{|}~）が含まれる。
この形式では、これらの文字の間に点（.）が入ることができますが、連続した点（..）や点で始まることは許されません。

・dot-atom形式のlocal部分の使用例：「++*start_{}@domain.com」でもOK

🔹quoted-string形式
quoted-string: この形式では、ダブルクォート（"）で囲まれた任意のテキストが使用できます。この中では、ほぼすべてのASCII文字（バックスラッシュ \ とダブルクォートを除く）が使用可能で、バックスラッシュ \ はエスケープ文字として機能し、通常は禁止されている文字（例えば、改行やダブルクォート自体）を含めることができます。

・quoted-string形式のlocal部分の使用例：「"start \s-"@domain.com」

解釈の確認
dot-atom形式: おっしゃる通り、アルファベット、数字、特定の記号から成り、ピリオドを含むことができますが、ピリオドの使用には制限があります。
quoted-string形式: バックスラッシュでエスケープされた任意の文字やスペースを含むことができ、ダブルクォートで囲まれている必要があります。

はい、おっしゃる通りです。メールアドレスのlocal部分で、quoted-string形式とdot-atom形式はそれぞれ異なる種類の使用を許可しています。

Quoted-string形式
quoted-string 形式では、ダブルクォートで囲まれた内部であれば、スペースやエスケープされた特殊文字を含めることが可能です。例えば、「"start \s-"@domain.com」のようなメールアドレスは、この形式で正当です。
Dot-atom形式
dot-atom 形式では、英数字や指定された記号を使用できます。記号間にスペースを入れることはできませんが、連続して使用することは可能です。したがって、「++*start_{}@domain.com」というメールアドレスも、local部分がdot-atom形式に適合していれば有効です。

*/
function normalizeEmail(email, csvHeader) {
  if (!email) return null;
  // const regexEmail = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

  // 🌠正式にフロントエンドで使用するlocal部分とDomain部分の正規表現をdot-atom形式に対応したバリデーションチェック
  // local部分とdomain部分を合わせた形でメールアドレス全体のバリデーションチェックをする際にdot-atom形式のみに対応した正規表現
  // (quoted-string形式には対応せず、dot-atom形式のみに対応した正規表現)

  // 【2段階のバリデーションチェック】

  try {
    // トリミングと小文字化
    const normalizedEmail = email.trim().toLowerCase();
    // 1. メールアドレスがdot-atom形式に対応しているか構文チェック atextと(.)ドットのみ許可 連続したdotは禁止,先頭末尾のdotも禁止
    // atext: 英数字（A-Z, a-z, 0-9）や特定の記号（!#$%&'*+-/=?^_`{|}~）
    const regexEmailDotAtom =
      /^[a-zA-Z0-9_+%\-]+(\.[a-zA-Z0-9_+%\-]+)*@[a-zA-Z0-9\-]+(\.[a-zA-Z0-9\-]+)*\.[a-zA-Z]{2,}$/;
    const isValidDotAtom = regexEmailDotAtom.test(normalizedEmail);

    // emailカラムではnullをセットするだけでエラーでも行を除外はしない
    if (!isValidDotAtom) throw new Error("メールアドレスの形式が有効ではありません。");

    // 2. 文字数チェック local部分: 最大64文字, domain部分: 最大255文字
    const regexEmailLength = /^(?=.{1,64}@)(?=.{1,255}$)/;
    const isValidLength = regexEmailLength.test(normalizedEmail);

    if (!isValidLength) throw new Error("メールアドレスの長さが規定を超えています。");

    return normalizedEmail;
  } catch (error) {
    // console.log("Worker: email前処理エラー: ", error);
    return null;
  }
}

// 🔸業種(industry_type_id)の正規化・標準化 -----------------------------------
// 業種別のキーワードセット
const industryKeywords = {
  1: ["自動車", "輸送", "モビリティ", "AUTOMOTIVE", "車"], // 自動車・輸送機器
  2: ["半導体", "電子", "光学", "基板", "チップ", "FPC", "コイル", "フレキ", "ケーブル", "端子", "コネクタ", "電池"], // 電子部品・半導体
  3: ["IT", "情報", "通信", "ソフト", "テクノロジー", "SaaS", "データベース", "DX", "ネットワーク"], // IT・情報通信・ソフトウェア
  4: ["機械要素", "部品", "ねじ", "ボルト", "ベアリング", "ファスナー", "パーツ", "シャフト"], // 機械要素・部品
  5: ["製造・加工受託", "加工", "プレス", "切削", "旋盤", "マシニング", "フライス"], // 製造・加工受託
  6: ["鉄", "非鉄"], // 鉄/非鉄金属
  7: ["産業用機械", "空調用ヒーター", "熱交換器", "洗浄機"], // 産業用機械
  8: ["産業用電気機器", "電機"], // 産業用電気機器
  9: ["民生用電気機器"], // 民生用電気機器
  10: ["樹脂", "プラスチック", "化成", "樹脂切削", "FRP", "GFRP", "CFRP"], // 樹脂・プラスチック
  11: ["ゴム", "シリコーン", "シール", "パッキン", "Oリング"], // ゴム製品
  12: ["化学", "ケミカル"], // 化学
  13: ["セラミック", "石英", "ダイヤモンド", "ジルコニア", "アルミナ"], // セラミックス
  14: ["繊維", , "フエルト", "フェルト", "糸", "ファイバー", "不繊布"], // 繊維
  15: ["ガラス", "硝子"], // ガラス製品
  16: ["CAD", "CAM", "CAE"], // CAD/CAM
  17: ["航空", "宇宙", "エアロ", "スペース", "SPACE"], // 航空・宇宙
  18: ["建材", "資材", "什器"], // 建材・資材・什器
  19: ["造船", "重機", "船舶"], // 造船・重機
  20: ["環境", "プラント", "水処理", "廃棄物"], // 環境
  21: ["印刷", "銘板", "転写", "PRINT", "ラベル", "プリンタ"], // 印刷業
  22: ["鉱業", "鉱物"], // 鉱業
  23: ["紙", "包装", "パルプ", "段ボール", "ダンボール"], // 紙・包装資材・パルプ
  24: ["ロボット", "ROBOT", ""], // ロボット
  25: ["試験", "分析", "測定"], // 試験・分析・測定
  26: ["エネルギー"], // エネルギー
  28: ["食品機械"], // 食品機械
  27: ["飲料", "食料", "食品"], // 飲食料品
  29: ["光学機器"], // 光学機器
  30: ["医療機器"], // 医療機器
  31: ["その他製造"], // その他製造
  32: ["金融", "証券", "保険"], // 金融・証券・保険業
  33: ["商社", "卸売"], // 商社・卸売
  34: ["広告", "メディア"], // 広告・メディア
  35: ["不動産"], // 不動産
  36: ["建設", "建築"], // 建設
  37: ["物流", "運送", "倉庫"], // 物流・運送・倉庫関連
  38: ["教育"], // 教育・研究機関
  39: ["石油", "石炭"], // 石油・石炭関連
  40: ["製薬", "医薬"], // 製薬・医薬品・バイオ
  41: ["医療", "福祉"], // 医療・福祉
  42: ["化粧品"], // 化粧品
  43: ["小売"], // 小売
  44: ["飲食", "レストラン", "居酒屋", "カフェ"], // 飲食店
  45: ["宿泊", "ホテル", "民泊"], // 宿泊業
  46: ["サービス"], // サービス業
  47: ["水産", "農林"], // 水産・農林業
  48: ["警察", "消防", "自衛隊"], // 警察・消防・自衛隊
  49: ["公益", "独立行政法人", "NPO", "公共団体"], // 公益・特殊・独立行政法人
  50: ["電力", "火力", "水力", "発電", "ガス", "水道", "エネルギー"], // 電気・ガス・水道業
  51: ["官公庁"], // 官公庁
  52: ["自営業", "個人", "フリーランス"], // 自営業・個人
  53: ["その他"], // その他
};

function normalizeIndustryType(industryName) {
  if (!industryName) return null;

  // 全角英数字を半角に 「\uFF01-\uFF5E」 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など)
  const halfName = industryName
    .replace(/[\uFF01-\uFF5E]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0)) // 全角英字を半角に変換
    .replace(/[\s　]+/g, "") // スペースを除去
    .trim();

  // 半角ｶﾀｶﾅを全角に変換
  const normalizedName = convertKanaHalfWidthToFullWidth(halfName);

  // それぞれの業種に関連するキーワードにマッチした業種idをリターン
  function findIndustryId(industryName) {
    for (const [industryId, keywords] of Object.entries(industryKeywords)) {
      if (keywords.some((keyword) => industryName.includes(keyword))) {
        return industryId; // マッチした業種IDを返す
      }
    }
    return null; // マッチする業種がなかった場合はnullを返す
  }

  // 大文字に変換して大文字小文字関係なくキーワードマッチを実行
  return findIndustryId(normalizedName.toUpperCase());
}

// 🔸業界大分類(industry_large)の正規化・標準化 -----------------------------------
function normalizeIndustryLarge(industryName) {
  if (!industryName) return null;
  // 全角英数字を半角に
  let normalizedName = industryName
    .replace(/[\uFF01-\uFF5E]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0)) // 全角英字を半角に変換
    .replace(/[\s　]+/g, "") // スペースを除去
    .trim();

  // 半角ｶﾀｶﾅを全角に変換
  normalizedName = halfName.replace(
    /[^a-zA-Z0-9 \u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF65-\uFF9F\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005\u30FC\u002D\u002E\u0027\u005F\uFF08\uFF09\u0028\u0029\u30FB･]+/gu,
    ""
  );

  // 30 文字以上の場合は文字数を 30 文字までに制限
  return limitStringLength(normalizedName, 30);
}

// 🔸業界小分類(industry_small)の正規化・標準化 -----------------------------------
function normalizeIndustrySmall(industryName) {
  // 業界大分類と同じ
  return normalizeIndustryLarge(industryName);
}

// 🔸従業員数(number_of_employees)の正規化・標準化 -----------------------------------
function normalizeNumberOfEmployees(num) {
  // null, undefined, '', 0は全てnullを返す
  if (!num) return null;

  // 100名 => 100 に標準化 全角数字を半角に変換し、半角数字以外を削除
  let normalizedNum = num
    .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0))
    .replace(/[^\d]/g, "");

  // INTEGER型のためparseIntで整数値に変換し、7桁未満100万人未満であることをチェック
  const employeeCount = parseInt(normalizedNum, 10);
  if (!isNaN(employeeCount) && employeeCount.toString().length < 7) {
    return employeeCount;
  }
  return null; // バリデーションに合格しない場合にはnullを返す
}

// 🔸決算月(fiscal_end_month)の正規化・標準化 -----------------------------------
// 予算申請月1, 2も同じ関数を使用
function normalizeMonth(month) {
  if (!month) return null;
  // 半角数字のみ残す
  let formattedMonth = month
    .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0))
    .replace(/[^0-9]/, ""); // 数字以外の文字を削除

  // 数字を検証してから、1~12の範囲にあるか確認
  const monthNumber = parseInt(formattedMonth, 10);
  if (1 <= monthNumber && monthNumber < 12) {
    return monthNumber.toString(); // 月はtext型で管理しているため文字列に変換
  } else {
    return null; // 範囲外の場合はnullを返す
  }

  // 1~12までを許容 全角は半角へ、12月の月は除去するフォーマット
  // // 「月」が含まれている場合は削除 $1は最初のキャプチャグループの(\d+) 1~12のみ残す(1~12月なら)
  // formattedMonth = formattedMonth.replace(/(\d+)(月)($)/g, "$1");

  // // 1~12までの値のどれかに一致しているかをチェック
  // const isValid =
  //   /^(1[0-2]|[1-9])$/.test(formattedMonth) && parseInt(formattedMonth, 10) >= 1 && parseInt(formattedMonth, 10) <= 12;

  // // isValidとformattedMonthをリターン
  // return isValid ? formattedMonth : null;
}

// 🔸資本金(capital)の正規化・標準化 -----------------------------------
// ~万単位にフォーマット
// 1000のみの場合は1000, (兆,億,万,円が付いていない場合はそのまま)
// 12,500,000円 => 1250,
// 100万 => 100,
// 1億 => 10000
function normalizeCapital(value, inputDefaultUnit) {
  if (!value) return null;

  let normalizedValue = value
    .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0)) // 全角数字を半角に変換
    .replace(/[\s　]/g, ""); // スペースを削除

  // 「半角数字と兆億万円」以外の文字を削除
  const formattedValue = normalizedValue.replace(/[^0-9兆億万円]/g, "");

  // 「兆」「億」「万」「円」を万円単位の数字に変換 inputDefaultUnit === 'default'
  // console.log(
  //   "資本金処理 convertToMillions assumeMillionByDefault: ",
  //   inputDefaultUnit === "million",
  //   "inputDefaultUnit",
  //   inputDefaultUnit
  // );
  const convertedMillions = convertToMillions({
    inputString: formattedValue,
    isDecimalPoint: false,
    assumeMillionByDefault: inputDefaultUnit === "million",
  });

  if (convertedMillions !== null && !isNaN(convertedMillions)) {
    return convertedMillions;
  } else {
    return null;
  }
}

// 🔸設立年(設立年月・年月日)(established_in)の正規化・標準化 -----------------------------------
/* 形式統一 日本・英語圏両方に対応可能なフォーマットに変換 (ISO 8601形式（YYYY-MM-DD))
// postgreSQL: 1999-01-08	ISO 8601。すべてのモードで1月8日になります（推奨書式）。

1992年1月 => 1992-01 
1992年1月1日 => 1992-01-01
昭和45年12月 => 1970-12
平成4年 => 1992

*/

function normalizeDate(inputDate) {
  if (!inputDate) return null;

  // 元号を西暦に変換するマップ
  const eraToYear = {
    大正: 1911, // 大正元年は1912年
    昭和: 1925, // 昭和元年は1926年ですが、計算のために1925を基準にする
    平成: 1988, // 平成元年は1989年
    令和: 2018, // 令和元年は2017年
  };

  // 日付の全角数字を半角に変換
  let normalizedDate = inputDate
    .replace(/[０-９／]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0))
    .replace(/[\s　]/g, "")
    .trim();

  // 元号があるか確認し、あれば西暦に変換
  Object.keys(eraToYear).forEach((era) => {
    if (normalizedDate.includes(era)) {
      const yearOffset = eraToYear[era];
      const yearRegex = new RegExp(`${era}([0-9]+)年`);
      const yearMatch = normalizedDate.match(yearRegex);
      if (yearMatch) {
        const year = parseInt(yearMatch[1], 10) + yearOffset; // 平成4年なら1988から4年プラスにオフセットすると1992年
        normalizedDate = normalizedDate.replace(yearRegex, `${year}年`); // 平成4年12月 => 1992年12月に変換
      }
    }
  });

  // yyyy年 or yyyy年MM月 or yyyy年MM月dd日 yyyy/MM/dd にも対応
  // 日付フォーマットを ISO 8601 に変換
  normalizedDate = normalizedDate
    .replace(/(\d{4})[年\/](\d{1,2})[月\/](\d{1,2})日?/, "$1-$2-$3") // yyyy-MM-ddの形式にフォーマット
    .replace(/(\d{4})[年\/](\d{1,2})月?/, "$1-$2") // yyyy-MMの形式にフォーマット
    .replace(/^(\d{4})年?$/, "$1"); // yyyyの形式にフォーマット

  // // yyyy年 or yyyy年MM月 or yyyy年MM月dd日
  // normalizedDate = normalizedDate
  //   .replace(/(\d{4})年(\d{1,2})月(\d{1,2})日?/, "$1-$2-$3") // yyyy-MM-ddの形式にフォーマット
  //   .replace(/(\d{4})年(\d{1,2})月/, "$1-$2") // yyyy-MMの形式にフォーマット
  //   .replace(/(\d{4})年/, "$1"); // yyyyの形式にフォーマット

  // yyyy/MM/dd
  // else if (normalizedDate.includes("/")) {
  //   normalizedDate = normalizedDate
  //     .replace(/(\d{4})\/(\d{1,2})\/(\d{1,2})/, "$1-$2-$3") // yyyy-MM-ddの形式にフォーマット
  //     .replace(/(\d{4})\/(\d{1,2})/, "$1-$2") // yyyy-MMの形式にフォーマット
  //     .replace(/^(\d{4})$/, "$1"); // yyyyの形式にフォーマット
  // }

  // 日付が正しいフォーマットになっているか確認
  const regexPatterns = [
    /^(\d{4})-(\d{1,2})-(\d{1,2})$/, // yyyy-MM-dd
    /^(\d{4})-(\d{1,2})$/, // yyyy-MM
    /^(\d{4})$/, // yyyy
  ];

  // パターンに一致するか確認し、最初に合致したフォーマットに基づいて日付を返す
  for (const pattern of regexPatterns) {
    if (pattern.test(normalizedDate)) {
      return normalizedDate;
    }
  }

  return null; // フォーマットが正しくない場合は null を返す
}

// 🔸法人番号(corporate_number)の正規化・標準化 -----------------------------------
// 13桁で保存されているためこのままチェック
// 4120001051530: 株式会社キーエンス
function normalizeCorporateNumber(input) {
  if (!input) return null;
  // 数字を半角に変換して、半角数字以外を除去
  const normalizedNumber = input
    .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0)) // 全角数字を半角に変換
    .replace(/[^0-9]/g, ""); // 半角数字のみ除去

  // 半角数字7桁を許容
  const regex = /^[0-9]{13}$/; // 半角数字13桁のみかチェック
  const isValid = regex.test(normalizedNumber);

  return isValid ? normalizedNumber : null;
}

// 🔸取引先(clients)の正規化・標準化 -----------------------------------
// "clients": // 取引先(納入先)
// "supplier": // 仕入先
// "business_sites": // 事業拠点
// "overseas_bases": // 海外拠点
// "group_company": // グループ会社

// normalizeContactNames と同じ

function normalizeClients(input) {
  if (!input) return null;
  // 全角英数字と全角スペースを半角に変換 記号はそのままにしておく 「\uFF01-\uFF5D」 全角英数字(ａ-ｚＡ-Ｚ０-９)と記号(（）＋％＆など)「〜」は除く
  let halfName = input
    .replace(/[ａ-ｚＡ-Ｚ０-９]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0))
    .replace(/[ \t　]+/g, " ") // 半角スペース、タブ、全角スペースの連続を半角スペースに変換(改行はそのまま)
    .trim();

  // 「a-zA-Z0-9」 => 「\uFF01-\uFF5D\u0021-\u007D」
  let normalizedName = halfName.replace(
    /[^\u0021-\u007E\uFF01-\uFF5E\u301C \u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF65-\uFF9F\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005\u30FC\u002D\u002E\u0027\u005F\uFF08\uFF09\u0028\u0029\u30FB･\u300C-\u3011\u3012\u3001\n]+/gu,
    ""
  );

  // 300 文字以上の場合は文字数を 300 文字までに制限
  return limitStringLength(normalizedName, 300);
}

// 🔸事業概要(clients)の正規化・標準化 -----------------------------------
// "business_content": // 事業概要
// "facility": // 設備

// normalizeContactNames と同じ
function normalizeSummary(input) {
  if (!input) return null;
  const halfText = input
    .replace(/[ａ-ｚＡ-Ｚ０-９]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0))
    .replace(/[ \t　]+/g, " ") // 半角スペース、タブ、全角スペースの連続を半角スペースに変換(改行はそのまま残す)
    .trim();

  // 制御文字と非表示文字の除去
  function sanitizeString(input) {
    const sanitized = input.replace(/[\x00-\x1F\x7F-\x9F]/g, "");
    return sanitized;
  }
  const sanitizedText = sanitizeString(halfText);

  // 不必要な特殊文字の除去(SQLインジェクション・XSS攻撃の防止)
  function cleanUpSymbols(input) {
    // SQLインジェクション攻撃に使われる記号の除去
    const cleanInput = input.replace(/;|--|\/\*|\*\//g, "");
    return cleanInput;
  }
  const cleanText = cleanUpSymbols(sanitizedText);

  // SQL危険な文字のエスケープ シングルクォートとダブルクォート => supabase.jsライブラリ側で処理が行われるため別途クライアントサイドでの処理は不要
  // const escapedText = cleanText
  //   .replace(/'/g, "''") // シングルクォートを二重にする
  //   .replace(/"/g, '""'); // ダブルクォートを二重にする

  // 文字数の制限 500 文字以上の場合は文字数を 500 文字までに制限
  const processedText = limitStringLength(cleanText, 500);

  return processedText;

  // 「a-zA-Z0-9」 => 「\uFF01-\uFF5D\u0021-\u007D」
  // let normalizedName = input.replace(
  //   /[^\u0021-\u007E\uFF01-\uFF5E\u301C \u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF65-\uFF9F\u4E00-\u9FFF\u3400-\u4DBF\u20000-\u2A6DF\u3005\u30FC\u002D\u002E\u0027\u005F\uFF08\uFF09\u0028\u0029\u30FB･\u300C-\u3011\u3012\u3001\n]+/gu,
  //   ""
  // );
  // return limitStringLength(normalizedName, 500);
}

// 🔸日付変換のヘルパー関数 -----------------------------------
function transformToDate(dateStr) {
  if (!dateStr) return null;
  dateStr = dateStr.trim(); // 基本的なトリミング
  const date = new Date(dateStr);
  return !isNaN(date.getTime()) ? date.toISOString().substring(0, 10) : null;
}

// -----------------------------------🔸カラムごとの前処理関数🔸-----------------------------------

// ----------------------------------- 🔸業界大分類🔸 -----------------------------------
// 業界大分類 小分類はユーザーに自由に使用してもらう ユーザー独自の分類分け

// 業界小分類は大分類が一致していたらインサートを許可する

/**
// セールスフォース用業界大分類
  const industryLargeSFSet = new Set([
    "金融", // 1
    "IT・メディア", //2
    "自動車", //3
    "エネルギー", //4
    "電機", //5
    "食品", //6
    "生活関連", //7
    "衣料・装飾", //8
    "小売", //9
    "建設", //10
    "不動産", //12
    "物流・運送", //13
    "娯楽・レジャー", //14
    "飲食", //15
    "その他サービス", //16
    "官公庁・公共団体", //17
  ]);
 */

// 🔸紐付け確定ボタンクリックと同時にstep3に移行して全ての行データの保存するカラムに対応するデータ型へと変換するINSERT前処理を実行を実行
// => 5MBを超える大きなファイルサイズはWorkerに依頼してバックグラウンドスレッドで行う
// 【変換が必要なカラム】
// 「-」は変換不要
/**
   * id: -
   * created_at: -
   * updated_at: -
   * created_company_id: -
   * created_user_id: -
   * created_department_id: -
   * name: TEXT
   * department_name: TEXT => 入力されていない場合は「.」でピリオドを付与してINSERT
   * main_fax: TEXT
   * zipcode: TEXT => 「-」ハイフンを削除して数字のみ抽出 7桁のみか確認 7桁でない場合には住所から算出
   * address: TEXT => 都道府県、市区町村が入っているかチェック 数字は全角から半角へ変換 ・地区コードテーブルのid(数字)と紐付け
   * department_contacts: TEXT => 数字とハイフンと+(プラス)番号のみ許可
   * industry_large: TEXT => 業界(大分類)セールスフォース用 => セールスフォースの項目のSetオブジェクトでチェック
   * industry_small: TEXT => 業界(小分類)セールスフォース用 => 大分類が含まれていれば、小分類をチェック
   * industry_type_id: INTEGER => 業種 テーブル(ipros)の業種一覧にマッチする文字列なら対応する番号を付与 Setオブジェクトで確認
   * product_category_large: TEXT => 製品分類(大分類) それぞれの製品分類に類する特定の文字列を用意して、マッチしていれば
   * 
   * 
🔸 各カラムごとの前処理

○必須カラム：
・会社名
・部署名
・住所
・代表TEL


・会社名 TEXT:
文字数制限(記号どうするか) とりあえず記号も許可

・部署名 TEXT:
入力なしの場合はデフォルトで「.」ピリオドを付与

・代表TEL TEXT:
TEL バリデーション 半角にフォーマット

・代表FAX TEXT:
TEL バリデーション 半角にフォーマット

・郵便番号 TEXT:
文字数制限 バリデーション 半角にフォーマット

・住所・所在地 TEXT:
(必須でなくても良いかも)
国コード・都道府県・市区町村コードを抽出して当てはまれば割り当てる
○最初にトリム、空白文字(\s)を全て最初に取り除いた後、都道府県のSetオブジェクトに含まれていて、その該当部分が住所の先頭に来ていれば、国コードを日本、都道府県コードを該当の都道府県として登録、都道府県を取り除く
○取り除いた住所に該当する市区町村オプションに該当する市区町村が含まれていれば該当のコードを付与して取り除く
○

・ホームページURL
URLのチェック

・Email
メールバリデーションチェック

・業界・業種(industry_type_id)
オプションの業種ごとにキーワードを抜き出しSetオブジェクトを作成して、各業種ごとにキーワードを含んでいればid(number)をセット
テーブル(ipros)の業種一覧にマッチする文字列なら対応する番号を付与 Setオブジェクトで確認

・業界(大分類) TEXT
・業界(小分類) TEXT
文字数制限 30文字以内

・決算月
・予算申請月1
・予算申請月2
csvパース後はstringなのでparseIntで整数に変換してからmonthSetでhasでチェック

・資本金
stringなので、millionメソッドで万円単位に整形後にnumberに変換

・設立
文字数制限 11文字以内(1992年12月04日 or 1992/12/04)

・法人番号 住所が日本の場合は13桁かどうかをチェック

・取引先(納入先)
・仕入れ先
・設備
・事業拠点
・海外拠点
・グループ会社
特になし 文字数300文字以内 切り捨て

・事業概要
・連絡先
特になし 文字数500文字以内 切り捨て

・代表者名 TEXT
・会長
・副社長
特になし 文字数50文字以内 切り捨て

・専務取締役
・常務取締役
特になし 文字数100文字以内 切り捨て

・取締役
・役員
・監査役
・部長
・担当者
特になし 文字数300文字以内 切り捨て

   */

// -------------------- 🔸client_companiesテーブルのフィールドに応じた各カラムのデータ前処理を実行🔸 --------------------
function transformData(csvValue, dbField, detailsTransform, csvHeader) {
  // ここで型変換やデータクリーニングを行う
  // 例: 日付の変換、数値の変換、文字列のトリム等

  let processedValue = csvValue === "" ? null : csvValue.trim(); // 基本的なトリミング;

  switch (dbField) {
    case "corporate_name": // 法人名
      // if (!processedValue) throw new Error("会社名が空文字のためこの行はスルー");
      // if (!processedValue) throw new Error("[ERROR]|corporate_name|法人名未入力");
      if (!processedValue) throw new Error(`[ERROR]|${csvHeader}|法人名未入力`);
      // 法人名の前処理: 特定の不適切な文字を削除する例
      processedValue = normalizeCompanyName(processedValue, csvHeader, false);
      break;

    case "branch_name": // 拠点名
      processedValue = normalizeBranchName(processedValue);
      break;

    case "department_name": // 部署名
      processedValue = normalizeDepartmentName(processedValue);
      break;

    case "main_phone_number": // 代表TEL
      processedValue = normalizePhoneNumber(processedValue);
      break;

    case "main_fax": // 代表FAX
      processedValue = normalizeFax(processedValue);
      break;

    case "zipcode": // 郵便番号
      processedValue = normalizePostalCode(processedValue);
      break;

    case "address": // 住所
      // 引数が別途必要のため別ルートで処理;
      // processedValue = normalizeAddress(processedValue);
      break;

    case "representative_name": // 代表者名
      processedValue = normalizeRepresentativeName(processedValue);
      break;

    case "website_url": // ホームページURL・WebサイトURL
      processedValue = normalizeWebSiteURL(processedValue);
      break;

    case "email": // Email
      processedValue = normalizeEmail(processedValue, csvHeader);
      break;

    case "industry_type_id": // 業種
      processedValue = normalizeIndustryType(processedValue);
      break;

    case "industry_large": // 業界(大分類)
      processedValue = normalizeIndustryLarge(processedValue);
      break;

    case "industry_small": // 業界(小分類)
      processedValue = normalizeIndustrySmall(processedValue);
      break;

    case "number_of_employees": // 従業員数
      processedValue = normalizeNumberOfEmployees(processedValue);
      break;

    case "fiscal_end_month": // 決算月
    case "budget_request_month1": // 予算申請月
    case "budget_request_month2": // 予算申請月
      processedValue = normalizeMonth(processedValue);
      break;

    case "capital": // 資本金
      processedValue = normalizeCapital(processedValue, detailsTransform.capital);
      break;

    case "established_in": // 設立
      processedValue = normalizeDate(processedValue);
      break;

    case "corporate_number": // 法人番号
      processedValue = normalizeCorporateNumber(processedValue);
      break;

    case "chairperson": // 会長
    case "senior_vice_president": // 副社長
    case "senior_managing_director": // 専務取締役
    case "managing_director": // 常務取締役
    case "director": // 取締役
    case "board_member": // 役員
    case "auditor": // 監査役
    case "manager": // 部長
    case "member": // 担当者
      // 織田信長（取締役会長）・伊達政宗(専務取締役・COO)、佐藤 健(CSO)など複数記述の可能性があるため余裕を持たせる
      processedValue = normalizeContactNames(processedValue);
      break;

    case "clients": // 取引先(納入先)
    case "supplier": // 仕入先
    case "business_sites": // 事業拠点
    case "overseas_bases": // 海外拠点
    case "group_company": // グループ会社
    case "department_contacts": // 連絡先(部署別)
      processedValue = normalizeClients(processedValue);
      break;

    case "business_content": // 事業概要
    case "facility": // 設備
      processedValue = normalizeSummary(processedValue);
      break;

    default:
      // その他のカラムに対してのデフォルトの処理
      break;
  }

  return processedValue; // 変換後の値を返す
}
// -------------------- 🔸client_companiesテーブルのフィールドに応じた各カラムのデータ前処理を実行🔸 --------------------

// ----------------------------------- 🌠Web Worker Script🌠-----------------------------------
self.onmessage = async function (e) {
  try {
    console.log("Worker: Message received from main thread", e);

    // postMessage が呼び出されたときにメッセージを送ったウィンドウのオリジンが正しいことをチェック
    // publicフォルダ内のスクリプトでは、環境変数を使用できないためオリジンをハードコーディング
    const clientUrl = "http://localhost:3000";
    if (e.data.origin !== clientUrl)
      return console.log(`Worker: ❌オリジンチェックに失敗 リターン 受け取ったオリジン: ${e.data.origin}`);

    const { parsedData, columnMap, groupedTownsByRegionCity, detailsTransform, currentChunkCount, chunkSize } = e.data;
    console.log(
      `Worker: detailsTransform: `,
      detailsTransform,
      `currentChunkCount: ${currentChunkCount}, chunkSize: ${chunkSize}`
    );

    // DBフィールド名からCSVカラムヘッダー名へのMapを生成
    const dbFieldToCsvHeaderMap = new Map(
      Array.from(columnMap.entries()).map(([csvHeader, dbField]) => [dbField, csvHeader])
    );

    // 会社リストが取得できなかった場合はエラーを投げる
    if (!parsedData.length || !columnMap) {
      throw new Error("❌データが見つかりません");
    }

    // 各行で前処理の段階で除外された行の理由を格納して最終的にユーザーに除外した理由を明示するための変数
    // エラーメッセージをカラムとエラータイプごとに格納  rowsはCSV全体の何行目がエラーとなったか
    // throw new Error(`[ERROR]|address|住所未入力`) => プレフィックス | カラム名 | エラー理由
    // [ERROR]のプレフィックスでシステムログと行エラーメッセージを区別する
    // 例) { CSVカラムヘッダー名: { type: '住所未入力', rows: [1, 3, 9] } }
    // => 実装: { CSVカラムヘッダー名: { エラー理由: [1, 3, 9] } } // [...]の要素はエラーが発生した〜行目の行数
    const errorMessages = {};

    // ----------------------------------- 1チャンクのデータ処理関数 -----------------------------------
    function processChunk(chunk, chunkCount) {
      // チャンク内で処理済みのRowsを保持
      const processedRowsChunk = [];

      // 1行ずつ取り出して必要なカラムのみ前処理してインサート用配列データを生成
      // for (const row of chunk) {
      for (const [index, row] of chunk.entries()) {
        // for...ofでindexを取得するためにentries()を使用
        // 行の前処理
        const processedRow = {}; // 最終的にインサートする処理後の行
        const processCountInChunk = index + 1; // チャンク内の行番号
        const rowCountInAllData = chunkCount * chunkSize + processCountInChunk;

        try {
          let townsByCities = [];
          let countryId = null;
          let regionId = null;
          let cityId = null;
          let townId = null; // 郵便番号とaddress処理で得た町域リストを組み合わせてtown_idを取得
          let normalizedTownName = null;
          let streetAddress = null;
          let postalCode = null;

          // ----------------------------------- カラムごとの前処理 -----------------------------------
          // columnMap: CSVカラムヘッダー名 to DBフィールド名
          Array.from(columnMap.entries()).forEach(([csvHeader, dbField]) => {
            // 住所カラム
            if (dbField === "address") {
              // if (!row[csvHeader]) throw new Error(`[ERROR]|address|住所未入力(入力必須)`);
              if (!row[csvHeader]) throw new Error(`[ERROR]|${csvHeader}|住所未入力(入力必須)`);
              // addressの場合は、address以外に町域リストを取り出す
              // 住所の前処理: 文字の正規化、例えば全角を半角に変換
              const responseAddress = normalizeAddress(row[csvHeader], csvHeader, groupedTownsByRegionCity);

              if (responseAddress === null) throw new Error(`[ERROR]|${csvHeader}|無効な住所`);

              const {
                address,
                prefecture,
                city,
                street_address,
                country_id,
                region_id,
                city_id,
                normalized_town_name,
                grouped_towns_by_cities,
              } = responseAddress;
              townsByCities = grouped_towns_by_cities ?? [];
              countryId = country_id;
              regionId = region_id;
              cityId = city_id;
              normalizedTownName = normalized_town_name;
              streetAddress = street_address;

              processedRow["address"] = address;
            }

            // 通常のカラム
            else {
              processedRow[dbField] = transformData(row[csvHeader], dbField, detailsTransform, csvHeader);
            }
          });
          // ----------------------------------- カラムごとの前処理 -----------------------------------ここまで

          // ----------------------------------- town_idの取得 -----------------------------------
          // 郵便番号と正規化した町域名の2つで抽出するが、同じ組み合わせがある場合は後で手動で修正する
          if (0 < townsByCities.length && !!normalizedTownName) {
            // dbFieldにzipcodeカラムとaddressカラムが存在する場合は、town_idを取得する
            const dbFieldsArray = Array.from(columnMap.values());
            if (
              dbFieldsArray.includes("address") &&
              dbFieldsArray.includes("zipcode") &&
              Object.hasOwn(processedRow, "zipcode") &&
              !!processedRow["zipcode"]
            ) {
              // 町域データから取得した郵便番号とnormalized_nameと一致する行を取得
              const gotTown = townsByCities.find(
                (obj) => obj.postal_code === processedRow["zipcode"] && obj.normalized_name === normalizedTownName
              );
              if (!!gotTown) {
                townId = gotTown.town_id;
              }
            }
          }
          // ----------------------------------- town_idの取得 -----------------------------------ここまで

          // ----------------------------------- 🔸処理後の行に不足分のカラムを追加🔸 -----------------------------------
          // ○必須カラム：
          // ・会社名(name) => 選択・前処理済みの法人名と拠点名を結合
          // ・住所 => 選択済み
          // ・部署名(department_name) => 選択されていない場合はピリオドをセット
          // ・代表TEL(main_phone_number) => なくてもOK(メールやSNSのみでの営業にも対応するため)

          // columnMap: CSVカラムヘッダー名 to DBフィールド名
          const selectedDBFieldNamesArray = Array.from(columnMap.values());

          // ○【会社名(name)】
          if (!Object.hasOwn(processedRow, "corporate_name")) {
            const csvHeaderCN = dbFieldToCsvHeaderMap.get("corporate_name");
            throw new Error(`[ERROR]|${csvHeaderCN ?? "-"}|無効な法人名`);
          }
          const _branch_name =
            selectedDBFieldNamesArray.includes("branch_name") && Object.hasOwn(processedRow, "branch_name")
              ? processedRow["branch_name"]
              : "";
          const name = (processedRow["corporate_name"] + " " + _branch_name).trim();

          let addColumns = {
            name: name, // 会社名(法人名 拠点名)
            country_id: countryId ?? null, // 国コード
            region_id: regionId ?? null, // 都道府県コード
            city_id: cityId ?? null, // 市区町村コード
            town_id: townId ?? null, // 町域コード
            street_address: streetAddress || null, // 町域名+丁目+番地(番)+号+建物名
          };

          // ○【部署名(department_name)】
          // カラムマップのvalue側のDBフィールド名の配列の中にdepartment_nameが存在しない場合はピリオドをセット
          if (!selectedDBFieldNamesArray.includes("department_name")) {
            addColumns = { ...addColumns, department_name: "." };
          }

          // ○【規模(ランク)(number_of_employees_class)】
          // number_of_employeesカラムが存在し、数字なら範囲でランク分け
          if (
            selectedDBFieldNamesArray.includes("number_of_employees") &&
            Object.hasOwn(processedRow, "number_of_employees")
          ) {
            const EmployeesNum = processedRow["number_of_employees"];
            if (EmployeesNum !== null && EmployeesNum !== undefined && typeof EmployeesNum === "number") {
              let numberOfEmployeeClass = null;
              if (0 < EmployeesNum && EmployeesNum < 50) numberOfEmployeeClass = "G";
              if (50 <= EmployeesNum && EmployeesNum < 100) numberOfEmployeeClass = "F";
              if (100 <= EmployeesNum && EmployeesNum < 200) numberOfEmployeeClass = "E";
              if (200 <= EmployeesNum && EmployeesNum < 300) numberOfEmployeeClass = "D";
              if (300 <= EmployeesNum && EmployeesNum < 500) numberOfEmployeeClass = "C";
              if (500 <= EmployeesNum && EmployeesNum < 1000) numberOfEmployeeClass = "B";
              if (1000 <= EmployeesNum) numberOfEmployeeClass = "A";
              addColumns = { ...addColumns, number_of_employees_class: numberOfEmployeeClass };
            }
          }

          const responseRow = { ...processedRow, ...addColumns };
          // ----------------------------------- 🔸処理後の行に不足分のカラムを追加🔸 -----------------------------------ここまで

          // 🔸イテレーションの結果として前処理完了後の行を処理完了済みチャンクにpush
          // processedData.push(responseRow);
          processedRowsChunk.push(responseRow);
          // console.log(
          //   `Worker: チャンクデータ処理完了`,
          //   responseRow,
          //   ` チャンク内での処理完了済み行数: ${processedRowsChunk.length}`
          // );
        } catch (error) {
          // エラーが発生した場合は、その行は無効としてnullを返し最終的にfilter()で無効な行は取り除きインサート対象から除外する
          // console.log("Worker: transformData関数エラー 無効な行のためスルー", error);
          // 🔸イテレーションの結果として無効な行はpushせずスルー

          // 除外された行のエラーメッセージ `[ERROR]|csvHeader|無効な法人名`
          if (error.message?.startsWith("[ERROR]")) {
            const [, csvHeader, errorMessage] = error.message.split("|");
            if (!Object.hasOwn(errorMessages, csvHeader)) {
              errorMessages[csvHeader] = {};
            }
            if (!Object.hasOwn(errorMessages[csvHeader], errorMessage)) {
              errorMessages[csvHeader][errorMessage] = [];
            }
            // { Csvカラムヘッダー名: { エラー理由: [ 1, 3,...などの行番号 ] } }
            errorMessages[csvHeader][errorMessage].push(rowCountInAllData);
          } else {
            // システムエラーの処理
            console.error("予期せぬエラー: ", error);
          }
        }
      }

      // 前処理完了済みのチャンクをリターン
      return processedRowsChunk;
    }
    // ----------------------------------- 1チャンクのデータ処理関数 -----------------------------------ここまで

    // ----------------------------------- 🔸分割したチャンクごとにデータ処理 -----------------------------------
    // メインスレッド側でチャンクを分割して、1チャンクのみWorkerに送信
    const processedData = processChunk(parsedData, currentChunkCount);
    // ----------------------------------- 🔸分割したチャンクごとにデータ処理 -----------------------------------ここまで

    // 🔸アップロードされたCSVデータの全ての行の前処理完了 => クライアントサイドに処理済みデータを返すとともに完了を通知
    const responseMessageData = { type: "complete", processedData: processedData, errorMessages: errorMessages };
    console.log("✅Worker: Message posted to main thread. responseMessageData: ", responseMessageData);
    self.postMessage(responseMessageData);
  } catch (error) {
    console.log("❌Worker: エラー", error.message);
    self.postMessage({ type: "error", error: `Worker側でエラーが発生しました。エラー: ${error.message}` });
  }
};

// 🔸onerrorイベントリスナー
// self.onerrorはWorker自体内で、自身が発生させたエラーを処理するのに適しています。
// Worker内でself.onerror()を使用すると、Worker内部で発生したエラーをWorker自身で捕捉し、特定のエラーログを記録したり、エラーに応じて特定の回復処理を行ったりすることができます。これはWorkerが自己完結型でエラー処理を行いたい場合に有効です。
self.onerror = function (event) {
  // メインスレッドへの伝搬を阻止 => メインスレッドとWorker側で同時にonerrorイベントが実行されないようにするため
  event.preventDefault();

  // エラー詳細を処理
  console.error("❌Worker onerror: ", event.message);

  // メインスレッドにエラー情報を送信
  self.postMessage({
    type: `error`,
    error: event,
  });
};
