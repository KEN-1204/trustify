// ------------------------------ üî∏GridTableÁî®üî∏ ------------------------------
// queryKey„Å´„Çª„ÉÉ„Éà„Åô„ÇãÈöõ„Å´„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÊñáÂ≠óÂàó„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞„Å®Â§âÊèõ„ÅåÂøÖË¶Å„Å™„Ç´„É©„É†„ÅÆSet„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
// (ÁØÑÂõ≤Ê§úÁ¥¢„Åßparams„Å´{min: ~, max: ~}„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Çª„ÉÉ„Éà„Åï„Çå„Çã„Åü„ÇÅ)

import { convertToMillions } from "../convertToMillions";
import { convertToYen } from "../convertToYen";
import { isPlainObject } from "../isObjectPlain";
import { isValidNumber } from "../isValidNumber";
import { normalizeDiscountRate } from "../normalizeDiscountRate";
import { toHalfWidthAndRemoveSpace } from "../toHalfWidthAndRemoveSpace";

// ÁØÑÂõ≤Ê§úÁ¥¢„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Ç´„É©„É†
// üîπ‰ºöÁ§æ GridTableAll
export const searchObjectColumnsSetCompany = new Set(["capital", "number_of_employees"]);
// üîπÊãÖÂΩìËÄÖ ContactGridTableAll
export const searchObjectColumnsSetContact = new Set(["capital", "number_of_employees", "approval_amount"]);
// üîπÊ¥ªÂãï ActivityGridTableAll
export const searchObjectColumnsSetActivity = new Set([
  "capital",
  "number_of_employees",
  "approval_amount",
  // Ê¥ªÂãï
  "scheduled_follow_up_date",
  "activity_date",
]);
// üîπÈù¢Ë´á MeetingGridTableAll
export const searchObjectColumnsSetMeeting = new Set([
  "capital",
  "number_of_employees",
  "approval_amount",
  // Èù¢Ë´á
  "planned_date", // Èù¢Ë´áÊó•(‰∫àÂÆö)
  "planned_start_time", // Èù¢Ë´áÈñãÂßã(‰∫àÂÆö)
  "planned_duration", // Èù¢Ë´áÊôÇÈñì(‰∫àÂÆö)
  "result_date", // Èù¢Ë´áÊó•(ÁµêÊûú)
  "result_start_time", // Èù¢Ë´áÈñãÂßã(ÁµêÊûú)
  "result_end_time", // Èù¢Ë´áÁµÇ‰∫Ü(ÁµêÊûú)
  "result_duration", // Èù¢Ë´áÊôÇÈñì(ÁµêÊûú)
  "result_number_of_meeting_participants", // ÂêåÂ∏≠‰∫∫Êï∞(ÁµêÊûú)
]);
// üîπÊ°à‰ª∂ PropertyGridTableAll
export const searchObjectColumnsSetProperty = new Set([
  "capital",
  "number_of_employees",
  "approval_amount",
  // Ê°à‰ª∂
  "product_sales", // ‰∫àÂÆöÂè∞Êï∞
  "expected_sales_price", // ‰∫àÂÆöÂ£≤‰∏äÂêàË®à
  "unit_sales", // Â£≤‰∏äÂè∞Êï∞
  "sales_price", // Â£≤‰∏äÂêàË®à
  "discounted_price", // ÂÄ§Âºï‰æ°Ê†º
  "discount_rate", // ÂÄ§ÂºïÁéá
  "property_date", // Ê°à‰ª∂Áô∫ÁîüÊó•
  "expansion_date", // Â±ïÈñãÊó•
  "sales_date", // Â£≤‰∏äÊó•
  "expected_order_date", // Áç≤Âæó‰∫àÂÆöÊó•
  "subscription_start_date", // „Çµ„Éñ„Çπ„ÇØÈñãÂßãÊó•
  "subscription_canceled_at", // „Çµ„Éñ„Çπ„ÇØÁµÇ‰∫ÜÊó•
  "lease_expiration_date", // „É™„Éº„ÇπÂÆå‰∫Ü‰∫àÂÆöÊó•
  "competitor_appearance_date", // Á´∂ÂêàÁô∫ÁîüÊó•
]);

export const convertObjToText = (column: string, obj: Object | null) => {
  if (!obj) return `${column}:null`;

  if (obj === "ISNOTNULL" || obj === "ISNULL") {
    return `${column}:${obj}`;
  }

  let objText = ``;
  Object.entries(obj).forEach(([key, value], index) => {
    objText += `${key}:${value === null ? `null` : `${value}`}`;
  });
  return `${column}:${objText}`;
};

export const convertObjToTextNest = (column: string, obj: Object | null) => {
  if (!obj) return `${column}:null`;

  if (obj === "ISNOTNULL" || obj === "ISNULL") {
    return `${column}:${obj}`;
  }

  let objText = ``;
  Object.entries(obj).forEach(([key, value], index) => {
    if (key === "time_value") {
      if (isPlainObject(value)) {
        const { min, max } = value as { min: string | null; max: string | null };
        objText += `${index === 1 ? `-` : ``}${key}:${min === null ? `null` : `${min}`}-${
          max === null ? `null` : `${max}`
        }`;
        return;
      }
    }
    objText += `${index === 1 ? `-` : ``}${key}:${value === null ? `null` : `${value}`}`;
  });
  return `${column}:${objText}`;
};
// ------------------------------ üî∏GridTableÁî®üî∏ ------------------------------ „Åì„Åì„Åæ„Åß

// ------------------------------ üî∏„Çµ„Éº„ÉÅ„É¢„Éº„ÉâÁî®üî∏ ------------------------------
// ÁØÑÂõ≤Ê§úÁ¥¢Áî® ‰∏äÈôê„ÄÅ‰∏ãÈôêÂÖ®„Å¶ÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åã„Å©„ÅÜ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
export const isEmptyInputRange = (
  input:
    | {
        min: string;
        max: string;
      }
    | {
        min: Date | null;
        max: Date | null;
      }
    | {
        min: number | null;
        max: number | null;
      }
    | "is null"
    | "is not null",
  type: "" | "date" | "number" = ""
) => {
  if (type === "") return input !== "is null" && input !== "is not null" && input.min === "" && input.max === "";
  if (type === "date" || type === "number")
    return input !== "is null" && input !== "is not null" && input.min === null && input.max === null;
};

export const isCopyableInputRange = (
  input:
    | {
        min: string;
        max: string;
      }
    | {
        min: Date | null;
        max: Date | null;
      }
    | {
        min: number | null;
        max: number | null;
      }
    | "is null"
    | "is not null",
  type: "" | "date" | "number" = ""
) => {
  if (type === "")
    return (
      input !== "is null" &&
      input !== "is not null" &&
      ((input.min !== "" && input.max === "") || (input.min === "" && input.max !== ""))
    );
  if (type === "date" || type === "number")
    return (
      input !== "is null" &&
      input !== "is not null" &&
      ((input.min !== null && input.max === null) || (input.min === null && input.max !== null))
    );
};

export const copyInputRange = (
  dispatchRange:
    | React.Dispatch<
        React.SetStateAction<
          | {
              min: string;
              max: string;
            }
          | "is null"
          | "is not null"
        >
      >
    | React.Dispatch<
        React.SetStateAction<
          | {
              min: Date | null;
              max: Date | null;
            }
          | "is null"
          | "is not null"
        >
      >
    | React.Dispatch<
        React.SetStateAction<
          | {
              min: number | null;
              max: number | null;
            }
          | "is null"
          | "is not null"
        >
      >,
  type: "" | "date" | "number" = ""
) => {
  dispatchRange((prev: any) => {
    if (prev === "is null" || prev === "is not null") return prev;
    const { min, max } = prev;

    if (type === "") {
      if (min === "") {
        return { min: max as string, max: max as string };
      } else {
        return { min: min as string, max: min as string };
      }
    } else if (type === "date") {
      if (min === null) {
        return { min: max as Date, max: max as Date };
      } else {
        return { min: min as Date, max: min as Date };
      }
    } else {
      if (min === null) {
        return { min: max as number, max: max as number };
      } else {
        return { min: min as number, max: min as number };
      }
    }
  });
};

// ----------------------------------- üî∏„Çµ„Éñ„Éü„ÉÉ„ÉàÂâçÂá¶ÁêÜüî∏ -----------------------------------

// üî∏TEXTÂûã‰ª•Â§ñ„ÇÇIS NULL, IS NOT NULL„ÅÆÊù°‰ª∂„ÇíËøΩÂä†
export const adjustFieldValueInteger = (value: string | number | null): number | "ISNULL" | "ISNOTNULL" | null => {
  if (value === "is null") return "ISNULL"; // ISNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
  if (value === "is not null") return "ISNOTNULL"; // ISNOTNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
  if (typeof value === "string") {
    if (isValidNumber(value) && !isNaN(parseInt(value!, 10))) {
      return parseInt(value!, 10);
    } else {
      return null;
    }
  }
  // numberÂûã
  else {
    if (value === null) return null; // ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø
    return value;
  }
};

// üî∏DateÂûã
export const adjustFieldValueDate = (value: Date | string | null): string | null => {
  if (value instanceof Date) return value.toISOString();
  // "is null"„Åã"is not null"„ÅÆÊñáÂ≠óÂàó„ÅØÂ§âÊèõ
  if (value === "is null") return "ISNULL"; // ISNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
  if (value === "is not null") return "ISNOTNULL"; // ISNOTNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
  return null;
  // if (typeof inputScheduledFollowUpDate === "string") return adjustFieldValue(inputScheduledFollowUpDate);
};

// üî∏PriceÈñ¢ÈÄ£ NUMERIC "6000000" "4.08" „Å´Â§âÊèõ
export const adjustFieldValuePrice = (value: string | null): string | "ISNULL" | "ISNOTNULL" | null => {
  if (value === "is null") return "ISNULL"; // ISNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
  if (value === "is not null") return "ISNOTNULL"; // ISNOTNULL„Éë„É©„É°„Éº„Çø„ÇíÈÄÅ‰ø°
  if (typeof value === "string") {
    // ÂÄ§ÂºïÁéá„Å™„Å©„ÅÆÂ∞èÊï∞ÁÇπ„ÇÇË®±ÂèØ„Åô„Çã„Åü„ÇÅ„Å´parseFloat„Åß„ÉÅ„Çß„ÉÉ„ÇØ
    if (isValidNumber(value)) {
      return value;
    } else {
      return null;
    }
  }
  return null;
};

// üî∏ÁØÑÂõ≤Ê§úÁ¥¢Áî®„ÅÆÂ§âÊèõ Êï∞ÂÄ§Âûã(Numeric Type) Ë≥áÊú¨Èáë„ÄÅÂæìÊ•≠Âì°Êï∞„ÄÅ‰æ°Ê†º„Å™„Å© ‰∏ãÈôêÂÄ§„Äå~‰ª•‰∏ä„Äç, ‰∏äÈôêÂÄ§ „Äå~‰ª•‰∏ã„Äç
export const adjustFieldRangeNumeric = (
  value: { min: string; max: string } | "is null" | "is not null",
  formatType: "" | "integer" | "millions" = ""
): { min: number | null; max: number | null } | "ISNULL" | "ISNOTNULL" => {
  if (value === "is null") return "ISNULL";
  if (value === "is not null") return "ISNOTNULL";
  let { min, max } = value;

  // Ë≥áÊú¨Èáë„ÄÅÊ±∫Ë£ÅÈáëÈ°ç(‰∏áÂÜÜÂçò‰Ωç)ÂâçÂá¶ÁêÜ
  if (formatType === "millions") {
    if (!!min && !/^\d+(\.\d+)?$|^\d{1,3}(,\d{3})*$/.test(min)) {
      const convertedPrice = convertToMillions(min.trim());
      if (convertedPrice !== null && !isNaN(convertedPrice)) {
        min = convertedPrice.toLocaleString();
      } else {
        min = "";
      }
    }
    if (!!max && !/^\d+(\.\d+)?$|^\d{1,3}(,\d{3})*$/.test(max)) {
      const convertedPrice = convertToMillions(max.trim());
      if (convertedPrice !== null && !isNaN(convertedPrice)) {
        max = convertedPrice.toLocaleString();
      } else {
        max = "";
      }
    }
  }

  const halfMin =
    formatType === "millions"
      ? toHalfWidthAndRemoveSpace(min).trim().replace(/,/g, "")
      : toHalfWidthAndRemoveSpace(min).trim();
  const halfMax =
    formatType === "millions"
      ? toHalfWidthAndRemoveSpace(max).trim().replace(/,/g, "")
      : toHalfWidthAndRemoveSpace(max).trim();

  const minValid = isValidNumber(halfMin);
  const maxValid = isValidNumber(halfMax);

  const minNum = formatType === "integer" ? parseInt(halfMin, 10) : Number(halfMin!);
  const maxNum = formatType === "integer" ? parseInt(halfMax, 10) : Number(halfMax!);

  console.log("value", value, min, halfMin, minNum, minValid, max, halfMax, maxNum, maxValid);

  if (minValid && maxValid) {
    if (isNaN(minNum) || isNaN(maxNum)) throw new Error(`Êï∞ÂÄ§„ÅåÈÅ©Âàá„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÈÅ©Âàá„Å™Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
    if (minNum! <= maxNum!) {
      return { min: minNum, max: maxNum };
    } else {
      const errorMsg = "Êï∞ÂÄ§„ÅÆ‰∏ãÈôêÂÄ§„Åå‰∏äÈôêÂÄ§„Çí‰∏äÂõû„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰∏äÈôêÂÄ§„Çí‰∏ãÈôêÂÄ§„Å®Âêå„Åò„Åã„Åù„Çå‰ª•‰∏ä„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
      throw new Error(errorMsg);
    }
  } else if (minValid && !maxValid) {
    if (isNaN(minNum)) throw new Error(`Êï∞ÂÄ§„ÅåÈÅ©Âàá„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÈÅ©Âàá„Å™Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
    return { min: minNum, max: null };
  } else if (!minValid && maxValid) {
    if (isNaN(maxNum)) throw new Error(`Êï∞ÂÄ§„ÅåÈÅ©Âàá„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÈÅ©Âàá„Å™Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
    return { min: null, max: maxNum };
  }

  return { min: null, max: null };
};

// üî∏ÁØÑÂõ≤Ê§úÁ¥¢Áî®„ÅÆÂ§âÊèõ Êï∞ÂÄ§Âûã(INTEGER Type) ÊôÇÈñì„ÄÅÊï∞Èáè
export const adjustFieldRangeInteger = (
  value: { min: number | null; max: number | null } | "is null" | "is not null"
): { min: number | null; max: number | null } | "ISNULL" | "ISNOTNULL" => {
  if (value === "is null") return "ISNULL";
  if (value === "is not null") return "ISNOTNULL";
  const { min, max } = value;

  const minValid = min !== null && Number.isInteger(min);
  const maxValid = max !== null && Number.isInteger(max);

  if (minValid && maxValid) {
    if (min! <= max!) {
      return { min: min, max: max };
    } else {
      const errorMsg = "Êï∞ÂÄ§„ÅÆ‰∏ãÈôêÂÄ§„Åå‰∏äÈôêÂÄ§„Çí‰∏äÂõû„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰∏äÈôêÂÄ§„Çí‰∏ãÈôêÂÄ§„Å®Âêå„Åò„Åã„Åù„Çå‰ª•‰∏ä„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
      throw new Error(errorMsg);
    }
  } else if (minValid && !maxValid) {
    return { min: min, max: null };
  } else if (!minValid && maxValid) {
    return { min: null, max: max };
  }

  return { min: null, max: null };
};

// üî∏ÁØÑÂõ≤Ê§úÁ¥¢Áî®„ÅÆÂ§âÊèõ TIMESTAMPTZÂûã(Date„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà ISOÊñáÂ≠óÂàó) Ê¥ªÂãïÊó•„ÄÅÈù¢Ë´áÊó•
export const adjustFieldRangeTIMESTAMPTZ = (
  value: { min: Date | null; max: Date | null } | "is null" | "is not null"
): { min: string | null; max: string | null } | "ISNULL" | "ISNOTNULL" => {
  if (value === "is null") return "ISNULL";
  if (value === "is not null") return "ISNOTNULL";
  const { min, max } = value;

  if (min instanceof Date && max instanceof Date) {
    if (min.getTime() <= max.getTime()) {
      return {
        min: min.toISOString(),
        max: max.toISOString(),
      };
    } else {
      const errorMsg = "Êó•‰ªò„ÅÆ‰∏ãÈôêÂÄ§„Åå‰∏äÈôêÂÄ§„Çí‰∏äÂõû„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰∏äÈôêÂÄ§„Çí‰∏ãÈôêÂÄ§„Å®Âêå„Åò„Åã„Åù„Çå‰ª•‰∏ä„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
      throw new Error(errorMsg);
    }
  } else if (min instanceof Date && max === null) {
    return {
      min: min.toISOString(),
      max: null,
    };
  } else if (min === null && max instanceof Date) {
    return {
      min: null,
      max: max.toISOString(),
    };
  }

  return { min: null, max: null };
};

// üî∏ÁØÑÂõ≤Ê§úÁ¥¢Áî®„ÅÆÂ§âÊèõ Êï∞ÂÄ§Âûã(Numeric Type) Ë≥áÊú¨Èáë„ÄÅÂæìÊ•≠Âì°Êï∞„ÄÅ‰æ°Ê†º„Å™„Å© ‰∏ãÈôêÂÄ§„Äå~‰ª•‰∏ä„Äç, ‰∏äÈôêÂÄ§ „Äå~‰ª•‰∏ã„Äç
export const adjustFieldRangePrice = (
  value: { min: string; max: string } | "is null" | "is not null",
  formatType: "" | "integer" | "rate" = ""
): { min: string | null; max: string | null } | "ISNULL" | "ISNOTNULL" => {
  if (value === "is null") return "ISNULL";
  if (value === "is not null") return "ISNOTNULL";
  let { min, max } = value;

  // /^\d+(\.\d+)?$|^\d{1,3}(,\d{3})*$/
  /**
       ^\d+(\.\d+)?$ : „Åì„Çå„ÅØ„Äå10.2„Äç„ÅÆ„Çà„ÅÜ„Å™„Éë„Çø„Éº„É≥„Å´„Éû„ÉÉ„ÉÅ„Åó„Åæ„Åô„ÄÇ„Åì„Åì„Åß \d+ „ÅØ1Âõû‰ª•‰∏ä„ÅÆÊï∞Â≠ó„ÇíË°®„Åó„ÄÅ(\.\d+)? „ÅØ„Éâ„ÉÉ„Éà„Å®„Åù„Çå„Å´Á∂ö„Åè1Âõû‰ª•‰∏ä„ÅÆÊï∞Â≠ó„Åå0Âõû„Åæ„Åü„ÅØ1ÂõûÁèæ„Çå„Çã„Åì„Å®„ÇíË®±ÂèØ„Åó„Åæ„Åô„ÄÇ
        | : „Äå„Åæ„Åü„ÅØ„Äç„ÇíÊÑèÂë≥„Åó„Åæ„Åô„ÄÇ
        ^\d{1,3}(,\d{3})*$ : „Åì„Çå„ÅØ„Äå1,000,000„Äç„ÅÆ„Çà„ÅÜ„Å™„Ç´„É≥„Éû„ÅßÂå∫Âàá„Çâ„Çå„ÅüÊï∞Â≠ó„ÅÆ„Éë„Çø„Éº„É≥„Å´„Éû„ÉÉ„ÉÅ„Åó„Åæ„Åô„ÄÇ„Åì„Åì„Åß \d{1,3} „ÅØ1„Åã„Çâ3Ê°Å„ÅÆÊï∞Â≠ó„ÇíË°®„Åó„ÄÅ(,\d{3})* „ÅØ„Ç´„É≥„Éû„Å®„Åù„Çå„Å´Á∂ö„Åè„Å°„Çá„ÅÜ„Å©3Ê°Å„ÅÆÊï∞Â≠ó„Åå0Âõû‰ª•‰∏äÁπ∞„ÇäËøî„Åï„Çå„Çã„Åì„Å®„ÇíË®±ÂèØ„Åó„Åæ„Åô„ÄÇ
       */

  // ÂÄ§ÂºïÁéá„É´„Éº„Éà „Äå.3„Äç„Åß„Åù„ÅÆ„Åæ„Åæ„Ç®„É≥„Çø„Éº„ÅßÈÄÅ‰ø°„Åï„Çå„ÅüÈöõ„Å´„Äå0.3%„Äç„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åó„Å¶ÂæåÁ∂ö„Å´ÈÄÅ„Çã
  // „Éª„Äå10.2„Äç„ÅÆÂÖàÈ†≠„ÅåÊï∞Â≠ó„ÄÅ„Éâ„ÉÉ„Éà„Å®ÂæåÁ∂ö„Å´Êï∞Â≠ó„ÅÆ„Éë„Çø„Éº„É≥„ÄÅ„Åì„Å°„Çâ„ÅØ„Éâ„ÉÉ„Éà„ÅØ1„Å§„ÅÆ„Åø
  if (formatType === "rate") {
    if (!!min && !/^\d+(\.\d+)?$/.test(min)) {
      min = normalizeDiscountRate(min.trim(), true);
    }
    if (!!max && !/^\d+(\.\d+)?$/.test(max)) {
      max = normalizeDiscountRate(max.trim(), true);
    }
  }
  // ÈáëÈ°ç„É´„Éº„Éà „Äå100‰∏áÂÜÜ„Äç„Åß„Åù„ÅÆ„Åæ„Åæ„Ç®„É≥„Çø„Éº„ÅßÈÄÅ‰ø°„Åï„Çå„ÅüÈöõ„Å´„Äå1,000,000„Äç„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åó„Å¶ÂæåÁ∂ö„Å´ÈÄÅ„Çã
  // „Éª„Äå10.2„Äç„ÅÆÂÖàÈ†≠„ÅåÊï∞Â≠ó„ÄÅ„Éâ„ÉÉ„Éà„Å®ÂæåÁ∂ö„Å´Êï∞Â≠ó„ÅÆ„Éë„Çø„Éº„É≥„ÄÅ„Åì„Å°„Çâ„ÅØ„Éâ„ÉÉ„Éà„ÅØ1„Å§„ÅÆ„Åø
  // „Éª„Äå1,000,000„Äç„ÅÆÂÖàÈ†≠„ÅåÊï∞Â≠ó„Å®„Äå,„Äç„Å®ÂæåÁ∂ö„Å´Êï∞Â≠ó„ÅÆ„Éë„Çø„Éº„É≥„ÄÅ„Åì„Å°„Çâ„ÅØ„Äå,„Äç„ÅØË§áÊï∞‰ΩøÁî®ÂèØ„Å†„Åå„ÄÅ„Äå,„Äç„ÅåÂÖàÈ†≠„Å®Êú´Â∞æ„Å´„ÅØ‰ΩøÁî®„Åß„Åç„Å™„ÅÑ
  if (formatType !== "rate") {
    if (!!min && !/^\d+(\.\d+)?$|^\d{1,3}(,\d{3})*$/.test(min)) {
      const convertedPrice = convertToYen(min.trim());
      if (convertedPrice !== null && !isNaN(convertedPrice)) {
        min = convertedPrice.toLocaleString();
      } else {
        min = "";
      }
    }
    if (!!max && !/^\d+(\.\d+)?$|^\d{1,3}(,\d{3})*$/.test(max)) {
      const convertedPrice = convertToYen(max.trim());
      if (convertedPrice !== null && !isNaN(convertedPrice)) {
        max = convertedPrice.toLocaleString();
      } else {
        max = "";
      }
    }
  }

  const halfMin = !!min
    ? formatType === "rate"
      ? toHalfWidthAndRemoveSpace(min)
          .trim()
          .replace(/[^\d.]/g, "")
      : toHalfWidthAndRemoveSpace(min).trim().replace(/,/g, "")
    : "";
  const halfMax = !!max
    ? formatType === "rate"
      ? toHalfWidthAndRemoveSpace(max)
          .trim()
          .replace(/[^\d.]/g, "")
      : toHalfWidthAndRemoveSpace(max).trim().replace(/,/g, "")
    : "";

  const minValid = isValidNumber(halfMin);
  const maxValid = isValidNumber(halfMax);

  const minNum = formatType === "integer" ? parseInt(halfMin, 10) : Number(halfMin!);
  const maxNum = formatType === "integer" ? parseInt(halfMax, 10) : Number(halfMax!);

  console.log("value", value, min, halfMin, minNum, minValid, max, halfMax, maxNum, maxValid);

  if (minValid && maxValid) {
    if (isNaN(minNum) || isNaN(maxNum)) throw new Error(`Êï∞ÂÄ§„ÅåÈÅ©Âàá„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÈÅ©Âàá„Å™Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
    if (minNum! <= maxNum!) {
      if (formatType === "integer") return { min: minNum.toFixed(0), max: maxNum.toFixed(0) };
      return { min: halfMin, max: halfMax };
    } else {
      const errorMsg = "Êï∞ÂÄ§„ÅÆ‰∏ãÈôêÂÄ§„Åå‰∏äÈôêÂÄ§„Çí‰∏äÂõû„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰∏äÈôêÂÄ§„Çí‰∏ãÈôêÂÄ§„Å®Âêå„Åò„Åã„Åù„Çå‰ª•‰∏ä„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
      throw new Error(errorMsg);
    }
  } else if (minValid && !maxValid) {
    if (isNaN(minNum)) throw new Error(`Êï∞ÂÄ§„ÅåÈÅ©Âàá„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÈÅ©Âàá„Å™Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
    if (formatType === "integer") return { min: minNum.toFixed(0), max: null };
    return { min: halfMin, max: null };
  } else if (!minValid && maxValid) {
    if (isNaN(maxNum)) throw new Error(`Êï∞ÂÄ§„ÅåÈÅ©Âàá„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÈÅ©Âàá„Å™Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
    if (formatType === "integer") return { min: null, max: maxNum.toFixed(0) };
    return { min: null, max: halfMax };
  }

  return { min: null, max: null };
};

// üî∏Ë£ΩÂìÅÂàÜÈ°ûÁî® is null, is not null„ÇíIS NULL, IS NOT NULL„Å´Â§âÊèõ
export const adjustIsNNN = (value: "is null" | "is not null"): "ISNULL" | "ISNOTNULL" =>
  value === "is null" ? "ISNULL" : "ISNOTNULL";

// ----------------------------------- üî∏„Çµ„Éñ„Éü„ÉÉ„ÉàÂâçÂá¶ÁêÜüî∏ -----------------------------------„Åì„Åì„Åæ„Åß

// ------------------------------ üî∏„Çµ„Éº„ÉÅ„É¢„Éº„ÉâÁî®üî∏ ------------------------------ „Åì„Åì„Åæ„Åß
