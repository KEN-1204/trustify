// 数値に変換可能かをチェックする関数

import { zenkakuToHankaku } from "./zenkakuToHankaku";

export const isValidNumber = (value: any) => {
  // 🔸
  // isNaN('10')やisNaN('0')は10や0で数値に変換してから判定するためfalseになるため、それの否定でtrueになる
  // return !isNaN(value) && value !== "" && value !== null && value !== undefined;

  // 🔸
  // 数値型の場合、直接trueを返す
  if (typeof value === "number") {
    return !isNaN(value); // NaN を false と評価するためのチェックを追加
  }
  // 文字列型の場合、数字のみ（オプショナルで小数点を含む）で構成されているかをチェック
  if (typeof value === "string") {
    return value !== "" && value !== null && value !== undefined && /^[+-]?(\d+\.?\d*|\.\d+)$/.test(value);
    // const halfValue = zenkakuToHankaku(value);
    // return (
    //   halfValue !== "" && halfValue !== null && halfValue !== undefined && /^[+-]?(\d+\.?\d*|\.\d+)$/.test(halfValue)
    // );
  }
  // それ以外の型の場合はfalseを返す
  return false;

  // if (typeof value === "string") {
  //   return /^[+-]?(\d+\.?\d*|\.\d+)$/.test(value); // 空文字やnullチェックは不要、正規表現によるチェックで十分
  // }
};

/**
はい、その正規表現 ^[+-]?(\d+\.?\d*|\.\d+)$ は、空文字列 ("")、null、または undefined に対しては false を返します。これは、正規表現が少なくとも1つ以上の数字（整数部または小数点以下）を含む文字列にのみマッチするためです。具体的には：

空文字列 ("") の場合、正規表現内で指定されたパターン（少なくとも1つの数字が含まれること）に一致しません。そのため、.test(value) は false を返します。
null や undefined に対して、JavaScript の RegExp.prototype.test() メソッドを直接適用することはできません。これらの値を .test() メソッドに渡す前に文字列型に変換する必要があります。しかし、isValidNumber 関数の実装でこれらの値が事前に除外されるため（例えば、typeof value === "string" のチェックによって）、これらの値が .test() メソッドに渡されることはありません。
したがって、この正規表現は、空文字列や null、undefined を無効な数値入力として扱い、これらを許可しないように実装されています。これにより、数値として意味を持たない入力を適切に弾くことができ、関数の呼び出し側で有効な数値のみを扱うことが可能になります。
 * 
 * 
^ は文字列の開始を意味します。
$ は文字列の終了を意味します。
[+-]? は、プラス記号+またはマイナス記号-が0回または1回出現することを意味します（つまり、符号はオプショナルです）。
\d+ は、数字が1回以上続くことを意味します。
\.? は、ピリオドが0回または1回出現することを意味します（つまり、小数点はオプショナルです）。
\d* は、数字が0回以上続くことを意味します。
| は論理的な「OR」を意味し、選択肢を区切ります。
() はキャプチャグループを意味します。キャプチャグループは、正規表現内の部分式をグループ化し、マッチした部分を後から参照したり、特定の処理をそのグループに限定したりするために使われます。この場合、()はその内部のパターンが1つの単位として扱われることを意味しています。

(\d+\.?\d*|\.\d+) の全体の意味について解説します。このパターンは2つの選択肢を|で区切っています：

\d+\.?\d* は、1つ以上の数字に続いて、オプショナルな小数点があり、その後に0回以上の数字が続くパターンを意味します。これは、整数部が1以上で、小数点以下がオプショナルな数値にマッチします（例: "123", "123.", "123.45"）。

\.\d+ は、先頭がピリオドで、その後に1つ以上の数字が続くパターンを意味します。これは、"0."と省略されることが多い小数点以下のみの数値にマッチします（例: ".45"）。

したがって、(\d+\.?\d*|\.\d+) の全体としては、「整数部を持つ数値（小数点以下オプショナル）」または「小数点以下のみの数値」のいずれかにマッチするという意味になります。これにより、さまざまな形式の数値（整数、小数、小数点以下のみの数値）をカバーできるようになっています。
 */
