/*
日本の住所データの前処理における全角英数字の扱い
一般的なCRMサービスやその他のデータベースシステムで日本の住所を扱う際、全角英数字の半角化はよく推奨されるプラクティスです。これは、以下の理由から行われます：

検索の一貫性と効率: データベース内での検索効率を向上させるために、全角と半角の不一致による検索ミスを避ける目的で行われます。全角英数字を半角に統一することで、検索クエリが単純化され、より速く、より正確な結果が得られるようになります。

データの標準化: データ入力のバリエーションを減らし、報告や分析の際の一貫性を保つために、全角文字を半角に変換します。これによりデータの整合性が向上し、システム間でのデータの互換性が保たれます。

ユーザー体験の向上: フォームやインターフェイス上でのデータ入力を標準化することで、ユーザーが予期しないエラーや混乱を避けることができます。

CRMサービスにおける全角英数字と記号の標準化
CRMサービスや他のデータ管理システムでのデータ標準化において、全角英数字と記号を半角に統一する方針は一般的です。これは以下の理由によります：

データの一貫性: 全角と半角の混在を解消することで、データの整合性が向上し、検索、ソート、レポーティングの際に予期しないエラーや問題が減少します。

検索性の向上: 全角文字と半角文字の混在は検索クエリの複雑化を招きます。特に、多様なユーザー入力を扱うCRMシステムでは、データ入力のバリエーションを減らすことが重要です。

国際化対応: 国際的な顧客データを扱う場合、様々な言語や文字種に対応するため、文字の統一はデータの管理を容易にします。


*/

import { RegionNameJpType } from "@/utils/selectOptions";
import { regExpPrefecture, regionNameToRegExpCitiesJp } from "./regExpAddress";

// 【記号の許容について】
// ・記号の使用：半角ハイフンは番地、アパートの番号の区切り文字として使用されるため許容
// ・記号の標準化：全角記号を半角に変換はDBの一貫性を保つために一般的な手法だが、住所データは必要な記号だけを保持し、不必要なものは削除

// 【日本と英語圏の住所標準化】
/**
1. 正規化：
   ・全角文字を半角に変換
   ・不要なスペース、記号の削除 ・日本住所では、全角数字と全角ハイフンを半角に変換
2. 形式の統一(住所要素を一定の順序で配置)
   ・日本：国名・郵便番号・都道府県・市区町村・番地・建物名
   ・英語圏：通りの名前・番地・市名・襲名・郵便番号
3. 不要な情報の削除
   ・住所以外の「角の薬局まで来てください」などの指示などを削除
4. データ検証
   ・可能であれば、郵便番号の正確性を検証し、存在しない住所や誤った郵便番号を修正
 */

export function normalizeAddress(address: string) {
  address = address.trim(); // 基本的なトリミング

  // 🔹1. 正規化
  // 全角英数字と全角記号の両方を半角に変換([０-９Ａ-Ｚａ-ｚ]を含む) *1
  address = address.replace(/[\uFF01-\uFF5E]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0));

  // 全角ハイフンと全角スペースを半角に変換(長音「ー」はそのまま残す) *3
  address = address.replace(/[－−]/g, "-").replace(/\u3000/g, " ");

  // 連続するスペースを1つに正規化
  address = address.replace(/[\s+]/g, " "); // 全角スペースを半角に変換後、連続するスペースを１つの半角スペースに正規化 (\s: すべての空白文字（半角スペース、タブ、改行など(全角スペースは含まない))

  // 🔹2. 形式の統一
  // 2-1. 各住所の要素を取り出しやすくするため住所の全ての空白を除去した変数を作成
  // 2-2. 日本か英語圏かの識別 都道府県Setオブジェクトにマッチすれば日本の住所 / 番地から始まっていれば英語圏の住所
  // 【日本の住所の形式統一】
  // 2-3. 都道府県Setオブジェクトにマッチした場合は変数から都道府県を取り出す
  // 2-4. 取り出した都道府県に対応する市区町村Setオブジェクトにマッチするかチェックし、マッチしたら市区町村を取り出す
  // 2-5. 丁目か「1-1」などの番地までの文字列を町名として取り出す
  // 2-6. 番地の形式統一処理して取り出す
  // 2-7. 取り出した番地以降の文字列が存在する場合は建物名として取り出す
  // 2-8. 取り出した住所の各要素を結合して、番地と建物名の間に半角スペースをセットする

  const isJa = true;
  // 日本の住所 形式統一
  if (isJa) {
    // 住所の各要素を保持するオブジェクト
    const addressElements: { [K in 'prefecture' | 'city' | 'town' | 'block' | 'building']: string | null } = {
      prefecture: null,
      city: null,
      town: null,
      block: null,
      building: null,
    };
    // 都道府県の正規表現
    const prefectureMatch = address.match(regExpPrefecture);
    if (prefectureMatch) {
      addressElements.prefecture = prefectureMatch[0];
      const regExpCity = regionNameToRegExpCitiesJp[addressElements.prefecture as RegionNameJpType];
      const cityMatch = address.match(regExpCity);
      if (cityMatch) addressElements.;
    }

    // 🔸2-3. 番地の形式統一(最後にスペースか文字列の終端か数字以外まで(1-1建物名のパターン))
    // 「丁目」や「番地」「号」の直後に数字が続く場合はハイフンに置換
    // 「1丁目1番地1号」または「1丁目1番1号」
    address = address.replace(/(\d+)(丁目)(\d+)(番地|番|-)(\d+)(号)(?=\s|$|[^\d])/g, "$1-$3-$5");

    // 「4丁目10-1」=>「4-10-1」
    address = address.replace(/(\d+)(丁目)(\d+)(番地|番|-)(\d+)(?=\s|$)/g, "$1-$3-$5");

    // 「1番地1号」または「1番1号」の後にスペースか文字列の終端がある場合は削除 「1番地1号」=>「1-1」
    address = address.replace(/(\d+)(丁目|番地|番)(\d+)(号)(?=\s|$)/g, "$1-$3");

    // 「丁目」や「番地」の直後に数字が続く場合で、かつ最後の数字の後にスペースか文字列の終端がある場合はハイフンに置換
    // 「1番地1」=>「1-1」or「1番地1 建物名」=>「1-1 建物名」
    address = address.replace(/(\d+)(丁目|番地|番)(\d+)(?=\s|$)/g, "$1-$3");

    // 「丁目」や「番地」「番」の後にスペースか文字列の終端がある場合は削除 「1号」=>「1」
    address = address.replace(/(\d+)(丁目|番地|番|号)(?=\s|$)/g, "$1");
  }

  return address;
}

/*
🔸全角英数字と全角記号を両方指定 *1
全角英数字と全角記号を含む \uFF01-\uFF5E 範囲を用いて一括で半角に変換するのは、実装がシンプルで効率的な方法です。このアプローチは、特に全角文字を一貫して半角に変換したい場合に適しています

address = address.replace(/[\uFF01-\uFF5E]/g, (ch) =>
    String.fromCharCode(ch.charCodeAt(0) - 0xFEE0));
*/

/*
🔸全角英数字のみ
// 全角英数字のみを半角に変換する場合(全角記号を変換しない場合)
// 全角の数字（\uFF10-\uFF19）、大文字アルファベット（\uFF21-\uFF3A）、および小文字アルファベット（\uFF41-\uFF5A）を対象に半角変換
address = address.replace(/[Ａ-Ｚａ-ｚ０-９]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0));
address = address.replace(/[\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A]/g, (ch) =>
    String.fromCharCode(ch.charCodeAt(0) - 0xfee0)
);
*/

/*
🔸全角記号のみ
全角記号の範囲は \uFF01-\uFF5E ですが、この範囲から全角英数字を除外したいので、具体的な全角記号のみを対象とする範囲を指定する必要があります。

全角英数字のUnicode範囲（\uFF10-\uFF19 および \uFF21-\uFF3A と \uFF41-\uFF5A）を除外して、残りの記号のみを変換する方法を示します。

// 全角英数字を除く記号の範囲を指定
text.replace(/[\uFF01-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF40\uFF5B-\uFF5E]/g, (ch) =>
    String.fromCharCode(ch.charCodeAt(0) - 0xFEE0));

この正規表現では、以下の範囲を対象としています：

\uFF01-\uFF0F：感嘆符（！）からスラッシュ（／）まで
\uFF1A-\uFF20：コロン（：）からアットマーク（＠）まで
\uFF3B-\uFF40：左角括弧（［）から重アクセント（｀）まで
\uFF5B-\uFF5E：左波括弧（｛）からチルダ（～）まで
*/

// *3
// // 「　」でも良いが。Unicode表記（\u3000）を明示的に使用する方が、どの文字を指しているのかが明確であり、異なるエディターや環境での表示の違いに左右されにくいため、好まれることが多い

/*
英数字
半角文字も全角文字も文字コード上で対応する並びになっているため、16進数でFEE0(10進数で65248)足し引きすることで相互に変換することが可能です。

【Unicodeの文字コード】
・半角文字：「A」の文字コードは[0041]。「z」は[007A]。
・全角文字：「Ａ」の文字コードは[FF21]。「ｚ」は[FF5a]。

・「半角文字」の文字コードから16進数でFEE0（「0xFEE0」）を足す⇒「全角文字」に変換
・「全角文字」の文字コードに16進数でFEE0（「0xFEE0」）を引く　⇒「半角文字」に変換

(例：JavaScript)全角文字⇒半角文字
Zenkaku = Zenkaku.replace(/[Ａ-Ｚａ-ｚ]/g, function(s) {
  return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
});

*/

/*
全角記号を半角に変換する場合

\uFF01-\uFF0F：感嘆符（！）からスラッシュ（／）まで
\uFF1A-\uFF20：コロン（：）からアットマーク（＠）まで
\uFF3B-\uFF40：左角括弧（［）から重アクセント（｀）まで
\uFF5B-\uFF5E：左波括弧（｛）からチルダ（～）まで
*/

// 全角数字とハイフンを半角に変換
//   address = address.replace(/[０-９]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0));
