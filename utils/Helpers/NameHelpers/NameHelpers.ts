// 名前や会社名に不適切な文字が含まれていないかチェックする正規表現
export const validateName = (input: string) => {
  // const regex = /[^a-zA-Z0-9 \u3000-\u303F\u3040-\u309F\u30A0-\u30FF]+/;
  const regex = /[^a-zA-Z0-9 \u3000-\u303F\u3040-\u309F\u30A0-\u30FF\u30FC\u002D\u002E\u0027\u005F]+/;
};

// 会社名データの標準化のための正規表現
export const normalizeCompanyName = (input: string) => {
  // 【下記の指定した文字のみ会社名として許可 それ以外は空文字にリプレイス [^...]】
  // ・a-zA-Z0-9: 半角英数字
  // ・ａ-ｚＡ-Ｚ０-９: 全角英数字
  // ・ （半角スペース）
  // ・\u3000-\u303F：全角の記号と句読点(\u3000：全角スペース)
  // ・\u3040-\u309F: ひらがな
  // ・\u30A0-\u30FF: カタカナ
  // ・\u30FC: 全角の長音符(カタカナの長音符)
  // ・\u002D: 半角ハイフン（-）
  // ・\u002E: 半角ピリオド（.）
  // ・\u0027: 半角アポストロフィ（'） - 企業名における所有格や略語でよく使用されます（例: O'Reilly, Ben's）
  // ・\u005F: アンダースコア（_） - 特に技術関連の企業や製品名に使われることがあります

  // 全角英数字と全角スペースを半角に変換
  let hankaku = input
    .replace(/[ａ-ｚＡ-Ｚ０-９]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xfee0))
    .replace(/　/g, " ");

  return hankaku.replace(/[^a-zA-Z0-9 \u3000-\u303F\u3040-\u309F\u30A0-\u30FF\u30FC\u002D\u002E\u0027\u005F]+/gu, ""); // *10
  // return input.replace(/[^a-zA-Z0-9 \u3000\u30FC\u3000-\u303F\u3040-\u309F\u30A0-\u30FF]+/g, "");
};

/*
*10 uフラグ
以下の場合に u フラグの使用が必須です：

Unicodeプロパティエスケープの使用：\p{...} や \P{...} などのUnicodeプロパティエスケープを使う場合、これらは u フラグなしでは認識されません。
サロゲートペア：Unicodeのサロゲートペアを適切に扱うためには、u フラグが必要です。これによりJavaScriptの正規表現エンジンは、サロゲートペアを正しく認識し、それらを一つのコードポイントとして扱います。
コードポイントエスケープ：\u{...} といった形式でUnicodeコードポイントを直接指定する場合も、u フラグが必要です。
u フラグは、正規表現がUnicode文字列を「理解」し、正しく処理するための重要なツールです。このフラグを使うことで、正規表現はUnicodeの完全な範囲を適切にサポートし、文字列操作やデータ検証が国際化されたコンテキストで正確に行われます。
 */

/*
ご提示された正規表現は、日本語および英語の会社名のためのデータクリーニングに非常に適しています。この正規表現は多様な文字種を許可し、不要な記号や特殊文字を効率的に排除できるよう設計されています。以下の要素が含まれていることで、ほとんどの標準的な企業名をカバーできます：

英数字と基本的な記号（ハイフン、ピリオド、アポストロフィ）で英語の法的な名前や通常使用される形式に対応。
全角文字（スペース、記号、ひらがな、カタカナ、長音符）で日本語の企業名を適切に処理。
この正規表現は、通常の使用シナリオにおいて会社名を正確に標準化するのに十分です。しかし、特定の異常値やエッジケース（例えば、非常に特殊な記号を含む外国名）に対しては、追加の検討が必要な場合があります。
*/

/*
  SQLクエリでLIKE句（またはILIKE）を使用しない場合、アンダースコア（_）やパーセント（%）などの特殊なワイルドカード文字をエスケープする必要は基本的にありません。ただし、将来的にこのようなクエリを使用する可能性がある場合は、事前にこれらの文字をエスケープしておくことも一考です。
  */

/*
processedValue.replace(/[^a-zA-Z0-9 \u3000-\u303F\u3040-\u309F\u30A0-\u30FF\u30FC\u002D\u002E\u0027\u005F]+/g, '');
processedValue.replace(/[^a-zA-Z0-9 \u3000\u30FC\u002D\u002E\u0027\u005F\u3001-\u303F\u3040-\u309F\u30A0-\u30FF]+/g, '');

記号の追加提案
グローバルな企業名に対応するために以下の記号を正規表現に含めることを検討してください：

この正規表現の構成要素は以下の通りです：

○既存
a-zA-Z0-9: 英数字。
 （半角スペース）
\u3000-\u303F：全角の記号と句読点(\u3000：全角スペース)
\u3040-\u309F: ひらがな。
\u30A0-\u30FF: カタカナ。
\u30FC: 全角の長音符(カタカナの長音符)。
\u002D: 半角ハイフン（-）。
\u002E: 半角ピリオド（.）。
\u0027: 半角アポストロフィ（'） - 企業名における所有格や略語でよく使用されます（例: O'Reilly, Ben's）
\u005F: アンダースコア（_） - 特に技術関連の企業や製品名に使われることがあります

○既存



グローバル企業の会社名や略称を考慮すると、半角ハイフン（-）や半角ピリオド（.）のような基本的な記号は含めるべきです。しかし、英語名やその他の国際的な名前に対応するためには、アンダースコア（_）やアポストロフィ（'）などの追加の記号も考慮に入れることが有益です。

*/

/*
processedValue.replace(/[^a-zA-Z0-9 \u3000\u30FC\u002D\u002E\u3001-\u303F\u3040-\u309F\u30A0-\u30FF]+/g, '');

この正規表現の構成要素は以下の通りです：

a-zA-Z0-9: 英数字。
\u3000: 全角スペース。
\u30FC: 全角の長音符。
\u002D: 半角ハイフン（-）。
\u002E: 半角ピリオド（.）。
\u3001-\u303F: 全角の記号と句読点。
\u3040-\u309F: ひらがな。
\u30A0-\u30FF: カタカナ。

考慮事項
記号の取り扱い: 会社名に記号が含まれる場合（例えば、「株式会社」や「有限会社」などの法的な接頭辞や接尾辞）は、これらを適切に取り扱う必要があります。日本では「株式会社」を「株式会社」と書くことが一般的ですが、時には略語（「株」）や他の形式も見られます。

英語名との混在: グローバルに展開している企業では、会社名に英語名（例: "Sony Corporation"）が含まれることがあります。これらの英語名も適切に取り扱うため、英数字と一部の記号を含めることが必要です。

データの用途と安全性: 会社名をデータベースに保存したり、他のシステムで使用したりする場合、SQLインジェクションやXSS（クロスサイトスクリプティング）などのセキュリティリスクを考慮する必要があります。適切なエスケープ処理やサニタイズを行うことが推奨されます。

会社名のデータを扱う際には、これらの要素を適切にバランスさせることで、データの一貫性と安全性を保ちつつ、有効な情報を保持することが可能になります。
*/

/*
input.replace(/[^a-zA-Z0-9 \u3000\u30FC\u3000-\u303F\u3040-\u309F\u30A0-\u30FF]+/g, "");

この正規表現の構成要素は以下の通りです：

a-z：小文字の英字
A-Z：大文字の英字
0-9：数字
` `（半角スペース）
\u3000：全角スペース
\u30FC：カタカナの長音符
\u3000-\u303F：全角の記号と句読点
\u3040-\u309F：ひらがな
\u30A0-\u30FF：カタカナ
*/

/*
全角の記号と句読点（\u3000-\u303F）
このUnicode範囲には、日本語テキストでよく使われるさまざまな全角記号や句読点が含まれています。以下はその範囲にあるいくつかの具体的な文字の例です：

\u3000：全角スペース
\u3001：全角読点（、）
\u3002：全角句点（。）
\u300C：全角「かぎかっこ開き」（「）
\u300D：全角「かぎかっこ閉じ」（」）
\u300E：全角「二重かぎかっこ開き」（『）
\u300F：全角「二重かぎかっこ閉じ」（』）
\u3010：全角「隅付き括弧開き」（【）
\u3011：全角「隅付き括弧閉じ」（】）
*/

/*
例：半角記号を除外する正規表現
以下の正規表現は、半角英数字と一部の記号を除いてすべての文字を削除する例です：

processedValue.replace(/[^a-zA-Z0-9 \u0021-\u002F\u003A-\u0040\u005B-\u0060\u007B-\u007E]+/g, '');

この範囲には、半角の次の記号が含まれます：

\u0021-\u002F：!から/まで
\u003A-\u0040：:から@まで
\u005B-\u0060：[から`` `（バッククオート）まで
\u007B-\u007E：{から~まで
これらの文字を保持するかどうかは、使用するアプリケーションのコンテキストやデータの要件によって決定されるべきです。

*/

// // 住所の正規化関数（例）
// function normalizeAddress(address) {
//   return address.replace(/[\uFF01-\uFF5E]/g, function(ch) {
//     return String.fromCharCode(ch.charCodeAt(0) - 0xFEE0);
//   });
// }

// // 日付変換のヘルパー関数
// function transformToDate(dateStr) {
//   const date = new Date(dateStr);
//   return !isNaN(date.getTime()) ? date.toISOString().substring(0, 10) : null;
// }

// ----------------------------------- 🔸全角文字 => 半角文字🔸 -----------------------------------
// https://www.solpac.co.jp/Column/Goanywhere/Convert_Lower_Upper_Katakana/
export const zenkakuMap: { [key: string]: string } = {
  ガ: "ｶﾞ",
  ギ: "ｷﾞ",
  グ: "ｸﾞ",
  ゲ: "ｹﾞ",
  ゴ: "ｺﾞ",
  ザ: "ｻﾞ",
  ジ: "ｼﾞ",
  ズ: "ｽﾞ",
  ゼ: "ｾﾞ",
  ゾ: "ｿﾞ",
  ダ: "ﾀﾞ",
  ヂ: "ﾁﾞ",
  ヅ: "ﾂﾞ",
  デ: "ﾃﾞ",
  ド: "ﾄﾞ",
  バ: "ﾊﾞ",
  ビ: "ﾋﾞ",
  ブ: "ﾌﾞ",
  ベ: "ﾍﾞ",
  ボ: "ﾎﾞ",
  パ: "ﾊﾟ",
  ピ: "ﾋﾟ",
  プ: "ﾌﾟ",
  ペ: "ﾍﾟ",
  ポ: "ﾎﾟ",
  ヴ: "ｳﾞ",
  ヷ: "ﾜﾞ",
  ヺ: "ｦﾞ",
  ア: "ｱ",
  イ: "ｲ",
  ウ: "ｳ",
  エ: "ｴ",
  オ: "ｵ",
  カ: "ｶ",
  キ: "ｷ",
  ク: "ｸ",
  ケ: "ｹ",
  コ: "ｺ",
  サ: "ｻ",
  シ: "ｼ",
  ス: "ｽ",
  セ: "ｾ",
  ソ: "ｿ",
  タ: "ﾀ",
  チ: "ﾁ",
  ツ: "ﾂ",
  テ: "ﾃ",
  ト: "ﾄ",
  ナ: "ﾅ",
  ニ: "ﾆ",
  ヌ: "ﾇ",
  ネ: "ﾈ",
  ノ: "ﾉ",
  ハ: "ﾊ",
  ヒ: "ﾋ",
  フ: "ﾌ",
  ヘ: "ﾍ",
  ホ: "ﾎ",
  マ: "ﾏ",
  ミ: "ﾐ",
  ム: "ﾑ",
  メ: "ﾒ",
  モ: "ﾓ",
  ヤ: "ﾔ",
  ユ: "ﾕ",
  ヨ: "ﾖ",
  ラ: "ﾗ",
  リ: "ﾘ",
  ル: "ﾙ",
  レ: "ﾚ",
  ロ: "ﾛ",
  ワ: "ﾜ",
  ヲ: "ｦ",
  ン: "ﾝ",
  ァ: "ｧ",
  ィ: "ｨ",
  ゥ: "ｩ",
  ェ: "ｪ",
  ォ: "ｫ",
  ッ: "ｯ",
  ャ: "ｬ",
  ュ: "ｭ",
  ョ: "ｮ",
  "。": "｡",
  "、": "､",
  ー: "ｰ",
  "「": "｢",
  "」": "｣",
  "・": "･",
};
// (例：JavaScript)全角文字⇒半角文字
export const zenkakuToHankakuJa = (input: string) => {
  return input.replace(/[ァ-ヶ。、ー「」・]/g, function (str) {
    const reg = new RegExp("(" + Object.keys(zenkakuMap).join("|") + ")", "g");
    return str
      .replace(reg, function (match: string) {
        return zenkakuMap[match];
      })
      .replace(/゛/g, "ﾞ")
      .replace(/゜/g, "ﾟ");
  });
};

// (例：JavaScript)半角文字⇒全角文字

// ----------------------------------- 漢数字 => アラビア数字 -----------------------------------

export function kanjiToArabic(kanji: string) {
  const kanjiDigits: { [key: string]: number } = {
    一: 1,
    二: 2,
    三: 3,
    四: 4,
    五: 5,
    六: 6,
    七: 7,
    八: 8,
    九: 9,
    十: 10,
    百: 100,
    千: 1000,
  };
  let result = 0;
  let temp = 0;

  // const kanjiNumSet =

  kanji.split("").forEach((char) => {
    if (kanjiDigits[char]) {
      temp = kanjiDigits[char];
    } else if (char === "十") {
      temp = (temp === 0 ? 1 : temp) * 10;
    } else if (char === "百") {
      temp = (temp === 0 ? 1 : temp) * 100;
    } else if (char === "千") {
      temp = (temp === 0 ? 1 : temp) * 1000;
    }
    result += temp;
    temp = 0;
  });

  return result;
}
// ----------------------------------- 漢数字 => アラビア数字 -----------------------------------ここまで
