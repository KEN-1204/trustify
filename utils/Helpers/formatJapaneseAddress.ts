// 全角英数字、ハイフンを半角に、番地、丁目をハイフンに変換

export function formatJapaneseAddress(address: string) {
  // 全角英数字を半角英数字に変換
  address = address
    .replace(/[０-９]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0))
    .replace(/[Ａ-Ｚａ-ｚ]/g, (s) => String.fromCharCode(s.charCodeAt(0) - 0xfee0))
    .replace(/　/g, " ") // 全角スペースを半角スペースに変換
    .replace(/－/g, "-") // 全角ハイフンを半角に変換
    .replace(/−/g, "-"); // 全角ハイフンを半角に変換

  // 全て、最後にスペースか文字列の終端がある場合
  // 「丁目」や「番地」「号」の直後に数字が続く場合はハイフンに置換
  // 「1丁目1番地1号」または「1丁目1番1号」
  address = address.replace(/(\d+)(丁目)(\d+)(番地|番|-)(\d+)(号)(?=\s|$)/g, "$1-$3-$5");

  // 「4丁目10-1」=>「4-10-1]
  address = address.replace(/(\d+)(丁目)(\d+)(番地|番|-)(\d+)(?=\s|$)/g, "$1-$3-$5");

  // 「1番地1号」または「1番1号」の後にスペースか文字列の終端がある場合は削除
  address = address.replace(/(\d+)(丁目|番地|番)(\d+)(号)(?=\s|$)/g, "$1-$3");

  // 「丁目」や「番地」の直後に数字が続く場合で、かつ最後の数字の後にスペースか文字列の終端がある場合はハイフンに置換
  address = address.replace(/(\d+)(丁目|番地|番)(\d+)(?=\s|$)/g, "$1-$3");

  // 「丁目」や「番地」「番」の後にスペースか文字列の終端がある場合は削除
  address = address.replace(/(\d+)(丁目|番地|番|号)(?=\s|$)/g, "$1");

  // その他のフォーマット調整が必要な場合は、ここで追加

  return address;
}

// 使用例
// console.log(formatJapaneseAddress("芝浦４番地２０")); // "芝浦4-20"
// console.log(formatJapaneseAddress("芝浦４丁目２０")); // "芝浦4-20"

/**
?=\s は正規表現の「先読みアサーション（Lookahead Assertion）」の一部で、特定のパターンに続くスペース（\s）を確認しますが、そのスペースはマッチ結果には含まれません。具体的には、この正規表現は次のように機能します：

(\d)(丁目|番地)(?=\s|$): この正規表現は、数字に続く「丁目」または「番地」という文字列を検出し、その後ろにスペースがあるか、あるいは文字列の終端に到達しているかを確認します。
\d は数字を表します。
(丁目|番地) は「丁目」または「番地」という文字列を表します。
(?=\s|$) は先読みアサーションで、これにより次のスペース（\s）または文字列の終端（$）を確認しますが、それらはマッチ結果に含まれません。
この正規表現の使用目的は、「丁目」または「番地」の直後にスペースがある場合にマッチし、それらの文字列を取り除くことです。例えば、「芝浦4丁目 建物名」の場合、「4丁目」の部分が「4」に置換され、「芝浦4 建物名」となります。
 */
